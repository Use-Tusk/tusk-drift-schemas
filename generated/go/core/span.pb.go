// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: core/span.proto

package corev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Package type classification enum
// Langauge agnostic
type PackageType int32

const (
	PackageType_PACKAGE_TYPE_UNSPECIFIED PackageType = 0
	PackageType_PACKAGE_TYPE_HTTP        PackageType = 1 // HTTP-based operations
	PackageType_PACKAGE_TYPE_GRAPHQL     PackageType = 2 // GraphQL operations
	PackageType_PACKAGE_TYPE_GRPC        PackageType = 3 // gRPC operations
	PackageType_PACKAGE_TYPE_PG          PackageType = 4 // PostgreSQL operations
	PackageType_PACKAGE_TYPE_MYSQL       PackageType = 5 // MySQL operations
	PackageType_PACKAGE_TYPE_MONGODB     PackageType = 6 // MongoDB operations
	PackageType_PACKAGE_TYPE_REDIS       PackageType = 7 // Redis caching operations
	PackageType_PACKAGE_TYPE_KAFKA       PackageType = 8 // Apache Kafka messaging
	PackageType_PACKAGE_TYPE_RABBITMQ    PackageType = 9 // RabbitMQ messaging
)

// Enum value maps for PackageType.
var (
	PackageType_name = map[int32]string{
		0: "PACKAGE_TYPE_UNSPECIFIED",
		1: "PACKAGE_TYPE_HTTP",
		2: "PACKAGE_TYPE_GRAPHQL",
		3: "PACKAGE_TYPE_GRPC",
		4: "PACKAGE_TYPE_PG",
		5: "PACKAGE_TYPE_MYSQL",
		6: "PACKAGE_TYPE_MONGODB",
		7: "PACKAGE_TYPE_REDIS",
		8: "PACKAGE_TYPE_KAFKA",
		9: "PACKAGE_TYPE_RABBITMQ",
	}
	PackageType_value = map[string]int32{
		"PACKAGE_TYPE_UNSPECIFIED": 0,
		"PACKAGE_TYPE_HTTP":        1,
		"PACKAGE_TYPE_GRAPHQL":     2,
		"PACKAGE_TYPE_GRPC":        3,
		"PACKAGE_TYPE_PG":          4,
		"PACKAGE_TYPE_MYSQL":       5,
		"PACKAGE_TYPE_MONGODB":     6,
		"PACKAGE_TYPE_REDIS":       7,
		"PACKAGE_TYPE_KAFKA":       8,
		"PACKAGE_TYPE_RABBITMQ":    9,
	}
)

func (x PackageType) Enum() *PackageType {
	p := new(PackageType)
	*p = x
	return p
}

func (x PackageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PackageType) Descriptor() protoreflect.EnumDescriptor {
	return file_core_span_proto_enumTypes[0].Descriptor()
}

func (PackageType) Type() protoreflect.EnumType {
	return &file_core_span_proto_enumTypes[0]
}

func (x PackageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PackageType.Descriptor instead.
func (PackageType) EnumDescriptor() ([]byte, []int) {
	return file_core_span_proto_rawDescGZIP(), []int{0}
}

// OpenTelemetry-compatible span kinds
type SpanKind int32

const (
	SpanKind_SPAN_KIND_UNSPECIFIED SpanKind = 0
	SpanKind_SPAN_KIND_INTERNAL    SpanKind = 1 // Internal operation
	SpanKind_SPAN_KIND_SERVER      SpanKind = 2 // Server-side operation
	SpanKind_SPAN_KIND_CLIENT      SpanKind = 3 // Client-side operation
	SpanKind_SPAN_KIND_PRODUCER    SpanKind = 4 // Message producer
	SpanKind_SPAN_KIND_CONSUMER    SpanKind = 5 // Message consumer
)

// Enum value maps for SpanKind.
var (
	SpanKind_name = map[int32]string{
		0: "SPAN_KIND_UNSPECIFIED",
		1: "SPAN_KIND_INTERNAL",
		2: "SPAN_KIND_SERVER",
		3: "SPAN_KIND_CLIENT",
		4: "SPAN_KIND_PRODUCER",
		5: "SPAN_KIND_CONSUMER",
	}
	SpanKind_value = map[string]int32{
		"SPAN_KIND_UNSPECIFIED": 0,
		"SPAN_KIND_INTERNAL":    1,
		"SPAN_KIND_SERVER":      2,
		"SPAN_KIND_CLIENT":      3,
		"SPAN_KIND_PRODUCER":    4,
		"SPAN_KIND_CONSUMER":    5,
	}
)

func (x SpanKind) Enum() *SpanKind {
	p := new(SpanKind)
	*p = x
	return p
}

func (x SpanKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpanKind) Descriptor() protoreflect.EnumDescriptor {
	return file_core_span_proto_enumTypes[1].Descriptor()
}

func (SpanKind) Type() protoreflect.EnumType {
	return &file_core_span_proto_enumTypes[1]
}

func (x SpanKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpanKind.Descriptor instead.
func (SpanKind) EnumDescriptor() ([]byte, []int) {
	return file_core_span_proto_rawDescGZIP(), []int{1}
}

type StatusCode int32

const (
	StatusCode_STATUS_CODE_UNSPECIFIED StatusCode = 0 // Default state
	StatusCode_STATUS_CODE_OK          StatusCode = 1 // Success
	StatusCode_STATUS_CODE_ERROR       StatusCode = 2 // Error occurred
)

// Enum value maps for StatusCode.
var (
	StatusCode_name = map[int32]string{
		0: "STATUS_CODE_UNSPECIFIED",
		1: "STATUS_CODE_OK",
		2: "STATUS_CODE_ERROR",
	}
	StatusCode_value = map[string]int32{
		"STATUS_CODE_UNSPECIFIED": 0,
		"STATUS_CODE_OK":          1,
		"STATUS_CODE_ERROR":       2,
	}
)

func (x StatusCode) Enum() *StatusCode {
	p := new(StatusCode)
	*p = x
	return p
}

func (x StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_core_span_proto_enumTypes[2].Descriptor()
}

func (StatusCode) Type() protoreflect.EnumType {
	return &file_core_span_proto_enumTypes[2]
}

func (x StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCode.Descriptor instead.
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_core_span_proto_rawDescGZIP(), []int{2}
}

// Universal span structure that works for all instrumentation types
type Span struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Core span identity
	TraceId      string `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	SpanId       string `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	ParentSpanId string `protobuf:"bytes,3,opt,name=parent_span_id,json=parentSpanId,proto3" json:"parent_span_id,omitempty"`
	// Visual name
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"` // "api/process_commit", "update UserQuery", "pg.query"
	// Instrumentation identity
	PackageName         string `protobuf:"bytes,5,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`                         // "http", "pg", "mysql", "redis", "fetch"
	InstrumentationName string `protobuf:"bytes,6,opt,name=instrumentation_name,json=instrumentationName,proto3" json:"instrumentation_name,omitempty"` // instrumentation class name
	SubmoduleName       string `protobuf:"bytes,7,opt,name=submodule_name,json=submoduleName,proto3" json:"submodule_name,omitempty"`                   // "GET", "query", "execute", "get", etc.
	// Package type classification
	PackageType PackageType `protobuf:"varint,8,opt,name=package_type,json=packageType,proto3,enum=tusk.drift.core.v1.PackageType" json:"package_type,omitempty"` // Enum classification of package type
	// Input/output data
	InputValue   *structpb.Struct `protobuf:"bytes,9,opt,name=input_value,json=inputValue,proto3" json:"input_value,omitempty"`        // Request/query/command data
	OutputValue  *structpb.Struct `protobuf:"bytes,10,opt,name=output_value,json=outputValue,proto3" json:"output_value,omitempty"`    // Response/result data
	InputSchema  *JsonSchema      `protobuf:"bytes,11,opt,name=input_schema,json=inputSchema,proto3" json:"input_schema,omitempty"`    // Schema definition for input
	OutputSchema *JsonSchema      `protobuf:"bytes,12,opt,name=output_schema,json=outputSchema,proto3" json:"output_schema,omitempty"` // Schema definition for output
	// Hash-based matching and validation
	InputSchemaHash  string `protobuf:"bytes,13,opt,name=input_schema_hash,json=inputSchemaHash,proto3" json:"input_schema_hash,omitempty"`    // Hash of input schema for validation
	OutputSchemaHash string `protobuf:"bytes,14,opt,name=output_schema_hash,json=outputSchemaHash,proto3" json:"output_schema_hash,omitempty"` // Hash of output schema for validation
	InputValueHash   string `protobuf:"bytes,15,opt,name=input_value_hash,json=inputValueHash,proto3" json:"input_value_hash,omitempty"`       // Hash of input_value for matching
	OutputValueHash  string `protobuf:"bytes,16,opt,name=output_value_hash,json=outputValueHash,proto3" json:"output_value_hash,omitempty"`    // Hash of output_value
	// Span metadata
	Kind          SpanKind    `protobuf:"varint,17,opt,name=kind,proto3,enum=tusk.drift.core.v1.SpanKind" json:"kind,omitempty"`           // OpenTelemetry-compatible span kind
	Status        *SpanStatus `protobuf:"bytes,18,opt,name=status,proto3" json:"status,omitempty"`                                         // Span completion status
	IsPreAppStart bool        `protobuf:"varint,19,opt,name=is_pre_app_start,json=isPreAppStart,proto3" json:"is_pre_app_start,omitempty"` // Whether the span is a before user marking app as ready
	// Timing information
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // Primary timestamp
	Duration  *durationpb.Duration   `protobuf:"bytes,21,opt,name=duration,proto3" json:"duration,omitempty"`   // Primary duration
	// Span relationships and state
	IsRootSpan    bool             `protobuf:"varint,22,opt,name=is_root_span,json=isRootSpan,proto3" json:"is_root_span,omitempty"`
	Metadata      *structpb.Struct `protobuf:"bytes,23,opt,name=metadata,proto3" json:"metadata,omitempty"` // Additional metadata
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Span) Reset() {
	*x = Span{}
	mi := &file_core_span_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Span) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span) ProtoMessage() {}

func (x *Span) ProtoReflect() protoreflect.Message {
	mi := &file_core_span_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span.ProtoReflect.Descriptor instead.
func (*Span) Descriptor() ([]byte, []int) {
	return file_core_span_proto_rawDescGZIP(), []int{0}
}

func (x *Span) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *Span) GetSpanId() string {
	if x != nil {
		return x.SpanId
	}
	return ""
}

func (x *Span) GetParentSpanId() string {
	if x != nil {
		return x.ParentSpanId
	}
	return ""
}

func (x *Span) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Span) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *Span) GetInstrumentationName() string {
	if x != nil {
		return x.InstrumentationName
	}
	return ""
}

func (x *Span) GetSubmoduleName() string {
	if x != nil {
		return x.SubmoduleName
	}
	return ""
}

func (x *Span) GetPackageType() PackageType {
	if x != nil {
		return x.PackageType
	}
	return PackageType_PACKAGE_TYPE_UNSPECIFIED
}

func (x *Span) GetInputValue() *structpb.Struct {
	if x != nil {
		return x.InputValue
	}
	return nil
}

func (x *Span) GetOutputValue() *structpb.Struct {
	if x != nil {
		return x.OutputValue
	}
	return nil
}

func (x *Span) GetInputSchema() *JsonSchema {
	if x != nil {
		return x.InputSchema
	}
	return nil
}

func (x *Span) GetOutputSchema() *JsonSchema {
	if x != nil {
		return x.OutputSchema
	}
	return nil
}

func (x *Span) GetInputSchemaHash() string {
	if x != nil {
		return x.InputSchemaHash
	}
	return ""
}

func (x *Span) GetOutputSchemaHash() string {
	if x != nil {
		return x.OutputSchemaHash
	}
	return ""
}

func (x *Span) GetInputValueHash() string {
	if x != nil {
		return x.InputValueHash
	}
	return ""
}

func (x *Span) GetOutputValueHash() string {
	if x != nil {
		return x.OutputValueHash
	}
	return ""
}

func (x *Span) GetKind() SpanKind {
	if x != nil {
		return x.Kind
	}
	return SpanKind_SPAN_KIND_UNSPECIFIED
}

func (x *Span) GetStatus() *SpanStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Span) GetIsPreAppStart() bool {
	if x != nil {
		return x.IsPreAppStart
	}
	return false
}

func (x *Span) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Span) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Span) GetIsRootSpan() bool {
	if x != nil {
		return x.IsRootSpan
	}
	return false
}

func (x *Span) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Span completion status
type SpanStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          StatusCode             `protobuf:"varint,1,opt,name=code,proto3,enum=tusk.drift.core.v1.StatusCode" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpanStatus) Reset() {
	*x = SpanStatus{}
	mi := &file_core_span_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpanStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanStatus) ProtoMessage() {}

func (x *SpanStatus) ProtoReflect() protoreflect.Message {
	mi := &file_core_span_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanStatus.ProtoReflect.Descriptor instead.
func (*SpanStatus) Descriptor() ([]byte, []int) {
	return file_core_span_proto_rawDescGZIP(), []int{1}
}

func (x *SpanStatus) GetCode() StatusCode {
	if x != nil {
		return x.Code
	}
	return StatusCode_STATUS_CODE_UNSPECIFIED
}

func (x *SpanStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Span events (logs) - optional
type SpanEvent struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Name          string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Timestamp     *timestamppb.Timestamp     `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Attributes    map[string]*structpb.Value `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpanEvent) Reset() {
	*x = SpanEvent{}
	mi := &file_core_span_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpanEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanEvent) ProtoMessage() {}

func (x *SpanEvent) ProtoReflect() protoreflect.Message {
	mi := &file_core_span_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanEvent.ProtoReflect.Descriptor instead.
func (*SpanEvent) Descriptor() ([]byte, []int) {
	return file_core_span_proto_rawDescGZIP(), []int{2}
}

func (x *SpanEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SpanEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SpanEvent) GetAttributes() map[string]*structpb.Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Span links - optional
type SpanLink struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	TraceId       string                     `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	SpanId        string                     `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	Attributes    map[string]*structpb.Value `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpanLink) Reset() {
	*x = SpanLink{}
	mi := &file_core_span_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpanLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanLink) ProtoMessage() {}

func (x *SpanLink) ProtoReflect() protoreflect.Message {
	mi := &file_core_span_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanLink.ProtoReflect.Descriptor instead.
func (*SpanLink) Descriptor() ([]byte, []int) {
	return file_core_span_proto_rawDescGZIP(), []int{3}
}

func (x *SpanLink) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *SpanLink) GetSpanId() string {
	if x != nil {
		return x.SpanId
	}
	return ""
}

func (x *SpanLink) GetAttributes() map[string]*structpb.Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Trace collection
type Trace struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TraceId       string                 `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	Spans         []*Span                `protobuf:"bytes,2,rep,name=spans,proto3" json:"spans,omitempty"`
	StartedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	CompletedAt   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Trace-level metadata
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Trace) Reset() {
	*x = Trace{}
	mi := &file_core_span_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace) ProtoMessage() {}

func (x *Trace) ProtoReflect() protoreflect.Message {
	mi := &file_core_span_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace.ProtoReflect.Descriptor instead.
func (*Trace) Descriptor() ([]byte, []int) {
	return file_core_span_proto_rawDescGZIP(), []int{4}
}

func (x *Trace) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *Trace) GetSpans() []*Span {
	if x != nil {
		return x.Spans
	}
	return nil
}

func (x *Trace) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *Trace) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *Trace) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_core_span_proto protoreflect.FileDescriptor

const file_core_span_proto_rawDesc = "" +
	"\n" +
	"\x0fcore/span.proto\x12\x12tusk.drift.core.v1\x1a\x1egoogle/protobuf/duration.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x16core/json_schema.proto\"\xbe\b\n" +
	"\x04Span\x12\x19\n" +
	"\btrace_id\x18\x01 \x01(\tR\atraceId\x12\x17\n" +
	"\aspan_id\x18\x02 \x01(\tR\x06spanId\x12$\n" +
	"\x0eparent_span_id\x18\x03 \x01(\tR\fparentSpanId\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12!\n" +
	"\fpackage_name\x18\x05 \x01(\tR\vpackageName\x121\n" +
	"\x14instrumentation_name\x18\x06 \x01(\tR\x13instrumentationName\x12%\n" +
	"\x0esubmodule_name\x18\a \x01(\tR\rsubmoduleName\x12B\n" +
	"\fpackage_type\x18\b \x01(\x0e2\x1f.tusk.drift.core.v1.PackageTypeR\vpackageType\x128\n" +
	"\vinput_value\x18\t \x01(\v2\x17.google.protobuf.StructR\n" +
	"inputValue\x12:\n" +
	"\foutput_value\x18\n" +
	" \x01(\v2\x17.google.protobuf.StructR\voutputValue\x12A\n" +
	"\finput_schema\x18\v \x01(\v2\x1e.tusk.drift.core.v1.JsonSchemaR\vinputSchema\x12C\n" +
	"\routput_schema\x18\f \x01(\v2\x1e.tusk.drift.core.v1.JsonSchemaR\foutputSchema\x12*\n" +
	"\x11input_schema_hash\x18\r \x01(\tR\x0finputSchemaHash\x12,\n" +
	"\x12output_schema_hash\x18\x0e \x01(\tR\x10outputSchemaHash\x12(\n" +
	"\x10input_value_hash\x18\x0f \x01(\tR\x0einputValueHash\x12*\n" +
	"\x11output_value_hash\x18\x10 \x01(\tR\x0foutputValueHash\x120\n" +
	"\x04kind\x18\x11 \x01(\x0e2\x1c.tusk.drift.core.v1.SpanKindR\x04kind\x126\n" +
	"\x06status\x18\x12 \x01(\v2\x1e.tusk.drift.core.v1.SpanStatusR\x06status\x12'\n" +
	"\x10is_pre_app_start\x18\x13 \x01(\bR\risPreAppStart\x128\n" +
	"\ttimestamp\x18\x14 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x125\n" +
	"\bduration\x18\x15 \x01(\v2\x19.google.protobuf.DurationR\bduration\x12 \n" +
	"\fis_root_span\x18\x16 \x01(\bR\n" +
	"isRootSpan\x123\n" +
	"\bmetadata\x18\x17 \x01(\v2\x17.google.protobuf.StructR\bmetadata\"Z\n" +
	"\n" +
	"SpanStatus\x122\n" +
	"\x04code\x18\x01 \x01(\x0e2\x1e.tusk.drift.core.v1.StatusCodeR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xff\x01\n" +
	"\tSpanEvent\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x128\n" +
	"\ttimestamp\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12M\n" +
	"\n" +
	"attributes\x18\x03 \x03(\v2-.tusk.drift.core.v1.SpanEvent.AttributesEntryR\n" +
	"attributes\x1aU\n" +
	"\x0fAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05value:\x028\x01\"\xe3\x01\n" +
	"\bSpanLink\x12\x19\n" +
	"\btrace_id\x18\x01 \x01(\tR\atraceId\x12\x17\n" +
	"\aspan_id\x18\x02 \x01(\tR\x06spanId\x12L\n" +
	"\n" +
	"attributes\x18\x03 \x03(\v2,.tusk.drift.core.v1.SpanLink.AttributesEntryR\n" +
	"attributes\x1aU\n" +
	"\x0fAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05value:\x028\x01\"\xce\x02\n" +
	"\x05Trace\x12\x19\n" +
	"\btrace_id\x18\x01 \x01(\tR\atraceId\x12.\n" +
	"\x05spans\x18\x02 \x03(\v2\x18.tusk.drift.core.v1.SpanR\x05spans\x129\n" +
	"\n" +
	"started_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tstartedAt\x12=\n" +
	"\fcompleted_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\vcompletedAt\x12C\n" +
	"\bmetadata\x18\x05 \x03(\v2'.tusk.drift.core.v1.Trace.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01*\x85\x02\n" +
	"\vPackageType\x12\x1c\n" +
	"\x18PACKAGE_TYPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11PACKAGE_TYPE_HTTP\x10\x01\x12\x18\n" +
	"\x14PACKAGE_TYPE_GRAPHQL\x10\x02\x12\x15\n" +
	"\x11PACKAGE_TYPE_GRPC\x10\x03\x12\x13\n" +
	"\x0fPACKAGE_TYPE_PG\x10\x04\x12\x16\n" +
	"\x12PACKAGE_TYPE_MYSQL\x10\x05\x12\x18\n" +
	"\x14PACKAGE_TYPE_MONGODB\x10\x06\x12\x16\n" +
	"\x12PACKAGE_TYPE_REDIS\x10\a\x12\x16\n" +
	"\x12PACKAGE_TYPE_KAFKA\x10\b\x12\x19\n" +
	"\x15PACKAGE_TYPE_RABBITMQ\x10\t*\x99\x01\n" +
	"\bSpanKind\x12\x19\n" +
	"\x15SPAN_KIND_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12SPAN_KIND_INTERNAL\x10\x01\x12\x14\n" +
	"\x10SPAN_KIND_SERVER\x10\x02\x12\x14\n" +
	"\x10SPAN_KIND_CLIENT\x10\x03\x12\x16\n" +
	"\x12SPAN_KIND_PRODUCER\x10\x04\x12\x16\n" +
	"\x12SPAN_KIND_CONSUMER\x10\x05*T\n" +
	"\n" +
	"StatusCode\x12\x1b\n" +
	"\x17STATUS_CODE_UNSPECIFIED\x10\x00\x12\x12\n" +
	"\x0eSTATUS_CODE_OK\x10\x01\x12\x15\n" +
	"\x11STATUS_CODE_ERROR\x10\x02B\xcf\x01\n" +
	"\x16com.tusk.drift.core.v1B\tSpanProtoP\x01Z?github.com/Use-Tusk/tusk-drift-schemas/generated/go/core;corev1\xa2\x02\x03TDC\xaa\x02\x12Tusk.Drift.Core.V1\xca\x02\x12Tusk\\Drift\\Core\\V1\xe2\x02\x1eTusk\\Drift\\Core\\V1\\GPBMetadata\xea\x02\x15Tusk::Drift::Core::V1b\x06proto3"

var (
	file_core_span_proto_rawDescOnce sync.Once
	file_core_span_proto_rawDescData []byte
)

func file_core_span_proto_rawDescGZIP() []byte {
	file_core_span_proto_rawDescOnce.Do(func() {
		file_core_span_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_core_span_proto_rawDesc), len(file_core_span_proto_rawDesc)))
	})
	return file_core_span_proto_rawDescData
}

var file_core_span_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_core_span_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_core_span_proto_goTypes = []any{
	(PackageType)(0),              // 0: tusk.drift.core.v1.PackageType
	(SpanKind)(0),                 // 1: tusk.drift.core.v1.SpanKind
	(StatusCode)(0),               // 2: tusk.drift.core.v1.StatusCode
	(*Span)(nil),                  // 3: tusk.drift.core.v1.Span
	(*SpanStatus)(nil),            // 4: tusk.drift.core.v1.SpanStatus
	(*SpanEvent)(nil),             // 5: tusk.drift.core.v1.SpanEvent
	(*SpanLink)(nil),              // 6: tusk.drift.core.v1.SpanLink
	(*Trace)(nil),                 // 7: tusk.drift.core.v1.Trace
	nil,                           // 8: tusk.drift.core.v1.SpanEvent.AttributesEntry
	nil,                           // 9: tusk.drift.core.v1.SpanLink.AttributesEntry
	nil,                           // 10: tusk.drift.core.v1.Trace.MetadataEntry
	(*structpb.Struct)(nil),       // 11: google.protobuf.Struct
	(*JsonSchema)(nil),            // 12: tusk.drift.core.v1.JsonSchema
	(*timestamppb.Timestamp)(nil), // 13: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 14: google.protobuf.Duration
	(*structpb.Value)(nil),        // 15: google.protobuf.Value
}
var file_core_span_proto_depIdxs = []int32{
	0,  // 0: tusk.drift.core.v1.Span.package_type:type_name -> tusk.drift.core.v1.PackageType
	11, // 1: tusk.drift.core.v1.Span.input_value:type_name -> google.protobuf.Struct
	11, // 2: tusk.drift.core.v1.Span.output_value:type_name -> google.protobuf.Struct
	12, // 3: tusk.drift.core.v1.Span.input_schema:type_name -> tusk.drift.core.v1.JsonSchema
	12, // 4: tusk.drift.core.v1.Span.output_schema:type_name -> tusk.drift.core.v1.JsonSchema
	1,  // 5: tusk.drift.core.v1.Span.kind:type_name -> tusk.drift.core.v1.SpanKind
	4,  // 6: tusk.drift.core.v1.Span.status:type_name -> tusk.drift.core.v1.SpanStatus
	13, // 7: tusk.drift.core.v1.Span.timestamp:type_name -> google.protobuf.Timestamp
	14, // 8: tusk.drift.core.v1.Span.duration:type_name -> google.protobuf.Duration
	11, // 9: tusk.drift.core.v1.Span.metadata:type_name -> google.protobuf.Struct
	2,  // 10: tusk.drift.core.v1.SpanStatus.code:type_name -> tusk.drift.core.v1.StatusCode
	13, // 11: tusk.drift.core.v1.SpanEvent.timestamp:type_name -> google.protobuf.Timestamp
	8,  // 12: tusk.drift.core.v1.SpanEvent.attributes:type_name -> tusk.drift.core.v1.SpanEvent.AttributesEntry
	9,  // 13: tusk.drift.core.v1.SpanLink.attributes:type_name -> tusk.drift.core.v1.SpanLink.AttributesEntry
	3,  // 14: tusk.drift.core.v1.Trace.spans:type_name -> tusk.drift.core.v1.Span
	13, // 15: tusk.drift.core.v1.Trace.started_at:type_name -> google.protobuf.Timestamp
	13, // 16: tusk.drift.core.v1.Trace.completed_at:type_name -> google.protobuf.Timestamp
	10, // 17: tusk.drift.core.v1.Trace.metadata:type_name -> tusk.drift.core.v1.Trace.MetadataEntry
	15, // 18: tusk.drift.core.v1.SpanEvent.AttributesEntry.value:type_name -> google.protobuf.Value
	15, // 19: tusk.drift.core.v1.SpanLink.AttributesEntry.value:type_name -> google.protobuf.Value
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_core_span_proto_init() }
func file_core_span_proto_init() {
	if File_core_span_proto != nil {
		return
	}
	file_core_json_schema_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_core_span_proto_rawDesc), len(file_core_span_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_core_span_proto_goTypes,
		DependencyIndexes: file_core_span_proto_depIdxs,
		EnumInfos:         file_core_span_proto_enumTypes,
		MessageInfos:      file_core_span_proto_msgTypes,
	}.Build()
	File_core_span_proto = out.File
	file_core_span_proto_goTypes = nil
	file_core_span_proto_depIdxs = nil
}
