// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: core/communication.proto

package corev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageType int32

const (
	MessageType_MESSAGE_TYPE_UNSPECIFIED  MessageType = 0
	MessageType_MESSAGE_TYPE_SDK_CONNECT  MessageType = 1
	MessageType_MESSAGE_TYPE_MOCK_REQUEST MessageType = 2
	MessageType_MESSAGE_TYPE_INBOUND_SPAN MessageType = 3
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "MESSAGE_TYPE_UNSPECIFIED",
		1: "MESSAGE_TYPE_SDK_CONNECT",
		2: "MESSAGE_TYPE_MOCK_REQUEST",
		3: "MESSAGE_TYPE_INBOUND_SPAN",
	}
	MessageType_value = map[string]int32{
		"MESSAGE_TYPE_UNSPECIFIED":  0,
		"MESSAGE_TYPE_SDK_CONNECT":  1,
		"MESSAGE_TYPE_MOCK_REQUEST": 2,
		"MESSAGE_TYPE_INBOUND_SPAN": 3,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_core_communication_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_core_communication_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_core_communication_proto_rawDescGZIP(), []int{0}
}

// SDK connection handshake
type ConnectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServiceId     string                 `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	SdkVersion    string                 `protobuf:"bytes,2,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version,omitempty"`
	MinCliVersion string                 `protobuf:"bytes,3,opt,name=min_cli_version,json=minCliVersion,proto3" json:"min_cli_version,omitempty"`
	Metadata      *structpb.Struct       `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"` // Additional metadata (JSON-serializable)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectRequest) Reset() {
	*x = ConnectRequest{}
	mi := &file_core_communication_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest) ProtoMessage() {}

func (x *ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_communication_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest.ProtoReflect.Descriptor instead.
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return file_core_communication_proto_rawDescGZIP(), []int{0}
}

func (x *ConnectRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ConnectRequest) GetSdkVersion() string {
	if x != nil {
		return x.SdkVersion
	}
	return ""
}

func (x *ConnectRequest) GetMinCliVersion() string {
	if x != nil {
		return x.MinCliVersion
	}
	return ""
}

func (x *ConnectRequest) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ConnectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectResponse) Reset() {
	*x = ConnectResponse{}
	mi := &file_core_communication_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse) ProtoMessage() {}

func (x *ConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_communication_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse.ProtoReflect.Descriptor instead.
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return file_core_communication_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ConnectResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type GetMockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestId     string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"` // For async correlation (used in CLI)
	TestId        string                 `protobuf:"bytes,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`          // Trace/test identifier
	OutboundSpan  *Span                  `protobuf:"bytes,3,opt,name=outbound_span,json=outboundSpan,proto3" json:"outbound_span,omitempty"`
	StackTrace    string                 `protobuf:"bytes,4,opt,name=stack_trace,json=stackTrace,proto3" json:"stack_trace,omitempty"`
	Operation     string                 `protobuf:"bytes,5,opt,name=operation,proto3" json:"operation,omitempty"`                                                                 // "GET", "query", "execute", "get", etc.
	Tags          map[string]string      `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Generic key-value metadata
	RequestedAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=requested_at,json=requestedAt,proto3" json:"requested_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMockRequest) Reset() {
	*x = GetMockRequest{}
	mi := &file_core_communication_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMockRequest) ProtoMessage() {}

func (x *GetMockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_communication_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMockRequest.ProtoReflect.Descriptor instead.
func (*GetMockRequest) Descriptor() ([]byte, []int) {
	return file_core_communication_proto_rawDescGZIP(), []int{2}
}

func (x *GetMockRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GetMockRequest) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *GetMockRequest) GetOutboundSpan() *Span {
	if x != nil {
		return x.OutboundSpan
	}
	return nil
}

func (x *GetMockRequest) GetStackTrace() string {
	if x != nil {
		return x.StackTrace
	}
	return ""
}

func (x *GetMockRequest) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *GetMockRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GetMockRequest) GetRequestedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestedAt
	}
	return nil
}

type GetMockResponse struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	RequestId string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"` // Correlate with request
	Found     bool                   `protobuf:"varint,2,opt,name=found,proto3" json:"found,omitempty"`                         // Whether mock was found
	// Opaque response data - CLI returns as-is from stored spans
	ResponseData *structpb.Struct `protobuf:"bytes,3,opt,name=response_data,json=responseData,proto3" json:"response_data,omitempty"` // Response payload
	Metadata     *structpb.Struct `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`                             // Response metadata (headers, status, etc.)
	// Error information
	Error     string `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`                          // Error message if not found
	ErrorCode string `protobuf:"bytes,6,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"` // Error classification
	// Mock metadata
	MatchedSpanId string                 `protobuf:"bytes,7,opt,name=matched_span_id,json=matchedSpanId,proto3" json:"matched_span_id,omitempty"` // Which span was matched
	MatchedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=matched_at,json=matchedAt,proto3" json:"matched_at,omitempty"`               // When the match occurred
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMockResponse) Reset() {
	*x = GetMockResponse{}
	mi := &file_core_communication_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMockResponse) ProtoMessage() {}

func (x *GetMockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_communication_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMockResponse.ProtoReflect.Descriptor instead.
func (*GetMockResponse) Descriptor() ([]byte, []int) {
	return file_core_communication_proto_rawDescGZIP(), []int{3}
}

func (x *GetMockResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GetMockResponse) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

func (x *GetMockResponse) GetResponseData() *structpb.Struct {
	if x != nil {
		return x.ResponseData
	}
	return nil
}

func (x *GetMockResponse) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetMockResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GetMockResponse) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *GetMockResponse) GetMatchedSpanId() string {
	if x != nil {
		return x.MatchedSpanId
	}
	return ""
}

func (x *GetMockResponse) GetMatchedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.MatchedAt
	}
	return nil
}

// Message types for the Unix socket protocol
type SDKMessage struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Type      MessageType            `protobuf:"varint,1,opt,name=type,proto3,enum=tusk.drift.core.v1.MessageType" json:"type,omitempty"`
	RequestId string                 `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Types that are valid to be assigned to Payload:
	//
	//	*SDKMessage_ConnectRequest
	//	*SDKMessage_GetMockRequest
	//	*SDKMessage_SendInboundSpanForReplayRequest
	Payload       isSDKMessage_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SDKMessage) Reset() {
	*x = SDKMessage{}
	mi := &file_core_communication_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SDKMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKMessage) ProtoMessage() {}

func (x *SDKMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_communication_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKMessage.ProtoReflect.Descriptor instead.
func (*SDKMessage) Descriptor() ([]byte, []int) {
	return file_core_communication_proto_rawDescGZIP(), []int{4}
}

func (x *SDKMessage) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_MESSAGE_TYPE_UNSPECIFIED
}

func (x *SDKMessage) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SDKMessage) GetPayload() isSDKMessage_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SDKMessage) GetConnectRequest() *ConnectRequest {
	if x != nil {
		if x, ok := x.Payload.(*SDKMessage_ConnectRequest); ok {
			return x.ConnectRequest
		}
	}
	return nil
}

func (x *SDKMessage) GetGetMockRequest() *GetMockRequest {
	if x != nil {
		if x, ok := x.Payload.(*SDKMessage_GetMockRequest); ok {
			return x.GetMockRequest
		}
	}
	return nil
}

func (x *SDKMessage) GetSendInboundSpanForReplayRequest() *SendInboundSpanForReplayRequest {
	if x != nil {
		if x, ok := x.Payload.(*SDKMessage_SendInboundSpanForReplayRequest); ok {
			return x.SendInboundSpanForReplayRequest
		}
	}
	return nil
}

type isSDKMessage_Payload interface {
	isSDKMessage_Payload()
}

type SDKMessage_ConnectRequest struct {
	ConnectRequest *ConnectRequest `protobuf:"bytes,3,opt,name=connect_request,json=connectRequest,proto3,oneof"`
}

type SDKMessage_GetMockRequest struct {
	GetMockRequest *GetMockRequest `protobuf:"bytes,4,opt,name=get_mock_request,json=getMockRequest,proto3,oneof"`
}

type SDKMessage_SendInboundSpanForReplayRequest struct {
	SendInboundSpanForReplayRequest *SendInboundSpanForReplayRequest `protobuf:"bytes,5,opt,name=send_inbound_span_for_replay_request,json=sendInboundSpanForReplayRequest,proto3,oneof"`
}

func (*SDKMessage_ConnectRequest) isSDKMessage_Payload() {}

func (*SDKMessage_GetMockRequest) isSDKMessage_Payload() {}

func (*SDKMessage_SendInboundSpanForReplayRequest) isSDKMessage_Payload() {}

type CLIMessage struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Type      MessageType            `protobuf:"varint,1,opt,name=type,proto3,enum=tusk.drift.core.v1.MessageType" json:"type,omitempty"`
	RequestId string                 `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Types that are valid to be assigned to Payload:
	//
	//	*CLIMessage_ConnectResponse
	//	*CLIMessage_GetMockResponse
	//	*CLIMessage_SendInboundSpanForReplayResponse
	Payload       isCLIMessage_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CLIMessage) Reset() {
	*x = CLIMessage{}
	mi := &file_core_communication_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CLIMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLIMessage) ProtoMessage() {}

func (x *CLIMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_communication_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLIMessage.ProtoReflect.Descriptor instead.
func (*CLIMessage) Descriptor() ([]byte, []int) {
	return file_core_communication_proto_rawDescGZIP(), []int{5}
}

func (x *CLIMessage) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_MESSAGE_TYPE_UNSPECIFIED
}

func (x *CLIMessage) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CLIMessage) GetPayload() isCLIMessage_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *CLIMessage) GetConnectResponse() *ConnectResponse {
	if x != nil {
		if x, ok := x.Payload.(*CLIMessage_ConnectResponse); ok {
			return x.ConnectResponse
		}
	}
	return nil
}

func (x *CLIMessage) GetGetMockResponse() *GetMockResponse {
	if x != nil {
		if x, ok := x.Payload.(*CLIMessage_GetMockResponse); ok {
			return x.GetMockResponse
		}
	}
	return nil
}

func (x *CLIMessage) GetSendInboundSpanForReplayResponse() *SendInboundSpanForReplayResponse {
	if x != nil {
		if x, ok := x.Payload.(*CLIMessage_SendInboundSpanForReplayResponse); ok {
			return x.SendInboundSpanForReplayResponse
		}
	}
	return nil
}

type isCLIMessage_Payload interface {
	isCLIMessage_Payload()
}

type CLIMessage_ConnectResponse struct {
	ConnectResponse *ConnectResponse `protobuf:"bytes,3,opt,name=connect_response,json=connectResponse,proto3,oneof"`
}

type CLIMessage_GetMockResponse struct {
	GetMockResponse *GetMockResponse `protobuf:"bytes,4,opt,name=get_mock_response,json=getMockResponse,proto3,oneof"`
}

type CLIMessage_SendInboundSpanForReplayResponse struct {
	SendInboundSpanForReplayResponse *SendInboundSpanForReplayResponse `protobuf:"bytes,5,opt,name=send_inbound_span_for_replay_response,json=sendInboundSpanForReplayResponse,proto3,oneof"`
}

func (*CLIMessage_ConnectResponse) isCLIMessage_Payload() {}

func (*CLIMessage_GetMockResponse) isCLIMessage_Payload() {}

func (*CLIMessage_SendInboundSpanForReplayResponse) isCLIMessage_Payload() {}

type SendInboundSpanForReplayRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Span          *Span                  `protobuf:"bytes,1,opt,name=span,proto3" json:"span,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendInboundSpanForReplayRequest) Reset() {
	*x = SendInboundSpanForReplayRequest{}
	mi := &file_core_communication_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendInboundSpanForReplayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendInboundSpanForReplayRequest) ProtoMessage() {}

func (x *SendInboundSpanForReplayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_communication_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendInboundSpanForReplayRequest.ProtoReflect.Descriptor instead.
func (*SendInboundSpanForReplayRequest) Descriptor() ([]byte, []int) {
	return file_core_communication_proto_rawDescGZIP(), []int{6}
}

func (x *SendInboundSpanForReplayRequest) GetSpan() *Span {
	if x != nil {
		return x.Span
	}
	return nil
}

type SendInboundSpanForReplayResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendInboundSpanForReplayResponse) Reset() {
	*x = SendInboundSpanForReplayResponse{}
	mi := &file_core_communication_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendInboundSpanForReplayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendInboundSpanForReplayResponse) ProtoMessage() {}

func (x *SendInboundSpanForReplayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_communication_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendInboundSpanForReplayResponse.ProtoReflect.Descriptor instead.
func (*SendInboundSpanForReplayResponse) Descriptor() ([]byte, []int) {
	return file_core_communication_proto_rawDescGZIP(), []int{7}
}

func (x *SendInboundSpanForReplayResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_core_communication_proto protoreflect.FileDescriptor

const file_core_communication_proto_rawDesc = "" +
	"\n" +
	"\x18core/communication.proto\x12\x12tusk.drift.core.v1\x1a\x0fcore/span.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xad\x01\n" +
	"\x0eConnectRequest\x12\x1d\n" +
	"\n" +
	"service_id\x18\x01 \x01(\tR\tserviceId\x12\x1f\n" +
	"\vsdk_version\x18\x02 \x01(\tR\n" +
	"sdkVersion\x12&\n" +
	"\x0fmin_cli_version\x18\x03 \x01(\tR\rminCliVersion\x123\n" +
	"\bmetadata\x18\x04 \x01(\v2\x17.google.protobuf.StructR\bmetadata\"A\n" +
	"\x0fConnectResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"\x80\x03\n" +
	"\x0eGetMockRequest\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12\x17\n" +
	"\atest_id\x18\x02 \x01(\tR\x06testId\x12=\n" +
	"\routbound_span\x18\x03 \x01(\v2\x18.tusk.drift.core.v1.SpanR\foutboundSpan\x12\x1f\n" +
	"\vstack_trace\x18\x04 \x01(\tR\n" +
	"stackTrace\x12\x1c\n" +
	"\toperation\x18\x05 \x01(\tR\toperation\x12@\n" +
	"\x04tags\x18\x06 \x03(\v2,.tusk.drift.core.v1.GetMockRequest.TagsEntryR\x04tags\x12=\n" +
	"\frequested_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\vrequestedAt\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd1\x02\n" +
	"\x0fGetMockResponse\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12\x14\n" +
	"\x05found\x18\x02 \x01(\bR\x05found\x12<\n" +
	"\rresponse_data\x18\x03 \x01(\v2\x17.google.protobuf.StructR\fresponseData\x123\n" +
	"\bmetadata\x18\x04 \x01(\v2\x17.google.protobuf.StructR\bmetadata\x12\x14\n" +
	"\x05error\x18\x05 \x01(\tR\x05error\x12\x1d\n" +
	"\n" +
	"error_code\x18\x06 \x01(\tR\terrorCode\x12&\n" +
	"\x0fmatched_span_id\x18\a \x01(\tR\rmatchedSpanId\x129\n" +
	"\n" +
	"matched_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tmatchedAt\"\x91\x03\n" +
	"\n" +
	"SDKMessage\x123\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1f.tusk.drift.core.v1.MessageTypeR\x04type\x12\x1d\n" +
	"\n" +
	"request_id\x18\x02 \x01(\tR\trequestId\x12M\n" +
	"\x0fconnect_request\x18\x03 \x01(\v2\".tusk.drift.core.v1.ConnectRequestH\x00R\x0econnectRequest\x12N\n" +
	"\x10get_mock_request\x18\x04 \x01(\v2\".tusk.drift.core.v1.GetMockRequestH\x00R\x0egetMockRequest\x12\x84\x01\n" +
	"$send_inbound_span_for_replay_request\x18\x05 \x01(\v23.tusk.drift.core.v1.SendInboundSpanForReplayRequestH\x00R\x1fsendInboundSpanForReplayRequestB\t\n" +
	"\apayload\"\x9a\x03\n" +
	"\n" +
	"CLIMessage\x123\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1f.tusk.drift.core.v1.MessageTypeR\x04type\x12\x1d\n" +
	"\n" +
	"request_id\x18\x02 \x01(\tR\trequestId\x12P\n" +
	"\x10connect_response\x18\x03 \x01(\v2#.tusk.drift.core.v1.ConnectResponseH\x00R\x0fconnectResponse\x12Q\n" +
	"\x11get_mock_response\x18\x04 \x01(\v2#.tusk.drift.core.v1.GetMockResponseH\x00R\x0fgetMockResponse\x12\x87\x01\n" +
	"%send_inbound_span_for_replay_response\x18\x05 \x01(\v24.tusk.drift.core.v1.SendInboundSpanForReplayResponseH\x00R sendInboundSpanForReplayResponseB\t\n" +
	"\apayload\"O\n" +
	"\x1fSendInboundSpanForReplayRequest\x12,\n" +
	"\x04span\x18\x01 \x01(\v2\x18.tusk.drift.core.v1.SpanR\x04span\"<\n" +
	" SendInboundSpanForReplayResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess*\x87\x01\n" +
	"\vMessageType\x12\x1c\n" +
	"\x18MESSAGE_TYPE_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18MESSAGE_TYPE_SDK_CONNECT\x10\x01\x12\x1d\n" +
	"\x19MESSAGE_TYPE_MOCK_REQUEST\x10\x02\x12\x1d\n" +
	"\x19MESSAGE_TYPE_INBOUND_SPAN\x10\x032\xbd\x02\n" +
	"\vMockService\x12R\n" +
	"\aConnect\x12\".tusk.drift.core.v1.ConnectRequest\x1a#.tusk.drift.core.v1.ConnectResponse\x12R\n" +
	"\aGetMock\x12\".tusk.drift.core.v1.GetMockRequest\x1a#.tusk.drift.core.v1.GetMockResponse\x12\x85\x01\n" +
	"\x18SendInboundSpanForReplay\x123.tusk.drift.core.v1.SendInboundSpanForReplayRequest\x1a4.tusk.drift.core.v1.SendInboundSpanForReplayResponseB\xd8\x01\n" +
	"\x16com.tusk.drift.core.v1B\x12CommunicationProtoP\x01Z?github.com/Use-Tusk/tusk-drift-schemas/generated/go/core;corev1\xa2\x02\x03TDC\xaa\x02\x12Tusk.Drift.Core.V1\xca\x02\x12Tusk\\Drift\\Core\\V1\xe2\x02\x1eTusk\\Drift\\Core\\V1\\GPBMetadata\xea\x02\x15Tusk::Drift::Core::V1b\x06proto3"

var (
	file_core_communication_proto_rawDescOnce sync.Once
	file_core_communication_proto_rawDescData []byte
)

func file_core_communication_proto_rawDescGZIP() []byte {
	file_core_communication_proto_rawDescOnce.Do(func() {
		file_core_communication_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_core_communication_proto_rawDesc), len(file_core_communication_proto_rawDesc)))
	})
	return file_core_communication_proto_rawDescData
}

var file_core_communication_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_core_communication_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_core_communication_proto_goTypes = []any{
	(MessageType)(0),                         // 0: tusk.drift.core.v1.MessageType
	(*ConnectRequest)(nil),                   // 1: tusk.drift.core.v1.ConnectRequest
	(*ConnectResponse)(nil),                  // 2: tusk.drift.core.v1.ConnectResponse
	(*GetMockRequest)(nil),                   // 3: tusk.drift.core.v1.GetMockRequest
	(*GetMockResponse)(nil),                  // 4: tusk.drift.core.v1.GetMockResponse
	(*SDKMessage)(nil),                       // 5: tusk.drift.core.v1.SDKMessage
	(*CLIMessage)(nil),                       // 6: tusk.drift.core.v1.CLIMessage
	(*SendInboundSpanForReplayRequest)(nil),  // 7: tusk.drift.core.v1.SendInboundSpanForReplayRequest
	(*SendInboundSpanForReplayResponse)(nil), // 8: tusk.drift.core.v1.SendInboundSpanForReplayResponse
	nil,                                      // 9: tusk.drift.core.v1.GetMockRequest.TagsEntry
	(*structpb.Struct)(nil),                  // 10: google.protobuf.Struct
	(*Span)(nil),                             // 11: tusk.drift.core.v1.Span
	(*timestamppb.Timestamp)(nil),            // 12: google.protobuf.Timestamp
}
var file_core_communication_proto_depIdxs = []int32{
	10, // 0: tusk.drift.core.v1.ConnectRequest.metadata:type_name -> google.protobuf.Struct
	11, // 1: tusk.drift.core.v1.GetMockRequest.outbound_span:type_name -> tusk.drift.core.v1.Span
	9,  // 2: tusk.drift.core.v1.GetMockRequest.tags:type_name -> tusk.drift.core.v1.GetMockRequest.TagsEntry
	12, // 3: tusk.drift.core.v1.GetMockRequest.requested_at:type_name -> google.protobuf.Timestamp
	10, // 4: tusk.drift.core.v1.GetMockResponse.response_data:type_name -> google.protobuf.Struct
	10, // 5: tusk.drift.core.v1.GetMockResponse.metadata:type_name -> google.protobuf.Struct
	12, // 6: tusk.drift.core.v1.GetMockResponse.matched_at:type_name -> google.protobuf.Timestamp
	0,  // 7: tusk.drift.core.v1.SDKMessage.type:type_name -> tusk.drift.core.v1.MessageType
	1,  // 8: tusk.drift.core.v1.SDKMessage.connect_request:type_name -> tusk.drift.core.v1.ConnectRequest
	3,  // 9: tusk.drift.core.v1.SDKMessage.get_mock_request:type_name -> tusk.drift.core.v1.GetMockRequest
	7,  // 10: tusk.drift.core.v1.SDKMessage.send_inbound_span_for_replay_request:type_name -> tusk.drift.core.v1.SendInboundSpanForReplayRequest
	0,  // 11: tusk.drift.core.v1.CLIMessage.type:type_name -> tusk.drift.core.v1.MessageType
	2,  // 12: tusk.drift.core.v1.CLIMessage.connect_response:type_name -> tusk.drift.core.v1.ConnectResponse
	4,  // 13: tusk.drift.core.v1.CLIMessage.get_mock_response:type_name -> tusk.drift.core.v1.GetMockResponse
	8,  // 14: tusk.drift.core.v1.CLIMessage.send_inbound_span_for_replay_response:type_name -> tusk.drift.core.v1.SendInboundSpanForReplayResponse
	11, // 15: tusk.drift.core.v1.SendInboundSpanForReplayRequest.span:type_name -> tusk.drift.core.v1.Span
	1,  // 16: tusk.drift.core.v1.MockService.Connect:input_type -> tusk.drift.core.v1.ConnectRequest
	3,  // 17: tusk.drift.core.v1.MockService.GetMock:input_type -> tusk.drift.core.v1.GetMockRequest
	7,  // 18: tusk.drift.core.v1.MockService.SendInboundSpanForReplay:input_type -> tusk.drift.core.v1.SendInboundSpanForReplayRequest
	2,  // 19: tusk.drift.core.v1.MockService.Connect:output_type -> tusk.drift.core.v1.ConnectResponse
	4,  // 20: tusk.drift.core.v1.MockService.GetMock:output_type -> tusk.drift.core.v1.GetMockResponse
	8,  // 21: tusk.drift.core.v1.MockService.SendInboundSpanForReplay:output_type -> tusk.drift.core.v1.SendInboundSpanForReplayResponse
	19, // [19:22] is the sub-list for method output_type
	16, // [16:19] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_core_communication_proto_init() }
func file_core_communication_proto_init() {
	if File_core_communication_proto != nil {
		return
	}
	file_core_span_proto_init()
	file_core_communication_proto_msgTypes[4].OneofWrappers = []any{
		(*SDKMessage_ConnectRequest)(nil),
		(*SDKMessage_GetMockRequest)(nil),
		(*SDKMessage_SendInboundSpanForReplayRequest)(nil),
	}
	file_core_communication_proto_msgTypes[5].OneofWrappers = []any{
		(*CLIMessage_ConnectResponse)(nil),
		(*CLIMessage_GetMockResponse)(nil),
		(*CLIMessage_SendInboundSpanForReplayResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_core_communication_proto_rawDesc), len(file_core_communication_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_core_communication_proto_goTypes,
		DependencyIndexes: file_core_communication_proto_depIdxs,
		EnumInfos:         file_core_communication_proto_enumTypes,
		MessageInfos:      file_core_communication_proto_msgTypes,
	}.Build()
	File_core_communication_proto = out.File
	file_core_communication_proto_goTypes = nil
	file_core_communication_proto_depIdxs = nil
}
