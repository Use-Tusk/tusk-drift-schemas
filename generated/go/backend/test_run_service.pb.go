// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: backend/test_run_service.proto

package backendv1

import (
	core "github.com/Use-Tusk/tusk-drift-schemas/generated/go/core"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MatchScope int32

const (
	MatchScope_MATCH_SCOPE_UNSPECIFIED MatchScope = 0
	MatchScope_MATCH_SCOPE_TRACE       MatchScope = 1
	MatchScope_MATCH_SCOPE_GLOBAL      MatchScope = 2
)

// Enum value maps for MatchScope.
var (
	MatchScope_name = map[int32]string{
		0: "MATCH_SCOPE_UNSPECIFIED",
		1: "MATCH_SCOPE_TRACE",
		2: "MATCH_SCOPE_GLOBAL",
	}
	MatchScope_value = map[string]int32{
		"MATCH_SCOPE_UNSPECIFIED": 0,
		"MATCH_SCOPE_TRACE":       1,
		"MATCH_SCOPE_GLOBAL":      2,
	}
)

func (x MatchScope) Enum() *MatchScope {
	p := new(MatchScope)
	*p = x
	return p
}

func (x MatchScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchScope) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_test_run_service_proto_enumTypes[0].Descriptor()
}

func (MatchScope) Type() protoreflect.EnumType {
	return &file_backend_test_run_service_proto_enumTypes[0]
}

func (x MatchScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchScope.Descriptor instead.
func (MatchScope) EnumDescriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{0}
}

type MatchType int32

const (
	MatchType_MATCH_TYPE_UNSPECIFIED                      MatchType = 0
	MatchType_MATCH_TYPE_INPUT_VALUE_HASH                 MatchType = 1
	MatchType_MATCH_TYPE_INPUT_VALUE_HASH_REDUCED_SCHEMA  MatchType = 2
	MatchType_MATCH_TYPE_INPUT_SCHEMA_HASH                MatchType = 3
	MatchType_MATCH_TYPE_INPUT_SCHEMA_HASH_REDUCED_SCHEMA MatchType = 4
	MatchType_MATCH_TYPE_FUZZY                            MatchType = 5
	MatchType_MATCH_TYPE_FALLBACK                         MatchType = 6
)

// Enum value maps for MatchType.
var (
	MatchType_name = map[int32]string{
		0: "MATCH_TYPE_UNSPECIFIED",
		1: "MATCH_TYPE_INPUT_VALUE_HASH",
		2: "MATCH_TYPE_INPUT_VALUE_HASH_REDUCED_SCHEMA",
		3: "MATCH_TYPE_INPUT_SCHEMA_HASH",
		4: "MATCH_TYPE_INPUT_SCHEMA_HASH_REDUCED_SCHEMA",
		5: "MATCH_TYPE_FUZZY",
		6: "MATCH_TYPE_FALLBACK",
	}
	MatchType_value = map[string]int32{
		"MATCH_TYPE_UNSPECIFIED":                      0,
		"MATCH_TYPE_INPUT_VALUE_HASH":                 1,
		"MATCH_TYPE_INPUT_VALUE_HASH_REDUCED_SCHEMA":  2,
		"MATCH_TYPE_INPUT_SCHEMA_HASH":                3,
		"MATCH_TYPE_INPUT_SCHEMA_HASH_REDUCED_SCHEMA": 4,
		"MATCH_TYPE_FUZZY":                            5,
		"MATCH_TYPE_FALLBACK":                         6,
	}
)

func (x MatchType) Enum() *MatchType {
	p := new(MatchType)
	*p = x
	return p
}

func (x MatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_test_run_service_proto_enumTypes[1].Descriptor()
}

func (MatchType) Type() protoreflect.EnumType {
	return &file_backend_test_run_service_proto_enumTypes[1]
}

func (x MatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchType.Descriptor instead.
func (MatchType) EnumDescriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{1}
}

type TraceTestFailureReason int32

const (
	TraceTestFailureReason_TRACE_TEST_FAILURE_REASON_UNSPECIFIED       TraceTestFailureReason = 0
	TraceTestFailureReason_TRACE_TEST_FAILURE_REASON_MOCK_NOT_FOUND    TraceTestFailureReason = 1
	TraceTestFailureReason_TRACE_TEST_FAILURE_REASON_RESPONSE_MISMATCH TraceTestFailureReason = 2
	TraceTestFailureReason_TRACE_TEST_FAILURE_REASON_NO_RESPONSE       TraceTestFailureReason = 3
)

// Enum value maps for TraceTestFailureReason.
var (
	TraceTestFailureReason_name = map[int32]string{
		0: "TRACE_TEST_FAILURE_REASON_UNSPECIFIED",
		1: "TRACE_TEST_FAILURE_REASON_MOCK_NOT_FOUND",
		2: "TRACE_TEST_FAILURE_REASON_RESPONSE_MISMATCH",
		3: "TRACE_TEST_FAILURE_REASON_NO_RESPONSE",
	}
	TraceTestFailureReason_value = map[string]int32{
		"TRACE_TEST_FAILURE_REASON_UNSPECIFIED":       0,
		"TRACE_TEST_FAILURE_REASON_MOCK_NOT_FOUND":    1,
		"TRACE_TEST_FAILURE_REASON_RESPONSE_MISMATCH": 2,
		"TRACE_TEST_FAILURE_REASON_NO_RESPONSE":       3,
	}
)

func (x TraceTestFailureReason) Enum() *TraceTestFailureReason {
	p := new(TraceTestFailureReason)
	*p = x
	return p
}

func (x TraceTestFailureReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TraceTestFailureReason) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_test_run_service_proto_enumTypes[2].Descriptor()
}

func (TraceTestFailureReason) Type() protoreflect.EnumType {
	return &file_backend_test_run_service_proto_enumTypes[2]
}

func (x TraceTestFailureReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TraceTestFailureReason.Descriptor instead.
func (TraceTestFailureReason) EnumDescriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{2}
}

type DriftRunCIStatus int32

const (
	DriftRunCIStatus_DRIFT_RUN_CI_STATUS_UNSPECIFIED DriftRunCIStatus = 0
	DriftRunCIStatus_DRIFT_RUN_CI_STATUS_RUNNING     DriftRunCIStatus = 1
	DriftRunCIStatus_DRIFT_RUN_CI_STATUS_SUCCESS     DriftRunCIStatus = 2
	DriftRunCIStatus_DRIFT_RUN_CI_STATUS_FAILURE     DriftRunCIStatus = 3
)

// Enum value maps for DriftRunCIStatus.
var (
	DriftRunCIStatus_name = map[int32]string{
		0: "DRIFT_RUN_CI_STATUS_UNSPECIFIED",
		1: "DRIFT_RUN_CI_STATUS_RUNNING",
		2: "DRIFT_RUN_CI_STATUS_SUCCESS",
		3: "DRIFT_RUN_CI_STATUS_FAILURE",
	}
	DriftRunCIStatus_value = map[string]int32{
		"DRIFT_RUN_CI_STATUS_UNSPECIFIED": 0,
		"DRIFT_RUN_CI_STATUS_RUNNING":     1,
		"DRIFT_RUN_CI_STATUS_SUCCESS":     2,
		"DRIFT_RUN_CI_STATUS_FAILURE":     3,
	}
)

func (x DriftRunCIStatus) Enum() *DriftRunCIStatus {
	p := new(DriftRunCIStatus)
	*p = x
	return p
}

func (x DriftRunCIStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DriftRunCIStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_test_run_service_proto_enumTypes[3].Descriptor()
}

func (DriftRunCIStatus) Type() protoreflect.EnumType {
	return &file_backend_test_run_service_proto_enumTypes[3]
}

func (x DriftRunCIStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DriftRunCIStatus.Descriptor instead.
func (DriftRunCIStatus) EnumDescriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{3}
}

type GetGlobalSpansRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ObservableServiceId string                 `protobuf:"bytes,1,opt,name=observable_service_id,json=observableServiceId,proto3" json:"observable_service_id,omitempty"`
	// Optional since first page will have no cursor
	PaginationCursor *string `protobuf:"bytes,2,opt,name=pagination_cursor,json=paginationCursor,proto3,oneof" json:"pagination_cursor,omitempty"`
	// Server should provide next cursor based on this page size
	PageSize      int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGlobalSpansRequest) Reset() {
	*x = GetGlobalSpansRequest{}
	mi := &file_backend_test_run_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGlobalSpansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGlobalSpansRequest) ProtoMessage() {}

func (x *GetGlobalSpansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGlobalSpansRequest.ProtoReflect.Descriptor instead.
func (*GetGlobalSpansRequest) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetGlobalSpansRequest) GetObservableServiceId() string {
	if x != nil {
		return x.ObservableServiceId
	}
	return ""
}

func (x *GetGlobalSpansRequest) GetPaginationCursor() string {
	if x != nil && x.PaginationCursor != nil {
		return *x.PaginationCursor
	}
	return ""
}

func (x *GetGlobalSpansRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetGlobalSpansResponseSuccess struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Spans         []*core.Span           `protobuf:"bytes,1,rep,name=spans,proto3" json:"spans,omitempty"`
	NextCursor    *string                `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3,oneof" json:"next_cursor,omitempty"`
	TotalCount    int32                  `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGlobalSpansResponseSuccess) Reset() {
	*x = GetGlobalSpansResponseSuccess{}
	mi := &file_backend_test_run_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGlobalSpansResponseSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGlobalSpansResponseSuccess) ProtoMessage() {}

func (x *GetGlobalSpansResponseSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGlobalSpansResponseSuccess.ProtoReflect.Descriptor instead.
func (*GetGlobalSpansResponseSuccess) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetGlobalSpansResponseSuccess) GetSpans() []*core.Span {
	if x != nil {
		return x.Spans
	}
	return nil
}

func (x *GetGlobalSpansResponseSuccess) GetNextCursor() string {
	if x != nil && x.NextCursor != nil {
		return *x.NextCursor
	}
	return ""
}

func (x *GetGlobalSpansResponseSuccess) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type GetGlobalSpansResponseError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGlobalSpansResponseError) Reset() {
	*x = GetGlobalSpansResponseError{}
	mi := &file_backend_test_run_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGlobalSpansResponseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGlobalSpansResponseError) ProtoMessage() {}

func (x *GetGlobalSpansResponseError) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGlobalSpansResponseError.ProtoReflect.Descriptor instead.
func (*GetGlobalSpansResponseError) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetGlobalSpansResponseError) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetGlobalSpansResponseError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetGlobalSpansResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*GetGlobalSpansResponse_Success
	//	*GetGlobalSpansResponse_Error
	Response      isGetGlobalSpansResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGlobalSpansResponse) Reset() {
	*x = GetGlobalSpansResponse{}
	mi := &file_backend_test_run_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGlobalSpansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGlobalSpansResponse) ProtoMessage() {}

func (x *GetGlobalSpansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGlobalSpansResponse.ProtoReflect.Descriptor instead.
func (*GetGlobalSpansResponse) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetGlobalSpansResponse) GetResponse() isGetGlobalSpansResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *GetGlobalSpansResponse) GetSuccess() *GetGlobalSpansResponseSuccess {
	if x != nil {
		if x, ok := x.Response.(*GetGlobalSpansResponse_Success); ok {
			return x.Success
		}
	}
	return nil
}

func (x *GetGlobalSpansResponse) GetError() *GetGlobalSpansResponseError {
	if x != nil {
		if x, ok := x.Response.(*GetGlobalSpansResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isGetGlobalSpansResponse_Response interface {
	isGetGlobalSpansResponse_Response()
}

type GetGlobalSpansResponse_Success struct {
	Success *GetGlobalSpansResponseSuccess `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type GetGlobalSpansResponse_Error struct {
	Error *GetGlobalSpansResponseError `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*GetGlobalSpansResponse_Success) isGetGlobalSpansResponse_Response() {}

func (*GetGlobalSpansResponse_Error) isGetGlobalSpansResponse_Response() {}

type GetPreAppStartSpansRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ObservableServiceId string                 `protobuf:"bytes,1,opt,name=observable_service_id,json=observableServiceId,proto3" json:"observable_service_id,omitempty"`
	PaginationCursor    *string                `protobuf:"bytes,2,opt,name=pagination_cursor,json=paginationCursor,proto3,oneof" json:"pagination_cursor,omitempty"`
	PageSize            int32                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetPreAppStartSpansRequest) Reset() {
	*x = GetPreAppStartSpansRequest{}
	mi := &file_backend_test_run_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPreAppStartSpansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPreAppStartSpansRequest) ProtoMessage() {}

func (x *GetPreAppStartSpansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPreAppStartSpansRequest.ProtoReflect.Descriptor instead.
func (*GetPreAppStartSpansRequest) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetPreAppStartSpansRequest) GetObservableServiceId() string {
	if x != nil {
		return x.ObservableServiceId
	}
	return ""
}

func (x *GetPreAppStartSpansRequest) GetPaginationCursor() string {
	if x != nil && x.PaginationCursor != nil {
		return *x.PaginationCursor
	}
	return ""
}

func (x *GetPreAppStartSpansRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetPreAppStartSpansResponseSuccess struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Spans         []*core.Span           `protobuf:"bytes,1,rep,name=spans,proto3" json:"spans,omitempty"`
	NextCursor    *string                `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3,oneof" json:"next_cursor,omitempty"`
	TotalCount    int32                  `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPreAppStartSpansResponseSuccess) Reset() {
	*x = GetPreAppStartSpansResponseSuccess{}
	mi := &file_backend_test_run_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPreAppStartSpansResponseSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPreAppStartSpansResponseSuccess) ProtoMessage() {}

func (x *GetPreAppStartSpansResponseSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPreAppStartSpansResponseSuccess.ProtoReflect.Descriptor instead.
func (*GetPreAppStartSpansResponseSuccess) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetPreAppStartSpansResponseSuccess) GetSpans() []*core.Span {
	if x != nil {
		return x.Spans
	}
	return nil
}

func (x *GetPreAppStartSpansResponseSuccess) GetNextCursor() string {
	if x != nil && x.NextCursor != nil {
		return *x.NextCursor
	}
	return ""
}

func (x *GetPreAppStartSpansResponseSuccess) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type GetPreAppStartSpansResponseError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPreAppStartSpansResponseError) Reset() {
	*x = GetPreAppStartSpansResponseError{}
	mi := &file_backend_test_run_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPreAppStartSpansResponseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPreAppStartSpansResponseError) ProtoMessage() {}

func (x *GetPreAppStartSpansResponseError) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPreAppStartSpansResponseError.ProtoReflect.Descriptor instead.
func (*GetPreAppStartSpansResponseError) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetPreAppStartSpansResponseError) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetPreAppStartSpansResponseError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetPreAppStartSpansResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*GetPreAppStartSpansResponse_Success
	//	*GetPreAppStartSpansResponse_Error
	Response      isGetPreAppStartSpansResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPreAppStartSpansResponse) Reset() {
	*x = GetPreAppStartSpansResponse{}
	mi := &file_backend_test_run_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPreAppStartSpansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPreAppStartSpansResponse) ProtoMessage() {}

func (x *GetPreAppStartSpansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPreAppStartSpansResponse.ProtoReflect.Descriptor instead.
func (*GetPreAppStartSpansResponse) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetPreAppStartSpansResponse) GetResponse() isGetPreAppStartSpansResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *GetPreAppStartSpansResponse) GetSuccess() *GetPreAppStartSpansResponseSuccess {
	if x != nil {
		if x, ok := x.Response.(*GetPreAppStartSpansResponse_Success); ok {
			return x.Success
		}
	}
	return nil
}

func (x *GetPreAppStartSpansResponse) GetError() *GetPreAppStartSpansResponseError {
	if x != nil {
		if x, ok := x.Response.(*GetPreAppStartSpansResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isGetPreAppStartSpansResponse_Response interface {
	isGetPreAppStartSpansResponse_Response()
}

type GetPreAppStartSpansResponse_Success struct {
	Success *GetPreAppStartSpansResponseSuccess `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type GetPreAppStartSpansResponse_Error struct {
	Error *GetPreAppStartSpansResponseError `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*GetPreAppStartSpansResponse_Success) isGetPreAppStartSpansResponse_Response() {}

func (*GetPreAppStartSpansResponse_Error) isGetPreAppStartSpansResponse_Response() {}

type CreateDriftRunRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ObservableServiceId string                 `protobuf:"bytes,1,opt,name=observable_service_id,json=observableServiceId,proto3" json:"observable_service_id,omitempty"`
	CliVersion          string                 `protobuf:"bytes,2,opt,name=cli_version,json=cliVersion,proto3" json:"cli_version,omitempty"`
	CommitSha           string                 `protobuf:"bytes,3,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	PrNumber            string                 `protobuf:"bytes,4,opt,name=pr_number,json=prNumber,proto3" json:"pr_number,omitempty"`
	BranchName          string                 `protobuf:"bytes,5,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	ExternalCheckRunId  string                 `protobuf:"bytes,6,opt,name=external_check_run_id,json=externalCheckRunId,proto3" json:"external_check_run_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CreateDriftRunRequest) Reset() {
	*x = CreateDriftRunRequest{}
	mi := &file_backend_test_run_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDriftRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDriftRunRequest) ProtoMessage() {}

func (x *CreateDriftRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDriftRunRequest.ProtoReflect.Descriptor instead.
func (*CreateDriftRunRequest) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{8}
}

func (x *CreateDriftRunRequest) GetObservableServiceId() string {
	if x != nil {
		return x.ObservableServiceId
	}
	return ""
}

func (x *CreateDriftRunRequest) GetCliVersion() string {
	if x != nil {
		return x.CliVersion
	}
	return ""
}

func (x *CreateDriftRunRequest) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *CreateDriftRunRequest) GetPrNumber() string {
	if x != nil {
		return x.PrNumber
	}
	return ""
}

func (x *CreateDriftRunRequest) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *CreateDriftRunRequest) GetExternalCheckRunId() string {
	if x != nil {
		return x.ExternalCheckRunId
	}
	return ""
}

type CreateDriftRunResponseSuccess struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DriftRunId    string                 `protobuf:"bytes,1,opt,name=drift_run_id,json=driftRunId,proto3" json:"drift_run_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDriftRunResponseSuccess) Reset() {
	*x = CreateDriftRunResponseSuccess{}
	mi := &file_backend_test_run_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDriftRunResponseSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDriftRunResponseSuccess) ProtoMessage() {}

func (x *CreateDriftRunResponseSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDriftRunResponseSuccess.ProtoReflect.Descriptor instead.
func (*CreateDriftRunResponseSuccess) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{9}
}

func (x *CreateDriftRunResponseSuccess) GetDriftRunId() string {
	if x != nil {
		return x.DriftRunId
	}
	return ""
}

type CreateDriftRunResponseError struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Machine-readable error code, could be an enum
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// Human-readable error message
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDriftRunResponseError) Reset() {
	*x = CreateDriftRunResponseError{}
	mi := &file_backend_test_run_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDriftRunResponseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDriftRunResponseError) ProtoMessage() {}

func (x *CreateDriftRunResponseError) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDriftRunResponseError.ProtoReflect.Descriptor instead.
func (*CreateDriftRunResponseError) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{10}
}

func (x *CreateDriftRunResponseError) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CreateDriftRunResponseError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateDriftRunResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*CreateDriftRunResponse_Success
	//	*CreateDriftRunResponse_Error
	Response      isCreateDriftRunResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDriftRunResponse) Reset() {
	*x = CreateDriftRunResponse{}
	mi := &file_backend_test_run_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDriftRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDriftRunResponse) ProtoMessage() {}

func (x *CreateDriftRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDriftRunResponse.ProtoReflect.Descriptor instead.
func (*CreateDriftRunResponse) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{11}
}

func (x *CreateDriftRunResponse) GetResponse() isCreateDriftRunResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CreateDriftRunResponse) GetSuccess() *CreateDriftRunResponseSuccess {
	if x != nil {
		if x, ok := x.Response.(*CreateDriftRunResponse_Success); ok {
			return x.Success
		}
	}
	return nil
}

func (x *CreateDriftRunResponse) GetError() *CreateDriftRunResponseError {
	if x != nil {
		if x, ok := x.Response.(*CreateDriftRunResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isCreateDriftRunResponse_Response interface {
	isCreateDriftRunResponse_Response()
}

type CreateDriftRunResponse_Success struct {
	Success *CreateDriftRunResponseSuccess `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type CreateDriftRunResponse_Error struct {
	Error *CreateDriftRunResponseError `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*CreateDriftRunResponse_Success) isCreateDriftRunResponse_Response() {}

func (*CreateDriftRunResponse_Error) isCreateDriftRunResponse_Response() {}

type GetDriftRunTraceTestsRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	DriftRunId       string                 `protobuf:"bytes,1,opt,name=drift_run_id,json=driftRunId,proto3" json:"drift_run_id,omitempty"`
	PaginationCursor *string                `protobuf:"bytes,2,opt,name=pagination_cursor,json=paginationCursor,proto3,oneof" json:"pagination_cursor,omitempty"`
	// Server should provide next cursor based on this page size
	PageSize      int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDriftRunTraceTestsRequest) Reset() {
	*x = GetDriftRunTraceTestsRequest{}
	mi := &file_backend_test_run_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDriftRunTraceTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDriftRunTraceTestsRequest) ProtoMessage() {}

func (x *GetDriftRunTraceTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDriftRunTraceTestsRequest.ProtoReflect.Descriptor instead.
func (*GetDriftRunTraceTestsRequest) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetDriftRunTraceTestsRequest) GetDriftRunId() string {
	if x != nil {
		return x.DriftRunId
	}
	return ""
}

func (x *GetDriftRunTraceTestsRequest) GetPaginationCursor() string {
	if x != nil && x.PaginationCursor != nil {
		return *x.PaginationCursor
	}
	return ""
}

func (x *GetDriftRunTraceTestsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type TraceTest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Id                    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // DB id
	TraceId               string                 `protobuf:"bytes,2,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	ServerSpanRecordingId string                 `protobuf:"bytes,3,opt,name=server_span_recording_id,json=serverSpanRecordingId,proto3" json:"server_span_recording_id,omitempty"`
	Spans                 []*core.Span           `protobuf:"bytes,4,rep,name=spans,proto3" json:"spans,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TraceTest) Reset() {
	*x = TraceTest{}
	mi := &file_backend_test_run_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceTest) ProtoMessage() {}

func (x *TraceTest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceTest.ProtoReflect.Descriptor instead.
func (*TraceTest) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{13}
}

func (x *TraceTest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TraceTest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *TraceTest) GetServerSpanRecordingId() string {
	if x != nil {
		return x.ServerSpanRecordingId
	}
	return ""
}

func (x *TraceTest) GetSpans() []*core.Span {
	if x != nil {
		return x.Spans
	}
	return nil
}

type GetDriftRunTraceTestsResponseSuccess struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TraceTests    []*TraceTest           `protobuf:"bytes,1,rep,name=trace_tests,json=traceTests,proto3" json:"trace_tests,omitempty"`
	NextCursor    *string                `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3,oneof" json:"next_cursor,omitempty"`
	TotalCount    int32                  `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDriftRunTraceTestsResponseSuccess) Reset() {
	*x = GetDriftRunTraceTestsResponseSuccess{}
	mi := &file_backend_test_run_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDriftRunTraceTestsResponseSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDriftRunTraceTestsResponseSuccess) ProtoMessage() {}

func (x *GetDriftRunTraceTestsResponseSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDriftRunTraceTestsResponseSuccess.ProtoReflect.Descriptor instead.
func (*GetDriftRunTraceTestsResponseSuccess) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetDriftRunTraceTestsResponseSuccess) GetTraceTests() []*TraceTest {
	if x != nil {
		return x.TraceTests
	}
	return nil
}

func (x *GetDriftRunTraceTestsResponseSuccess) GetNextCursor() string {
	if x != nil && x.NextCursor != nil {
		return *x.NextCursor
	}
	return ""
}

func (x *GetDriftRunTraceTestsResponseSuccess) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type GetDriftRunTraceTestsResponseError struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Machine-readable error code, could be an enum
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// Human-readable error message
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDriftRunTraceTestsResponseError) Reset() {
	*x = GetDriftRunTraceTestsResponseError{}
	mi := &file_backend_test_run_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDriftRunTraceTestsResponseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDriftRunTraceTestsResponseError) ProtoMessage() {}

func (x *GetDriftRunTraceTestsResponseError) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDriftRunTraceTestsResponseError.ProtoReflect.Descriptor instead.
func (*GetDriftRunTraceTestsResponseError) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetDriftRunTraceTestsResponseError) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetDriftRunTraceTestsResponseError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetDriftRunTraceTestsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*GetDriftRunTraceTestsResponse_Success
	//	*GetDriftRunTraceTestsResponse_Error
	Response      isGetDriftRunTraceTestsResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDriftRunTraceTestsResponse) Reset() {
	*x = GetDriftRunTraceTestsResponse{}
	mi := &file_backend_test_run_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDriftRunTraceTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDriftRunTraceTestsResponse) ProtoMessage() {}

func (x *GetDriftRunTraceTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDriftRunTraceTestsResponse.ProtoReflect.Descriptor instead.
func (*GetDriftRunTraceTestsResponse) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{16}
}

func (x *GetDriftRunTraceTestsResponse) GetResponse() isGetDriftRunTraceTestsResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *GetDriftRunTraceTestsResponse) GetSuccess() *GetDriftRunTraceTestsResponseSuccess {
	if x != nil {
		if x, ok := x.Response.(*GetDriftRunTraceTestsResponse_Success); ok {
			return x.Success
		}
	}
	return nil
}

func (x *GetDriftRunTraceTestsResponse) GetError() *GetDriftRunTraceTestsResponseError {
	if x != nil {
		if x, ok := x.Response.(*GetDriftRunTraceTestsResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isGetDriftRunTraceTestsResponse_Response interface {
	isGetDriftRunTraceTestsResponse_Response()
}

type GetDriftRunTraceTestsResponse_Success struct {
	Success *GetDriftRunTraceTestsResponseSuccess `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type GetDriftRunTraceTestsResponse_Error struct {
	Error *GetDriftRunTraceTestsResponseError `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*GetDriftRunTraceTestsResponse_Success) isGetDriftRunTraceTestsResponse_Response() {}

func (*GetDriftRunTraceTestsResponse_Error) isGetDriftRunTraceTestsResponse_Response() {}

type GetTraceTestRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ObservableServiceId string                 `protobuf:"bytes,1,opt,name=observable_service_id,json=observableServiceId,proto3" json:"observable_service_id,omitempty"`
	TraceTestId         string                 `protobuf:"bytes,2,opt,name=trace_test_id,json=traceTestId,proto3" json:"trace_test_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetTraceTestRequest) Reset() {
	*x = GetTraceTestRequest{}
	mi := &file_backend_test_run_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTraceTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceTestRequest) ProtoMessage() {}

func (x *GetTraceTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceTestRequest.ProtoReflect.Descriptor instead.
func (*GetTraceTestRequest) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{17}
}

func (x *GetTraceTestRequest) GetObservableServiceId() string {
	if x != nil {
		return x.ObservableServiceId
	}
	return ""
}

func (x *GetTraceTestRequest) GetTraceTestId() string {
	if x != nil {
		return x.TraceTestId
	}
	return ""
}

type GetTraceTestResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*GetTraceTestResponse_Success
	//	*GetTraceTestResponse_Error
	Response      isGetTraceTestResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTraceTestResponse) Reset() {
	*x = GetTraceTestResponse{}
	mi := &file_backend_test_run_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTraceTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceTestResponse) ProtoMessage() {}

func (x *GetTraceTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceTestResponse.ProtoReflect.Descriptor instead.
func (*GetTraceTestResponse) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{18}
}

func (x *GetTraceTestResponse) GetResponse() isGetTraceTestResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *GetTraceTestResponse) GetSuccess() *GetTraceTestResponseSuccess {
	if x != nil {
		if x, ok := x.Response.(*GetTraceTestResponse_Success); ok {
			return x.Success
		}
	}
	return nil
}

func (x *GetTraceTestResponse) GetError() *GetTraceTestResponseError {
	if x != nil {
		if x, ok := x.Response.(*GetTraceTestResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isGetTraceTestResponse_Response interface {
	isGetTraceTestResponse_Response()
}

type GetTraceTestResponse_Success struct {
	Success *GetTraceTestResponseSuccess `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type GetTraceTestResponse_Error struct {
	Error *GetTraceTestResponseError `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*GetTraceTestResponse_Success) isGetTraceTestResponse_Response() {}

func (*GetTraceTestResponse_Error) isGetTraceTestResponse_Response() {}

type GetTraceTestResponseSuccess struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TraceTest     *TraceTest             `protobuf:"bytes,1,opt,name=trace_test,json=traceTest,proto3" json:"trace_test,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTraceTestResponseSuccess) Reset() {
	*x = GetTraceTestResponseSuccess{}
	mi := &file_backend_test_run_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTraceTestResponseSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceTestResponseSuccess) ProtoMessage() {}

func (x *GetTraceTestResponseSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceTestResponseSuccess.ProtoReflect.Descriptor instead.
func (*GetTraceTestResponseSuccess) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{19}
}

func (x *GetTraceTestResponseSuccess) GetTraceTest() *TraceTest {
	if x != nil {
		return x.TraceTest
	}
	return nil
}

type GetTraceTestResponseError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTraceTestResponseError) Reset() {
	*x = GetTraceTestResponseError{}
	mi := &file_backend_test_run_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTraceTestResponseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceTestResponseError) ProtoMessage() {}

func (x *GetTraceTestResponseError) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceTestResponseError.ProtoReflect.Descriptor instead.
func (*GetTraceTestResponseError) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{20}
}

func (x *GetTraceTestResponseError) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetTraceTestResponseError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetAllTraceTestsRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ObservableServiceId string                 `protobuf:"bytes,1,opt,name=observable_service_id,json=observableServiceId,proto3" json:"observable_service_id,omitempty"`
	PaginationCursor    *string                `protobuf:"bytes,2,opt,name=pagination_cursor,json=paginationCursor,proto3,oneof" json:"pagination_cursor,omitempty"`
	// Server should provide next cursor based on this page size
	PageSize      int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllTraceTestsRequest) Reset() {
	*x = GetAllTraceTestsRequest{}
	mi := &file_backend_test_run_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllTraceTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTraceTestsRequest) ProtoMessage() {}

func (x *GetAllTraceTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTraceTestsRequest.ProtoReflect.Descriptor instead.
func (*GetAllTraceTestsRequest) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{21}
}

func (x *GetAllTraceTestsRequest) GetObservableServiceId() string {
	if x != nil {
		return x.ObservableServiceId
	}
	return ""
}

func (x *GetAllTraceTestsRequest) GetPaginationCursor() string {
	if x != nil && x.PaginationCursor != nil {
		return *x.PaginationCursor
	}
	return ""
}

func (x *GetAllTraceTestsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetAllTraceTestsResponseSuccess struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TraceTests    []*TraceTest           `protobuf:"bytes,1,rep,name=trace_tests,json=traceTests,proto3" json:"trace_tests,omitempty"`
	NextCursor    *string                `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3,oneof" json:"next_cursor,omitempty"`
	TotalCount    int32                  `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllTraceTestsResponseSuccess) Reset() {
	*x = GetAllTraceTestsResponseSuccess{}
	mi := &file_backend_test_run_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllTraceTestsResponseSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTraceTestsResponseSuccess) ProtoMessage() {}

func (x *GetAllTraceTestsResponseSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTraceTestsResponseSuccess.ProtoReflect.Descriptor instead.
func (*GetAllTraceTestsResponseSuccess) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{22}
}

func (x *GetAllTraceTestsResponseSuccess) GetTraceTests() []*TraceTest {
	if x != nil {
		return x.TraceTests
	}
	return nil
}

func (x *GetAllTraceTestsResponseSuccess) GetNextCursor() string {
	if x != nil && x.NextCursor != nil {
		return *x.NextCursor
	}
	return ""
}

func (x *GetAllTraceTestsResponseSuccess) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type GetAllTraceTestsResponseError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllTraceTestsResponseError) Reset() {
	*x = GetAllTraceTestsResponseError{}
	mi := &file_backend_test_run_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllTraceTestsResponseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTraceTestsResponseError) ProtoMessage() {}

func (x *GetAllTraceTestsResponseError) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTraceTestsResponseError.ProtoReflect.Descriptor instead.
func (*GetAllTraceTestsResponseError) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{23}
}

func (x *GetAllTraceTestsResponseError) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetAllTraceTestsResponseError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetAllTraceTestsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*GetAllTraceTestsResponse_Success
	//	*GetAllTraceTestsResponse_Error
	Response      isGetAllTraceTestsResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllTraceTestsResponse) Reset() {
	*x = GetAllTraceTestsResponse{}
	mi := &file_backend_test_run_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllTraceTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTraceTestsResponse) ProtoMessage() {}

func (x *GetAllTraceTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTraceTestsResponse.ProtoReflect.Descriptor instead.
func (*GetAllTraceTestsResponse) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{24}
}

func (x *GetAllTraceTestsResponse) GetResponse() isGetAllTraceTestsResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *GetAllTraceTestsResponse) GetSuccess() *GetAllTraceTestsResponseSuccess {
	if x != nil {
		if x, ok := x.Response.(*GetAllTraceTestsResponse_Success); ok {
			return x.Success
		}
	}
	return nil
}

func (x *GetAllTraceTestsResponse) GetError() *GetAllTraceTestsResponseError {
	if x != nil {
		if x, ok := x.Response.(*GetAllTraceTestsResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isGetAllTraceTestsResponse_Response interface {
	isGetAllTraceTestsResponse_Response()
}

type GetAllTraceTestsResponse_Success struct {
	Success *GetAllTraceTestsResponseSuccess `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type GetAllTraceTestsResponse_Error struct {
	Error *GetAllTraceTestsResponseError `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*GetAllTraceTestsResponse_Success) isGetAllTraceTestsResponse_Response() {}

func (*GetAllTraceTestsResponse_Error) isGetAllTraceTestsResponse_Response() {}

type Deviation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`             // what field in replay span had a deviation
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"` // description of the deviation, primarily useful for comparing SUT
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Deviation) Reset() {
	*x = Deviation{}
	mi := &file_backend_test_run_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Deviation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deviation) ProtoMessage() {}

func (x *Deviation) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deviation.ProtoReflect.Descriptor instead.
func (*Deviation) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{25}
}

func (x *Deviation) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Deviation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type MatchLevel struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	MatchType        MatchType              `protobuf:"varint,1,opt,name=match_type,json=matchType,proto3,enum=tusk.drift.backend.v1.MatchType" json:"match_type,omitempty"`     // How the match was found
	MatchScope       MatchScope             `protobuf:"varint,2,opt,name=match_scope,json=matchScope,proto3,enum=tusk.drift.backend.v1.MatchScope" json:"match_scope,omitempty"` // Scope of where the match was found
	MatchDescription string                 `protobuf:"bytes,3,opt,name=match_description,json=matchDescription,proto3" json:"match_description,omitempty"`                      // Natural language description for match
	// Similarity scoring fields (populated when multiple matches exist)
	SimilarityScore *float32               `protobuf:"fixed32,4,opt,name=similarity_score,json=similarityScore,proto3,oneof" json:"similarity_score,omitempty"` // The similarity score of the selected match (0.0-1.0)
	TopCandidates   []*SimilarityCandidate `protobuf:"bytes,5,rep,name=top_candidates,json=topCandidates,proto3" json:"top_candidates,omitempty"`               // Top 5 alternative matches with scores
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MatchLevel) Reset() {
	*x = MatchLevel{}
	mi := &file_backend_test_run_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchLevel) ProtoMessage() {}

func (x *MatchLevel) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchLevel.ProtoReflect.Descriptor instead.
func (*MatchLevel) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{26}
}

func (x *MatchLevel) GetMatchType() MatchType {
	if x != nil {
		return x.MatchType
	}
	return MatchType_MATCH_TYPE_UNSPECIFIED
}

func (x *MatchLevel) GetMatchScope() MatchScope {
	if x != nil {
		return x.MatchScope
	}
	return MatchScope_MATCH_SCOPE_UNSPECIFIED
}

func (x *MatchLevel) GetMatchDescription() string {
	if x != nil {
		return x.MatchDescription
	}
	return ""
}

func (x *MatchLevel) GetSimilarityScore() float32 {
	if x != nil && x.SimilarityScore != nil {
		return *x.SimilarityScore
	}
	return 0
}

func (x *MatchLevel) GetTopCandidates() []*SimilarityCandidate {
	if x != nil {
		return x.TopCandidates
	}
	return nil
}

type SimilarityCandidate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpanId        string                 `protobuf:"bytes,1,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	Score         float32                `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SimilarityCandidate) Reset() {
	*x = SimilarityCandidate{}
	mi := &file_backend_test_run_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimilarityCandidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimilarityCandidate) ProtoMessage() {}

func (x *SimilarityCandidate) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimilarityCandidate.ProtoReflect.Descriptor instead.
func (*SimilarityCandidate) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{27}
}

func (x *SimilarityCandidate) GetSpanId() string {
	if x != nil {
		return x.SpanId
	}
	return ""
}

func (x *SimilarityCandidate) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type TraceTestSpanResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Create a separate table in backend for span_result_recording, but very
	// similar schema to
	ReplaySpan *core.Span `protobuf:"bytes,1,opt,name=replay_span,json=replaySpan,proto3" json:"replay_span,omitempty"`
	// All nullable since we want to allow for no matching span_recordings
	// This should be the DB id of the matched span_recording
	MatchedSpanRecordingId *string      `protobuf:"bytes,2,opt,name=matched_span_recording_id,json=matchedSpanRecordingId,proto3,oneof" json:"matched_span_recording_id,omitempty"`
	MatchLevel             *MatchLevel  `protobuf:"bytes,3,opt,name=match_level,json=matchLevel,proto3,oneof" json:"match_level,omitempty"`
	StackTrace             *string      `protobuf:"bytes,4,opt,name=stack_trace,json=stackTrace,proto3,oneof" json:"stack_trace,omitempty"`
	Deviations             []*Deviation `protobuf:"bytes,5,rep,name=deviations,proto3" json:"deviations,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TraceTestSpanResult) Reset() {
	*x = TraceTestSpanResult{}
	mi := &file_backend_test_run_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceTestSpanResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceTestSpanResult) ProtoMessage() {}

func (x *TraceTestSpanResult) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceTestSpanResult.ProtoReflect.Descriptor instead.
func (*TraceTestSpanResult) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{28}
}

func (x *TraceTestSpanResult) GetReplaySpan() *core.Span {
	if x != nil {
		return x.ReplaySpan
	}
	return nil
}

func (x *TraceTestSpanResult) GetMatchedSpanRecordingId() string {
	if x != nil && x.MatchedSpanRecordingId != nil {
		return *x.MatchedSpanRecordingId
	}
	return ""
}

func (x *TraceTestSpanResult) GetMatchLevel() *MatchLevel {
	if x != nil {
		return x.MatchLevel
	}
	return nil
}

func (x *TraceTestSpanResult) GetStackTrace() string {
	if x != nil && x.StackTrace != nil {
		return *x.StackTrace
	}
	return ""
}

func (x *TraceTestSpanResult) GetDeviations() []*Deviation {
	if x != nil {
		return x.Deviations
	}
	return nil
}

type TraceTestResult struct {
	state              protoimpl.MessageState  `protogen:"open.v1"`
	TraceTestId        string                  `protobuf:"bytes,1,opt,name=trace_test_id,json=traceTestId,proto3" json:"trace_test_id,omitempty"` // DB id
	TestSuccess        bool                    `protobuf:"varint,2,opt,name=test_success,json=testSuccess,proto3" json:"test_success,omitempty"`
	TestFailureReason  *TraceTestFailureReason `protobuf:"varint,3,opt,name=test_failure_reason,json=testFailureReason,proto3,enum=tusk.drift.backend.v1.TraceTestFailureReason,oneof" json:"test_failure_reason,omitempty"`
	TestFailureMessage *string                 `protobuf:"bytes,4,opt,name=test_failure_message,json=testFailureMessage,proto3,oneof" json:"test_failure_message,omitempty"`
	ReplayTraceId      *string                 `protobuf:"bytes,5,opt,name=replay_trace_id,json=replayTraceId,proto3,oneof" json:"replay_trace_id,omitempty"`
	ReplayServerSpanId *string                 `protobuf:"bytes,6,opt,name=replay_server_span_id,json=replayServerSpanId,proto3,oneof" json:"replay_server_span_id,omitempty"`
	SpanResults        []*TraceTestSpanResult  `protobuf:"bytes,7,rep,name=span_results,json=spanResults,proto3" json:"span_results,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TraceTestResult) Reset() {
	*x = TraceTestResult{}
	mi := &file_backend_test_run_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceTestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceTestResult) ProtoMessage() {}

func (x *TraceTestResult) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceTestResult.ProtoReflect.Descriptor instead.
func (*TraceTestResult) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{29}
}

func (x *TraceTestResult) GetTraceTestId() string {
	if x != nil {
		return x.TraceTestId
	}
	return ""
}

func (x *TraceTestResult) GetTestSuccess() bool {
	if x != nil {
		return x.TestSuccess
	}
	return false
}

func (x *TraceTestResult) GetTestFailureReason() TraceTestFailureReason {
	if x != nil && x.TestFailureReason != nil {
		return *x.TestFailureReason
	}
	return TraceTestFailureReason_TRACE_TEST_FAILURE_REASON_UNSPECIFIED
}

func (x *TraceTestResult) GetTestFailureMessage() string {
	if x != nil && x.TestFailureMessage != nil {
		return *x.TestFailureMessage
	}
	return ""
}

func (x *TraceTestResult) GetReplayTraceId() string {
	if x != nil && x.ReplayTraceId != nil {
		return *x.ReplayTraceId
	}
	return ""
}

func (x *TraceTestResult) GetReplayServerSpanId() string {
	if x != nil && x.ReplayServerSpanId != nil {
		return *x.ReplayServerSpanId
	}
	return ""
}

func (x *TraceTestResult) GetSpanResults() []*TraceTestSpanResult {
	if x != nil {
		return x.SpanResults
	}
	return nil
}

type UploadTraceTestResultsRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	DriftRunId       string                 `protobuf:"bytes,1,opt,name=drift_run_id,json=driftRunId,proto3" json:"drift_run_id,omitempty"`
	CliVersion       string                 `protobuf:"bytes,2,opt,name=cli_version,json=cliVersion,proto3" json:"cli_version,omitempty"`
	SdkVersion       string                 `protobuf:"bytes,3,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version,omitempty"`
	TraceTestResults []*TraceTestResult     `protobuf:"bytes,4,rep,name=trace_test_results,json=traceTestResults,proto3" json:"trace_test_results,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UploadTraceTestResultsRequest) Reset() {
	*x = UploadTraceTestResultsRequest{}
	mi := &file_backend_test_run_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadTraceTestResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadTraceTestResultsRequest) ProtoMessage() {}

func (x *UploadTraceTestResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadTraceTestResultsRequest.ProtoReflect.Descriptor instead.
func (*UploadTraceTestResultsRequest) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{30}
}

func (x *UploadTraceTestResultsRequest) GetDriftRunId() string {
	if x != nil {
		return x.DriftRunId
	}
	return ""
}

func (x *UploadTraceTestResultsRequest) GetCliVersion() string {
	if x != nil {
		return x.CliVersion
	}
	return ""
}

func (x *UploadTraceTestResultsRequest) GetSdkVersion() string {
	if x != nil {
		return x.SdkVersion
	}
	return ""
}

func (x *UploadTraceTestResultsRequest) GetTraceTestResults() []*TraceTestResult {
	if x != nil {
		return x.TraceTestResults
	}
	return nil
}

type UploadTraceTestResultsResponseSuccess struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadTraceTestResultsResponseSuccess) Reset() {
	*x = UploadTraceTestResultsResponseSuccess{}
	mi := &file_backend_test_run_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadTraceTestResultsResponseSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadTraceTestResultsResponseSuccess) ProtoMessage() {}

func (x *UploadTraceTestResultsResponseSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadTraceTestResultsResponseSuccess.ProtoReflect.Descriptor instead.
func (*UploadTraceTestResultsResponseSuccess) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{31}
}

func (x *UploadTraceTestResultsResponseSuccess) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UploadTraceTestResultsResponseError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadTraceTestResultsResponseError) Reset() {
	*x = UploadTraceTestResultsResponseError{}
	mi := &file_backend_test_run_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadTraceTestResultsResponseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadTraceTestResultsResponseError) ProtoMessage() {}

func (x *UploadTraceTestResultsResponseError) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadTraceTestResultsResponseError.ProtoReflect.Descriptor instead.
func (*UploadTraceTestResultsResponseError) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{32}
}

func (x *UploadTraceTestResultsResponseError) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UploadTraceTestResultsResponseError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UploadTraceTestResultsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*UploadTraceTestResultsResponse_Success
	//	*UploadTraceTestResultsResponse_Error
	Response      isUploadTraceTestResultsResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadTraceTestResultsResponse) Reset() {
	*x = UploadTraceTestResultsResponse{}
	mi := &file_backend_test_run_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadTraceTestResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadTraceTestResultsResponse) ProtoMessage() {}

func (x *UploadTraceTestResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadTraceTestResultsResponse.ProtoReflect.Descriptor instead.
func (*UploadTraceTestResultsResponse) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{33}
}

func (x *UploadTraceTestResultsResponse) GetResponse() isUploadTraceTestResultsResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *UploadTraceTestResultsResponse) GetSuccess() *UploadTraceTestResultsResponseSuccess {
	if x != nil {
		if x, ok := x.Response.(*UploadTraceTestResultsResponse_Success); ok {
			return x.Success
		}
	}
	return nil
}

func (x *UploadTraceTestResultsResponse) GetError() *UploadTraceTestResultsResponseError {
	if x != nil {
		if x, ok := x.Response.(*UploadTraceTestResultsResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isUploadTraceTestResultsResponse_Response interface {
	isUploadTraceTestResultsResponse_Response()
}

type UploadTraceTestResultsResponse_Success struct {
	Success *UploadTraceTestResultsResponseSuccess `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type UploadTraceTestResultsResponse_Error struct {
	Error *UploadTraceTestResultsResponseError `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*UploadTraceTestResultsResponse_Success) isUploadTraceTestResultsResponse_Response() {}

func (*UploadTraceTestResultsResponse_Error) isUploadTraceTestResultsResponse_Response() {}

type UpdateDriftRunCIStatusRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	DriftRunId      string                 `protobuf:"bytes,1,opt,name=drift_run_id,json=driftRunId,proto3" json:"drift_run_id,omitempty"`
	CiStatus        DriftRunCIStatus       `protobuf:"varint,2,opt,name=ci_status,json=ciStatus,proto3,enum=tusk.drift.backend.v1.DriftRunCIStatus" json:"ci_status,omitempty"`
	CiStatusMessage *string                `protobuf:"bytes,3,opt,name=ci_status_message,json=ciStatusMessage,proto3,oneof" json:"ci_status_message,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateDriftRunCIStatusRequest) Reset() {
	*x = UpdateDriftRunCIStatusRequest{}
	mi := &file_backend_test_run_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDriftRunCIStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDriftRunCIStatusRequest) ProtoMessage() {}

func (x *UpdateDriftRunCIStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDriftRunCIStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateDriftRunCIStatusRequest) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateDriftRunCIStatusRequest) GetDriftRunId() string {
	if x != nil {
		return x.DriftRunId
	}
	return ""
}

func (x *UpdateDriftRunCIStatusRequest) GetCiStatus() DriftRunCIStatus {
	if x != nil {
		return x.CiStatus
	}
	return DriftRunCIStatus_DRIFT_RUN_CI_STATUS_UNSPECIFIED
}

func (x *UpdateDriftRunCIStatusRequest) GetCiStatusMessage() string {
	if x != nil && x.CiStatusMessage != nil {
		return *x.CiStatusMessage
	}
	return ""
}

type UpdateDriftRunCIStatusResponseSuccess struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDriftRunCIStatusResponseSuccess) Reset() {
	*x = UpdateDriftRunCIStatusResponseSuccess{}
	mi := &file_backend_test_run_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDriftRunCIStatusResponseSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDriftRunCIStatusResponseSuccess) ProtoMessage() {}

func (x *UpdateDriftRunCIStatusResponseSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDriftRunCIStatusResponseSuccess.ProtoReflect.Descriptor instead.
func (*UpdateDriftRunCIStatusResponseSuccess) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{35}
}

func (x *UpdateDriftRunCIStatusResponseSuccess) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateDriftRunCIStatusResponseError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDriftRunCIStatusResponseError) Reset() {
	*x = UpdateDriftRunCIStatusResponseError{}
	mi := &file_backend_test_run_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDriftRunCIStatusResponseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDriftRunCIStatusResponseError) ProtoMessage() {}

func (x *UpdateDriftRunCIStatusResponseError) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDriftRunCIStatusResponseError.ProtoReflect.Descriptor instead.
func (*UpdateDriftRunCIStatusResponseError) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateDriftRunCIStatusResponseError) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UpdateDriftRunCIStatusResponseError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateDriftRunCIStatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*UpdateDriftRunCIStatusResponse_Success
	//	*UpdateDriftRunCIStatusResponse_Error
	Response      isUpdateDriftRunCIStatusResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDriftRunCIStatusResponse) Reset() {
	*x = UpdateDriftRunCIStatusResponse{}
	mi := &file_backend_test_run_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDriftRunCIStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDriftRunCIStatusResponse) ProtoMessage() {}

func (x *UpdateDriftRunCIStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_test_run_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDriftRunCIStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateDriftRunCIStatusResponse) Descriptor() ([]byte, []int) {
	return file_backend_test_run_service_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateDriftRunCIStatusResponse) GetResponse() isUpdateDriftRunCIStatusResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *UpdateDriftRunCIStatusResponse) GetSuccess() *UpdateDriftRunCIStatusResponseSuccess {
	if x != nil {
		if x, ok := x.Response.(*UpdateDriftRunCIStatusResponse_Success); ok {
			return x.Success
		}
	}
	return nil
}

func (x *UpdateDriftRunCIStatusResponse) GetError() *UpdateDriftRunCIStatusResponseError {
	if x != nil {
		if x, ok := x.Response.(*UpdateDriftRunCIStatusResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isUpdateDriftRunCIStatusResponse_Response interface {
	isUpdateDriftRunCIStatusResponse_Response()
}

type UpdateDriftRunCIStatusResponse_Success struct {
	Success *UpdateDriftRunCIStatusResponseSuccess `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type UpdateDriftRunCIStatusResponse_Error struct {
	Error *UpdateDriftRunCIStatusResponseError `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*UpdateDriftRunCIStatusResponse_Success) isUpdateDriftRunCIStatusResponse_Response() {}

func (*UpdateDriftRunCIStatusResponse_Error) isUpdateDriftRunCIStatusResponse_Response() {}

var File_backend_test_run_service_proto protoreflect.FileDescriptor

const file_backend_test_run_service_proto_rawDesc = "" +
	"\n" +
	"\x1ebackend/test_run_service.proto\x12\x15tusk.drift.backend.v1\x1a\x0fcore/span.proto\"\xb0\x01\n" +
	"\x15GetGlobalSpansRequest\x122\n" +
	"\x15observable_service_id\x18\x01 \x01(\tR\x13observableServiceId\x120\n" +
	"\x11pagination_cursor\x18\x02 \x01(\tH\x00R\x10paginationCursor\x88\x01\x01\x12\x1b\n" +
	"\tpage_size\x18\x03 \x01(\x05R\bpageSizeB\x14\n" +
	"\x12_pagination_cursor\"\xa6\x01\n" +
	"\x1dGetGlobalSpansResponseSuccess\x12.\n" +
	"\x05spans\x18\x01 \x03(\v2\x18.tusk.drift.core.v1.SpanR\x05spans\x12$\n" +
	"\vnext_cursor\x18\x02 \x01(\tH\x00R\n" +
	"nextCursor\x88\x01\x01\x12\x1f\n" +
	"\vtotal_count\x18\x03 \x01(\x05R\n" +
	"totalCountB\x0e\n" +
	"\f_next_cursor\"K\n" +
	"\x1bGetGlobalSpansResponseError\x12\x12\n" +
	"\x04code\x18\x01 \x01(\tR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xc2\x01\n" +
	"\x16GetGlobalSpansResponse\x12P\n" +
	"\asuccess\x18\x01 \x01(\v24.tusk.drift.backend.v1.GetGlobalSpansResponseSuccessH\x00R\asuccess\x12J\n" +
	"\x05error\x18\x02 \x01(\v22.tusk.drift.backend.v1.GetGlobalSpansResponseErrorH\x00R\x05errorB\n" +
	"\n" +
	"\bresponse\"\xb5\x01\n" +
	"\x1aGetPreAppStartSpansRequest\x122\n" +
	"\x15observable_service_id\x18\x01 \x01(\tR\x13observableServiceId\x120\n" +
	"\x11pagination_cursor\x18\x02 \x01(\tH\x00R\x10paginationCursor\x88\x01\x01\x12\x1b\n" +
	"\tpage_size\x18\x03 \x01(\x05R\bpageSizeB\x14\n" +
	"\x12_pagination_cursor\"\xab\x01\n" +
	"\"GetPreAppStartSpansResponseSuccess\x12.\n" +
	"\x05spans\x18\x01 \x03(\v2\x18.tusk.drift.core.v1.SpanR\x05spans\x12$\n" +
	"\vnext_cursor\x18\x02 \x01(\tH\x00R\n" +
	"nextCursor\x88\x01\x01\x12\x1f\n" +
	"\vtotal_count\x18\x03 \x01(\x05R\n" +
	"totalCountB\x0e\n" +
	"\f_next_cursor\"P\n" +
	" GetPreAppStartSpansResponseError\x12\x12\n" +
	"\x04code\x18\x01 \x01(\tR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xd1\x01\n" +
	"\x1bGetPreAppStartSpansResponse\x12U\n" +
	"\asuccess\x18\x01 \x01(\v29.tusk.drift.backend.v1.GetPreAppStartSpansResponseSuccessH\x00R\asuccess\x12O\n" +
	"\x05error\x18\x02 \x01(\v27.tusk.drift.backend.v1.GetPreAppStartSpansResponseErrorH\x00R\x05errorB\n" +
	"\n" +
	"\bresponse\"\xfc\x01\n" +
	"\x15CreateDriftRunRequest\x122\n" +
	"\x15observable_service_id\x18\x01 \x01(\tR\x13observableServiceId\x12\x1f\n" +
	"\vcli_version\x18\x02 \x01(\tR\n" +
	"cliVersion\x12\x1d\n" +
	"\n" +
	"commit_sha\x18\x03 \x01(\tR\tcommitSha\x12\x1b\n" +
	"\tpr_number\x18\x04 \x01(\tR\bprNumber\x12\x1f\n" +
	"\vbranch_name\x18\x05 \x01(\tR\n" +
	"branchName\x121\n" +
	"\x15external_check_run_id\x18\x06 \x01(\tR\x12externalCheckRunId\"A\n" +
	"\x1dCreateDriftRunResponseSuccess\x12 \n" +
	"\fdrift_run_id\x18\x01 \x01(\tR\n" +
	"driftRunId\"K\n" +
	"\x1bCreateDriftRunResponseError\x12\x12\n" +
	"\x04code\x18\x01 \x01(\tR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xc2\x01\n" +
	"\x16CreateDriftRunResponse\x12P\n" +
	"\asuccess\x18\x01 \x01(\v24.tusk.drift.backend.v1.CreateDriftRunResponseSuccessH\x00R\asuccess\x12J\n" +
	"\x05error\x18\x02 \x01(\v22.tusk.drift.backend.v1.CreateDriftRunResponseErrorH\x00R\x05errorB\n" +
	"\n" +
	"\bresponse\"\xa5\x01\n" +
	"\x1cGetDriftRunTraceTestsRequest\x12 \n" +
	"\fdrift_run_id\x18\x01 \x01(\tR\n" +
	"driftRunId\x120\n" +
	"\x11pagination_cursor\x18\x02 \x01(\tH\x00R\x10paginationCursor\x88\x01\x01\x12\x1b\n" +
	"\tpage_size\x18\x03 \x01(\x05R\bpageSizeB\x14\n" +
	"\x12_pagination_cursor\"\x9f\x01\n" +
	"\tTraceTest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x19\n" +
	"\btrace_id\x18\x02 \x01(\tR\atraceId\x127\n" +
	"\x18server_span_recording_id\x18\x03 \x01(\tR\x15serverSpanRecordingId\x12.\n" +
	"\x05spans\x18\x04 \x03(\v2\x18.tusk.drift.core.v1.SpanR\x05spans\"\xc0\x01\n" +
	"$GetDriftRunTraceTestsResponseSuccess\x12A\n" +
	"\vtrace_tests\x18\x01 \x03(\v2 .tusk.drift.backend.v1.TraceTestR\n" +
	"traceTests\x12$\n" +
	"\vnext_cursor\x18\x02 \x01(\tH\x00R\n" +
	"nextCursor\x88\x01\x01\x12\x1f\n" +
	"\vtotal_count\x18\x03 \x01(\x05R\n" +
	"totalCountB\x0e\n" +
	"\f_next_cursor\"R\n" +
	"\"GetDriftRunTraceTestsResponseError\x12\x12\n" +
	"\x04code\x18\x01 \x01(\tR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xd7\x01\n" +
	"\x1dGetDriftRunTraceTestsResponse\x12W\n" +
	"\asuccess\x18\x01 \x01(\v2;.tusk.drift.backend.v1.GetDriftRunTraceTestsResponseSuccessH\x00R\asuccess\x12Q\n" +
	"\x05error\x18\x02 \x01(\v29.tusk.drift.backend.v1.GetDriftRunTraceTestsResponseErrorH\x00R\x05errorB\n" +
	"\n" +
	"\bresponse\"m\n" +
	"\x13GetTraceTestRequest\x122\n" +
	"\x15observable_service_id\x18\x01 \x01(\tR\x13observableServiceId\x12\"\n" +
	"\rtrace_test_id\x18\x02 \x01(\tR\vtraceTestId\"\xbc\x01\n" +
	"\x14GetTraceTestResponse\x12N\n" +
	"\asuccess\x18\x01 \x01(\v22.tusk.drift.backend.v1.GetTraceTestResponseSuccessH\x00R\asuccess\x12H\n" +
	"\x05error\x18\x02 \x01(\v20.tusk.drift.backend.v1.GetTraceTestResponseErrorH\x00R\x05errorB\n" +
	"\n" +
	"\bresponse\"^\n" +
	"\x1bGetTraceTestResponseSuccess\x12?\n" +
	"\n" +
	"trace_test\x18\x01 \x01(\v2 .tusk.drift.backend.v1.TraceTestR\ttraceTest\"I\n" +
	"\x19GetTraceTestResponseError\x12\x12\n" +
	"\x04code\x18\x01 \x01(\tR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xb2\x01\n" +
	"\x17GetAllTraceTestsRequest\x122\n" +
	"\x15observable_service_id\x18\x01 \x01(\tR\x13observableServiceId\x120\n" +
	"\x11pagination_cursor\x18\x02 \x01(\tH\x00R\x10paginationCursor\x88\x01\x01\x12\x1b\n" +
	"\tpage_size\x18\x03 \x01(\x05R\bpageSizeB\x14\n" +
	"\x12_pagination_cursor\"\xbb\x01\n" +
	"\x1fGetAllTraceTestsResponseSuccess\x12A\n" +
	"\vtrace_tests\x18\x01 \x03(\v2 .tusk.drift.backend.v1.TraceTestR\n" +
	"traceTests\x12$\n" +
	"\vnext_cursor\x18\x02 \x01(\tH\x00R\n" +
	"nextCursor\x88\x01\x01\x12\x1f\n" +
	"\vtotal_count\x18\x03 \x01(\x05R\n" +
	"totalCountB\x0e\n" +
	"\f_next_cursor\"M\n" +
	"\x1dGetAllTraceTestsResponseError\x12\x12\n" +
	"\x04code\x18\x01 \x01(\tR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xc8\x01\n" +
	"\x18GetAllTraceTestsResponse\x12R\n" +
	"\asuccess\x18\x01 \x01(\v26.tusk.drift.backend.v1.GetAllTraceTestsResponseSuccessH\x00R\asuccess\x12L\n" +
	"\x05error\x18\x02 \x01(\v24.tusk.drift.backend.v1.GetAllTraceTestsResponseErrorH\x00R\x05errorB\n" +
	"\n" +
	"\bresponse\"C\n" +
	"\tDeviation\x12\x14\n" +
	"\x05field\x18\x01 \x01(\tR\x05field\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\"\xd6\x02\n" +
	"\n" +
	"MatchLevel\x12?\n" +
	"\n" +
	"match_type\x18\x01 \x01(\x0e2 .tusk.drift.backend.v1.MatchTypeR\tmatchType\x12B\n" +
	"\vmatch_scope\x18\x02 \x01(\x0e2!.tusk.drift.backend.v1.MatchScopeR\n" +
	"matchScope\x12+\n" +
	"\x11match_description\x18\x03 \x01(\tR\x10matchDescription\x12.\n" +
	"\x10similarity_score\x18\x04 \x01(\x02H\x00R\x0fsimilarityScore\x88\x01\x01\x12Q\n" +
	"\x0etop_candidates\x18\x05 \x03(\v2*.tusk.drift.backend.v1.SimilarityCandidateR\rtopCandidatesB\x13\n" +
	"\x11_similarity_score\"D\n" +
	"\x13SimilarityCandidate\x12\x17\n" +
	"\aspan_id\x18\x01 \x01(\tR\x06spanId\x12\x14\n" +
	"\x05score\x18\x02 \x01(\x02R\x05score\"\xff\x02\n" +
	"\x13TraceTestSpanResult\x129\n" +
	"\vreplay_span\x18\x01 \x01(\v2\x18.tusk.drift.core.v1.SpanR\n" +
	"replaySpan\x12>\n" +
	"\x19matched_span_recording_id\x18\x02 \x01(\tH\x00R\x16matchedSpanRecordingId\x88\x01\x01\x12G\n" +
	"\vmatch_level\x18\x03 \x01(\v2!.tusk.drift.backend.v1.MatchLevelH\x01R\n" +
	"matchLevel\x88\x01\x01\x12$\n" +
	"\vstack_trace\x18\x04 \x01(\tH\x02R\n" +
	"stackTrace\x88\x01\x01\x12@\n" +
	"\n" +
	"deviations\x18\x05 \x03(\v2 .tusk.drift.backend.v1.DeviationR\n" +
	"deviationsB\x1c\n" +
	"\x1a_matched_span_recording_idB\x0e\n" +
	"\f_match_levelB\x0e\n" +
	"\f_stack_trace\"\x86\x04\n" +
	"\x0fTraceTestResult\x12\"\n" +
	"\rtrace_test_id\x18\x01 \x01(\tR\vtraceTestId\x12!\n" +
	"\ftest_success\x18\x02 \x01(\bR\vtestSuccess\x12b\n" +
	"\x13test_failure_reason\x18\x03 \x01(\x0e2-.tusk.drift.backend.v1.TraceTestFailureReasonH\x00R\x11testFailureReason\x88\x01\x01\x125\n" +
	"\x14test_failure_message\x18\x04 \x01(\tH\x01R\x12testFailureMessage\x88\x01\x01\x12+\n" +
	"\x0freplay_trace_id\x18\x05 \x01(\tH\x02R\rreplayTraceId\x88\x01\x01\x126\n" +
	"\x15replay_server_span_id\x18\x06 \x01(\tH\x03R\x12replayServerSpanId\x88\x01\x01\x12M\n" +
	"\fspan_results\x18\a \x03(\v2*.tusk.drift.backend.v1.TraceTestSpanResultR\vspanResultsB\x16\n" +
	"\x14_test_failure_reasonB\x17\n" +
	"\x15_test_failure_messageB\x12\n" +
	"\x10_replay_trace_idB\x18\n" +
	"\x16_replay_server_span_id\"\xd9\x01\n" +
	"\x1dUploadTraceTestResultsRequest\x12 \n" +
	"\fdrift_run_id\x18\x01 \x01(\tR\n" +
	"driftRunId\x12\x1f\n" +
	"\vcli_version\x18\x02 \x01(\tR\n" +
	"cliVersion\x12\x1f\n" +
	"\vsdk_version\x18\x03 \x01(\tR\n" +
	"sdkVersion\x12T\n" +
	"\x12trace_test_results\x18\x04 \x03(\v2&.tusk.drift.backend.v1.TraceTestResultR\x10traceTestResults\"A\n" +
	"%UploadTraceTestResultsResponseSuccess\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\"S\n" +
	"#UploadTraceTestResultsResponseError\x12\x12\n" +
	"\x04code\x18\x01 \x01(\tR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xda\x01\n" +
	"\x1eUploadTraceTestResultsResponse\x12X\n" +
	"\asuccess\x18\x01 \x01(\v2<.tusk.drift.backend.v1.UploadTraceTestResultsResponseSuccessH\x00R\asuccess\x12R\n" +
	"\x05error\x18\x02 \x01(\v2:.tusk.drift.backend.v1.UploadTraceTestResultsResponseErrorH\x00R\x05errorB\n" +
	"\n" +
	"\bresponse\"\xce\x01\n" +
	"\x1dUpdateDriftRunCIStatusRequest\x12 \n" +
	"\fdrift_run_id\x18\x01 \x01(\tR\n" +
	"driftRunId\x12D\n" +
	"\tci_status\x18\x02 \x01(\x0e2'.tusk.drift.backend.v1.DriftRunCIStatusR\bciStatus\x12/\n" +
	"\x11ci_status_message\x18\x03 \x01(\tH\x00R\x0fciStatusMessage\x88\x01\x01B\x14\n" +
	"\x12_ci_status_message\"A\n" +
	"%UpdateDriftRunCIStatusResponseSuccess\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\"S\n" +
	"#UpdateDriftRunCIStatusResponseError\x12\x12\n" +
	"\x04code\x18\x01 \x01(\tR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xda\x01\n" +
	"\x1eUpdateDriftRunCIStatusResponse\x12X\n" +
	"\asuccess\x18\x01 \x01(\v2<.tusk.drift.backend.v1.UpdateDriftRunCIStatusResponseSuccessH\x00R\asuccess\x12R\n" +
	"\x05error\x18\x02 \x01(\v2:.tusk.drift.backend.v1.UpdateDriftRunCIStatusResponseErrorH\x00R\x05errorB\n" +
	"\n" +
	"\bresponse*X\n" +
	"\n" +
	"MatchScope\x12\x1b\n" +
	"\x17MATCH_SCOPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11MATCH_SCOPE_TRACE\x10\x01\x12\x16\n" +
	"\x12MATCH_SCOPE_GLOBAL\x10\x02*\xfa\x01\n" +
	"\tMatchType\x12\x1a\n" +
	"\x16MATCH_TYPE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bMATCH_TYPE_INPUT_VALUE_HASH\x10\x01\x12.\n" +
	"*MATCH_TYPE_INPUT_VALUE_HASH_REDUCED_SCHEMA\x10\x02\x12 \n" +
	"\x1cMATCH_TYPE_INPUT_SCHEMA_HASH\x10\x03\x12/\n" +
	"+MATCH_TYPE_INPUT_SCHEMA_HASH_REDUCED_SCHEMA\x10\x04\x12\x14\n" +
	"\x10MATCH_TYPE_FUZZY\x10\x05\x12\x17\n" +
	"\x13MATCH_TYPE_FALLBACK\x10\x06*\xcd\x01\n" +
	"\x16TraceTestFailureReason\x12)\n" +
	"%TRACE_TEST_FAILURE_REASON_UNSPECIFIED\x10\x00\x12,\n" +
	"(TRACE_TEST_FAILURE_REASON_MOCK_NOT_FOUND\x10\x01\x12/\n" +
	"+TRACE_TEST_FAILURE_REASON_RESPONSE_MISMATCH\x10\x02\x12)\n" +
	"%TRACE_TEST_FAILURE_REASON_NO_RESPONSE\x10\x03*\x9a\x01\n" +
	"\x10DriftRunCIStatus\x12#\n" +
	"\x1fDRIFT_RUN_CI_STATUS_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bDRIFT_RUN_CI_STATUS_RUNNING\x10\x01\x12\x1f\n" +
	"\x1bDRIFT_RUN_CI_STATUS_SUCCESS\x10\x02\x12\x1f\n" +
	"\x1bDRIFT_RUN_CI_STATUS_FAILURE\x10\x032\xdf\a\n" +
	"\x0eTestRunService\x12m\n" +
	"\x0eGetGlobalSpans\x12,.tusk.drift.backend.v1.GetGlobalSpansRequest\x1a-.tusk.drift.backend.v1.GetGlobalSpansResponse\x12|\n" +
	"\x13GetPreAppStartSpans\x121.tusk.drift.backend.v1.GetPreAppStartSpansRequest\x1a2.tusk.drift.backend.v1.GetPreAppStartSpansResponse\x12m\n" +
	"\x0eCreateDriftRun\x12,.tusk.drift.backend.v1.CreateDriftRunRequest\x1a-.tusk.drift.backend.v1.CreateDriftRunResponse\x12\x82\x01\n" +
	"\x15GetDriftRunTraceTests\x123.tusk.drift.backend.v1.GetDriftRunTraceTestsRequest\x1a4.tusk.drift.backend.v1.GetDriftRunTraceTestsResponse\x12s\n" +
	"\x10GetAllTraceTests\x12..tusk.drift.backend.v1.GetAllTraceTestsRequest\x1a/.tusk.drift.backend.v1.GetAllTraceTestsResponse\x12g\n" +
	"\fGetTraceTest\x12*.tusk.drift.backend.v1.GetTraceTestRequest\x1a+.tusk.drift.backend.v1.GetTraceTestResponse\x12\x85\x01\n" +
	"\x16UploadTraceTestResults\x124.tusk.drift.backend.v1.UploadTraceTestResultsRequest\x1a5.tusk.drift.backend.v1.UploadTraceTestResultsResponse\x12\x85\x01\n" +
	"\x16UpdateDriftRunCIStatus\x124.tusk.drift.backend.v1.UpdateDriftRunCIStatusRequest\x1a5.tusk.drift.backend.v1.UpdateDriftRunCIStatusResponseB\xee\x01\n" +
	"\x19com.tusk.drift.backend.v1B\x13TestRunServiceProtoP\x01ZEgithub.com/Use-Tusk/tusk-drift-schemas/generated/go/backend;backendv1\xa2\x02\x03TDB\xaa\x02\x15Tusk.Drift.Backend.V1\xca\x02\x15Tusk\\Drift\\Backend\\V1\xe2\x02!Tusk\\Drift\\Backend\\V1\\GPBMetadata\xea\x02\x18Tusk::Drift::Backend::V1b\x06proto3"

var (
	file_backend_test_run_service_proto_rawDescOnce sync.Once
	file_backend_test_run_service_proto_rawDescData []byte
)

func file_backend_test_run_service_proto_rawDescGZIP() []byte {
	file_backend_test_run_service_proto_rawDescOnce.Do(func() {
		file_backend_test_run_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_backend_test_run_service_proto_rawDesc), len(file_backend_test_run_service_proto_rawDesc)))
	})
	return file_backend_test_run_service_proto_rawDescData
}

var file_backend_test_run_service_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_backend_test_run_service_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_backend_test_run_service_proto_goTypes = []any{
	(MatchScope)(0),                               // 0: tusk.drift.backend.v1.MatchScope
	(MatchType)(0),                                // 1: tusk.drift.backend.v1.MatchType
	(TraceTestFailureReason)(0),                   // 2: tusk.drift.backend.v1.TraceTestFailureReason
	(DriftRunCIStatus)(0),                         // 3: tusk.drift.backend.v1.DriftRunCIStatus
	(*GetGlobalSpansRequest)(nil),                 // 4: tusk.drift.backend.v1.GetGlobalSpansRequest
	(*GetGlobalSpansResponseSuccess)(nil),         // 5: tusk.drift.backend.v1.GetGlobalSpansResponseSuccess
	(*GetGlobalSpansResponseError)(nil),           // 6: tusk.drift.backend.v1.GetGlobalSpansResponseError
	(*GetGlobalSpansResponse)(nil),                // 7: tusk.drift.backend.v1.GetGlobalSpansResponse
	(*GetPreAppStartSpansRequest)(nil),            // 8: tusk.drift.backend.v1.GetPreAppStartSpansRequest
	(*GetPreAppStartSpansResponseSuccess)(nil),    // 9: tusk.drift.backend.v1.GetPreAppStartSpansResponseSuccess
	(*GetPreAppStartSpansResponseError)(nil),      // 10: tusk.drift.backend.v1.GetPreAppStartSpansResponseError
	(*GetPreAppStartSpansResponse)(nil),           // 11: tusk.drift.backend.v1.GetPreAppStartSpansResponse
	(*CreateDriftRunRequest)(nil),                 // 12: tusk.drift.backend.v1.CreateDriftRunRequest
	(*CreateDriftRunResponseSuccess)(nil),         // 13: tusk.drift.backend.v1.CreateDriftRunResponseSuccess
	(*CreateDriftRunResponseError)(nil),           // 14: tusk.drift.backend.v1.CreateDriftRunResponseError
	(*CreateDriftRunResponse)(nil),                // 15: tusk.drift.backend.v1.CreateDriftRunResponse
	(*GetDriftRunTraceTestsRequest)(nil),          // 16: tusk.drift.backend.v1.GetDriftRunTraceTestsRequest
	(*TraceTest)(nil),                             // 17: tusk.drift.backend.v1.TraceTest
	(*GetDriftRunTraceTestsResponseSuccess)(nil),  // 18: tusk.drift.backend.v1.GetDriftRunTraceTestsResponseSuccess
	(*GetDriftRunTraceTestsResponseError)(nil),    // 19: tusk.drift.backend.v1.GetDriftRunTraceTestsResponseError
	(*GetDriftRunTraceTestsResponse)(nil),         // 20: tusk.drift.backend.v1.GetDriftRunTraceTestsResponse
	(*GetTraceTestRequest)(nil),                   // 21: tusk.drift.backend.v1.GetTraceTestRequest
	(*GetTraceTestResponse)(nil),                  // 22: tusk.drift.backend.v1.GetTraceTestResponse
	(*GetTraceTestResponseSuccess)(nil),           // 23: tusk.drift.backend.v1.GetTraceTestResponseSuccess
	(*GetTraceTestResponseError)(nil),             // 24: tusk.drift.backend.v1.GetTraceTestResponseError
	(*GetAllTraceTestsRequest)(nil),               // 25: tusk.drift.backend.v1.GetAllTraceTestsRequest
	(*GetAllTraceTestsResponseSuccess)(nil),       // 26: tusk.drift.backend.v1.GetAllTraceTestsResponseSuccess
	(*GetAllTraceTestsResponseError)(nil),         // 27: tusk.drift.backend.v1.GetAllTraceTestsResponseError
	(*GetAllTraceTestsResponse)(nil),              // 28: tusk.drift.backend.v1.GetAllTraceTestsResponse
	(*Deviation)(nil),                             // 29: tusk.drift.backend.v1.Deviation
	(*MatchLevel)(nil),                            // 30: tusk.drift.backend.v1.MatchLevel
	(*SimilarityCandidate)(nil),                   // 31: tusk.drift.backend.v1.SimilarityCandidate
	(*TraceTestSpanResult)(nil),                   // 32: tusk.drift.backend.v1.TraceTestSpanResult
	(*TraceTestResult)(nil),                       // 33: tusk.drift.backend.v1.TraceTestResult
	(*UploadTraceTestResultsRequest)(nil),         // 34: tusk.drift.backend.v1.UploadTraceTestResultsRequest
	(*UploadTraceTestResultsResponseSuccess)(nil), // 35: tusk.drift.backend.v1.UploadTraceTestResultsResponseSuccess
	(*UploadTraceTestResultsResponseError)(nil),   // 36: tusk.drift.backend.v1.UploadTraceTestResultsResponseError
	(*UploadTraceTestResultsResponse)(nil),        // 37: tusk.drift.backend.v1.UploadTraceTestResultsResponse
	(*UpdateDriftRunCIStatusRequest)(nil),         // 38: tusk.drift.backend.v1.UpdateDriftRunCIStatusRequest
	(*UpdateDriftRunCIStatusResponseSuccess)(nil), // 39: tusk.drift.backend.v1.UpdateDriftRunCIStatusResponseSuccess
	(*UpdateDriftRunCIStatusResponseError)(nil),   // 40: tusk.drift.backend.v1.UpdateDriftRunCIStatusResponseError
	(*UpdateDriftRunCIStatusResponse)(nil),        // 41: tusk.drift.backend.v1.UpdateDriftRunCIStatusResponse
	(*core.Span)(nil),                             // 42: tusk.drift.core.v1.Span
}
var file_backend_test_run_service_proto_depIdxs = []int32{
	42, // 0: tusk.drift.backend.v1.GetGlobalSpansResponseSuccess.spans:type_name -> tusk.drift.core.v1.Span
	5,  // 1: tusk.drift.backend.v1.GetGlobalSpansResponse.success:type_name -> tusk.drift.backend.v1.GetGlobalSpansResponseSuccess
	6,  // 2: tusk.drift.backend.v1.GetGlobalSpansResponse.error:type_name -> tusk.drift.backend.v1.GetGlobalSpansResponseError
	42, // 3: tusk.drift.backend.v1.GetPreAppStartSpansResponseSuccess.spans:type_name -> tusk.drift.core.v1.Span
	9,  // 4: tusk.drift.backend.v1.GetPreAppStartSpansResponse.success:type_name -> tusk.drift.backend.v1.GetPreAppStartSpansResponseSuccess
	10, // 5: tusk.drift.backend.v1.GetPreAppStartSpansResponse.error:type_name -> tusk.drift.backend.v1.GetPreAppStartSpansResponseError
	13, // 6: tusk.drift.backend.v1.CreateDriftRunResponse.success:type_name -> tusk.drift.backend.v1.CreateDriftRunResponseSuccess
	14, // 7: tusk.drift.backend.v1.CreateDriftRunResponse.error:type_name -> tusk.drift.backend.v1.CreateDriftRunResponseError
	42, // 8: tusk.drift.backend.v1.TraceTest.spans:type_name -> tusk.drift.core.v1.Span
	17, // 9: tusk.drift.backend.v1.GetDriftRunTraceTestsResponseSuccess.trace_tests:type_name -> tusk.drift.backend.v1.TraceTest
	18, // 10: tusk.drift.backend.v1.GetDriftRunTraceTestsResponse.success:type_name -> tusk.drift.backend.v1.GetDriftRunTraceTestsResponseSuccess
	19, // 11: tusk.drift.backend.v1.GetDriftRunTraceTestsResponse.error:type_name -> tusk.drift.backend.v1.GetDriftRunTraceTestsResponseError
	23, // 12: tusk.drift.backend.v1.GetTraceTestResponse.success:type_name -> tusk.drift.backend.v1.GetTraceTestResponseSuccess
	24, // 13: tusk.drift.backend.v1.GetTraceTestResponse.error:type_name -> tusk.drift.backend.v1.GetTraceTestResponseError
	17, // 14: tusk.drift.backend.v1.GetTraceTestResponseSuccess.trace_test:type_name -> tusk.drift.backend.v1.TraceTest
	17, // 15: tusk.drift.backend.v1.GetAllTraceTestsResponseSuccess.trace_tests:type_name -> tusk.drift.backend.v1.TraceTest
	26, // 16: tusk.drift.backend.v1.GetAllTraceTestsResponse.success:type_name -> tusk.drift.backend.v1.GetAllTraceTestsResponseSuccess
	27, // 17: tusk.drift.backend.v1.GetAllTraceTestsResponse.error:type_name -> tusk.drift.backend.v1.GetAllTraceTestsResponseError
	1,  // 18: tusk.drift.backend.v1.MatchLevel.match_type:type_name -> tusk.drift.backend.v1.MatchType
	0,  // 19: tusk.drift.backend.v1.MatchLevel.match_scope:type_name -> tusk.drift.backend.v1.MatchScope
	31, // 20: tusk.drift.backend.v1.MatchLevel.top_candidates:type_name -> tusk.drift.backend.v1.SimilarityCandidate
	42, // 21: tusk.drift.backend.v1.TraceTestSpanResult.replay_span:type_name -> tusk.drift.core.v1.Span
	30, // 22: tusk.drift.backend.v1.TraceTestSpanResult.match_level:type_name -> tusk.drift.backend.v1.MatchLevel
	29, // 23: tusk.drift.backend.v1.TraceTestSpanResult.deviations:type_name -> tusk.drift.backend.v1.Deviation
	2,  // 24: tusk.drift.backend.v1.TraceTestResult.test_failure_reason:type_name -> tusk.drift.backend.v1.TraceTestFailureReason
	32, // 25: tusk.drift.backend.v1.TraceTestResult.span_results:type_name -> tusk.drift.backend.v1.TraceTestSpanResult
	33, // 26: tusk.drift.backend.v1.UploadTraceTestResultsRequest.trace_test_results:type_name -> tusk.drift.backend.v1.TraceTestResult
	35, // 27: tusk.drift.backend.v1.UploadTraceTestResultsResponse.success:type_name -> tusk.drift.backend.v1.UploadTraceTestResultsResponseSuccess
	36, // 28: tusk.drift.backend.v1.UploadTraceTestResultsResponse.error:type_name -> tusk.drift.backend.v1.UploadTraceTestResultsResponseError
	3,  // 29: tusk.drift.backend.v1.UpdateDriftRunCIStatusRequest.ci_status:type_name -> tusk.drift.backend.v1.DriftRunCIStatus
	39, // 30: tusk.drift.backend.v1.UpdateDriftRunCIStatusResponse.success:type_name -> tusk.drift.backend.v1.UpdateDriftRunCIStatusResponseSuccess
	40, // 31: tusk.drift.backend.v1.UpdateDriftRunCIStatusResponse.error:type_name -> tusk.drift.backend.v1.UpdateDriftRunCIStatusResponseError
	4,  // 32: tusk.drift.backend.v1.TestRunService.GetGlobalSpans:input_type -> tusk.drift.backend.v1.GetGlobalSpansRequest
	8,  // 33: tusk.drift.backend.v1.TestRunService.GetPreAppStartSpans:input_type -> tusk.drift.backend.v1.GetPreAppStartSpansRequest
	12, // 34: tusk.drift.backend.v1.TestRunService.CreateDriftRun:input_type -> tusk.drift.backend.v1.CreateDriftRunRequest
	16, // 35: tusk.drift.backend.v1.TestRunService.GetDriftRunTraceTests:input_type -> tusk.drift.backend.v1.GetDriftRunTraceTestsRequest
	25, // 36: tusk.drift.backend.v1.TestRunService.GetAllTraceTests:input_type -> tusk.drift.backend.v1.GetAllTraceTestsRequest
	21, // 37: tusk.drift.backend.v1.TestRunService.GetTraceTest:input_type -> tusk.drift.backend.v1.GetTraceTestRequest
	34, // 38: tusk.drift.backend.v1.TestRunService.UploadTraceTestResults:input_type -> tusk.drift.backend.v1.UploadTraceTestResultsRequest
	38, // 39: tusk.drift.backend.v1.TestRunService.UpdateDriftRunCIStatus:input_type -> tusk.drift.backend.v1.UpdateDriftRunCIStatusRequest
	7,  // 40: tusk.drift.backend.v1.TestRunService.GetGlobalSpans:output_type -> tusk.drift.backend.v1.GetGlobalSpansResponse
	11, // 41: tusk.drift.backend.v1.TestRunService.GetPreAppStartSpans:output_type -> tusk.drift.backend.v1.GetPreAppStartSpansResponse
	15, // 42: tusk.drift.backend.v1.TestRunService.CreateDriftRun:output_type -> tusk.drift.backend.v1.CreateDriftRunResponse
	20, // 43: tusk.drift.backend.v1.TestRunService.GetDriftRunTraceTests:output_type -> tusk.drift.backend.v1.GetDriftRunTraceTestsResponse
	28, // 44: tusk.drift.backend.v1.TestRunService.GetAllTraceTests:output_type -> tusk.drift.backend.v1.GetAllTraceTestsResponse
	22, // 45: tusk.drift.backend.v1.TestRunService.GetTraceTest:output_type -> tusk.drift.backend.v1.GetTraceTestResponse
	37, // 46: tusk.drift.backend.v1.TestRunService.UploadTraceTestResults:output_type -> tusk.drift.backend.v1.UploadTraceTestResultsResponse
	41, // 47: tusk.drift.backend.v1.TestRunService.UpdateDriftRunCIStatus:output_type -> tusk.drift.backend.v1.UpdateDriftRunCIStatusResponse
	40, // [40:48] is the sub-list for method output_type
	32, // [32:40] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_backend_test_run_service_proto_init() }
func file_backend_test_run_service_proto_init() {
	if File_backend_test_run_service_proto != nil {
		return
	}
	file_backend_test_run_service_proto_msgTypes[0].OneofWrappers = []any{}
	file_backend_test_run_service_proto_msgTypes[1].OneofWrappers = []any{}
	file_backend_test_run_service_proto_msgTypes[3].OneofWrappers = []any{
		(*GetGlobalSpansResponse_Success)(nil),
		(*GetGlobalSpansResponse_Error)(nil),
	}
	file_backend_test_run_service_proto_msgTypes[4].OneofWrappers = []any{}
	file_backend_test_run_service_proto_msgTypes[5].OneofWrappers = []any{}
	file_backend_test_run_service_proto_msgTypes[7].OneofWrappers = []any{
		(*GetPreAppStartSpansResponse_Success)(nil),
		(*GetPreAppStartSpansResponse_Error)(nil),
	}
	file_backend_test_run_service_proto_msgTypes[11].OneofWrappers = []any{
		(*CreateDriftRunResponse_Success)(nil),
		(*CreateDriftRunResponse_Error)(nil),
	}
	file_backend_test_run_service_proto_msgTypes[12].OneofWrappers = []any{}
	file_backend_test_run_service_proto_msgTypes[14].OneofWrappers = []any{}
	file_backend_test_run_service_proto_msgTypes[16].OneofWrappers = []any{
		(*GetDriftRunTraceTestsResponse_Success)(nil),
		(*GetDriftRunTraceTestsResponse_Error)(nil),
	}
	file_backend_test_run_service_proto_msgTypes[18].OneofWrappers = []any{
		(*GetTraceTestResponse_Success)(nil),
		(*GetTraceTestResponse_Error)(nil),
	}
	file_backend_test_run_service_proto_msgTypes[21].OneofWrappers = []any{}
	file_backend_test_run_service_proto_msgTypes[22].OneofWrappers = []any{}
	file_backend_test_run_service_proto_msgTypes[24].OneofWrappers = []any{
		(*GetAllTraceTestsResponse_Success)(nil),
		(*GetAllTraceTestsResponse_Error)(nil),
	}
	file_backend_test_run_service_proto_msgTypes[26].OneofWrappers = []any{}
	file_backend_test_run_service_proto_msgTypes[28].OneofWrappers = []any{}
	file_backend_test_run_service_proto_msgTypes[29].OneofWrappers = []any{}
	file_backend_test_run_service_proto_msgTypes[33].OneofWrappers = []any{
		(*UploadTraceTestResultsResponse_Success)(nil),
		(*UploadTraceTestResultsResponse_Error)(nil),
	}
	file_backend_test_run_service_proto_msgTypes[34].OneofWrappers = []any{}
	file_backend_test_run_service_proto_msgTypes[37].OneofWrappers = []any{
		(*UpdateDriftRunCIStatusResponse_Success)(nil),
		(*UpdateDriftRunCIStatusResponse_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_backend_test_run_service_proto_rawDesc), len(file_backend_test_run_service_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_backend_test_run_service_proto_goTypes,
		DependencyIndexes: file_backend_test_run_service_proto_depIdxs,
		EnumInfos:         file_backend_test_run_service_proto_enumTypes,
		MessageInfos:      file_backend_test_run_service_proto_msgTypes,
	}.Build()
	File_backend_test_run_service_proto = out.File
	file_backend_test_run_service_proto_goTypes = nil
	file_backend_test_run_service_proto_depIdxs = nil
}
