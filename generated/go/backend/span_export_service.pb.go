// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: backend/span_export_service.proto

package backendv1

import (
	core "github.com/Use-Tusk/tusk-drift-schemas/generated/go/core"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExportSpansRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ObservableServiceId string                 `protobuf:"bytes,1,opt,name=observable_service_id,json=observableServiceId,proto3" json:"observable_service_id,omitempty"`
	Environment         string                 `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
	SdkVersion          string                 `protobuf:"bytes,3,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version,omitempty"`
	SdkInstanceId       string                 `protobuf:"bytes,4,opt,name=sdk_instance_id,json=sdkInstanceId,proto3" json:"sdk_instance_id,omitempty"`
	Spans               []*core.Span           `protobuf:"bytes,5,rep,name=spans,proto3" json:"spans,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ExportSpansRequest) Reset() {
	*x = ExportSpansRequest{}
	mi := &file_backend_span_export_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportSpansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportSpansRequest) ProtoMessage() {}

func (x *ExportSpansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_span_export_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportSpansRequest.ProtoReflect.Descriptor instead.
func (*ExportSpansRequest) Descriptor() ([]byte, []int) {
	return file_backend_span_export_service_proto_rawDescGZIP(), []int{0}
}

func (x *ExportSpansRequest) GetObservableServiceId() string {
	if x != nil {
		return x.ObservableServiceId
	}
	return ""
}

func (x *ExportSpansRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *ExportSpansRequest) GetSdkVersion() string {
	if x != nil {
		return x.SdkVersion
	}
	return ""
}

func (x *ExportSpansRequest) GetSdkInstanceId() string {
	if x != nil {
		return x.SdkInstanceId
	}
	return ""
}

func (x *ExportSpansRequest) GetSpans() []*core.Span {
	if x != nil {
		return x.Spans
	}
	return nil
}

type ExportSpansResponse struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Success bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// TODO: Add field to indicate number of spans saved?
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportSpansResponse) Reset() {
	*x = ExportSpansResponse{}
	mi := &file_backend_span_export_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportSpansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportSpansResponse) ProtoMessage() {}

func (x *ExportSpansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_span_export_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportSpansResponse.ProtoReflect.Descriptor instead.
func (*ExportSpansResponse) Descriptor() ([]byte, []int) {
	return file_backend_span_export_service_proto_rawDescGZIP(), []int{1}
}

func (x *ExportSpansResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ExportSpansResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_backend_span_export_service_proto protoreflect.FileDescriptor

const file_backend_span_export_service_proto_rawDesc = "" +
	"\n" +
	"!backend/span_export_service.proto\x12\x15tusk.drift.backend.v1\x1a\x0fcore/span.proto\"\xe3\x01\n" +
	"\x12ExportSpansRequest\x122\n" +
	"\x15observable_service_id\x18\x01 \x01(\tR\x13observableServiceId\x12 \n" +
	"\venvironment\x18\x02 \x01(\tR\venvironment\x12\x1f\n" +
	"\vsdk_version\x18\x03 \x01(\tR\n" +
	"sdkVersion\x12&\n" +
	"\x0fsdk_instance_id\x18\x04 \x01(\tR\rsdkInstanceId\x12.\n" +
	"\x05spans\x18\x05 \x03(\v2\x18.tusk.drift.core.v1.SpanR\x05spans\"I\n" +
	"\x13ExportSpansResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage2y\n" +
	"\x11SpanExportService\x12d\n" +
	"\vExportSpans\x12).tusk.drift.backend.v1.ExportSpansRequest\x1a*.tusk.drift.backend.v1.ExportSpansResponseB\xf1\x01\n" +
	"\x19com.tusk.drift.backend.v1B\x16SpanExportServiceProtoP\x01ZEgithub.com/Use-Tusk/tusk-drift-schemas/generated/go/backend;backendv1\xa2\x02\x03TDB\xaa\x02\x15Tusk.Drift.Backend.V1\xca\x02\x15Tusk\\Drift\\Backend\\V1\xe2\x02!Tusk\\Drift\\Backend\\V1\\GPBMetadata\xea\x02\x18Tusk::Drift::Backend::V1b\x06proto3"

var (
	file_backend_span_export_service_proto_rawDescOnce sync.Once
	file_backend_span_export_service_proto_rawDescData []byte
)

func file_backend_span_export_service_proto_rawDescGZIP() []byte {
	file_backend_span_export_service_proto_rawDescOnce.Do(func() {
		file_backend_span_export_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_backend_span_export_service_proto_rawDesc), len(file_backend_span_export_service_proto_rawDesc)))
	})
	return file_backend_span_export_service_proto_rawDescData
}

var file_backend_span_export_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_backend_span_export_service_proto_goTypes = []any{
	(*ExportSpansRequest)(nil),  // 0: tusk.drift.backend.v1.ExportSpansRequest
	(*ExportSpansResponse)(nil), // 1: tusk.drift.backend.v1.ExportSpansResponse
	(*core.Span)(nil),           // 2: tusk.drift.core.v1.Span
}
var file_backend_span_export_service_proto_depIdxs = []int32{
	2, // 0: tusk.drift.backend.v1.ExportSpansRequest.spans:type_name -> tusk.drift.core.v1.Span
	0, // 1: tusk.drift.backend.v1.SpanExportService.ExportSpans:input_type -> tusk.drift.backend.v1.ExportSpansRequest
	1, // 2: tusk.drift.backend.v1.SpanExportService.ExportSpans:output_type -> tusk.drift.backend.v1.ExportSpansResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_backend_span_export_service_proto_init() }
func file_backend_span_export_service_proto_init() {
	if File_backend_span_export_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_backend_span_export_service_proto_rawDesc), len(file_backend_span_export_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_backend_span_export_service_proto_goTypes,
		DependencyIndexes: file_backend_span_export_service_proto_depIdxs,
		MessageInfos:      file_backend_span_export_service_proto_msgTypes,
	}.Build()
	File_backend_span_export_service_proto = out.File
	file_backend_span_export_service_proto_goTypes = nil
	file_backend_span_export_service_proto_depIdxs = nil
}
