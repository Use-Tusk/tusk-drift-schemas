// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: postgresql/postgresql.proto

package postgresqlv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Transaction state enumeration
type TransactionState int32

const (
	TransactionState_TRANSACTION_STATE_UNSPECIFIED                TransactionState = 0
	TransactionState_TRANSACTION_STATE_IDLE                       TransactionState = 1 // Not in a transaction
	TransactionState_TRANSACTION_STATE_ACTIVE                     TransactionState = 2 // Transaction active
	TransactionState_TRANSACTION_STATE_IDLE_IN_TRANSACTION        TransactionState = 3 // Idle in transaction
	TransactionState_TRANSACTION_STATE_IDLE_IN_FAILED_TRANSACTION TransactionState = 4 // Idle in failed transaction
)

// Enum value maps for TransactionState.
var (
	TransactionState_name = map[int32]string{
		0: "TRANSACTION_STATE_UNSPECIFIED",
		1: "TRANSACTION_STATE_IDLE",
		2: "TRANSACTION_STATE_ACTIVE",
		3: "TRANSACTION_STATE_IDLE_IN_TRANSACTION",
		4: "TRANSACTION_STATE_IDLE_IN_FAILED_TRANSACTION",
	}
	TransactionState_value = map[string]int32{
		"TRANSACTION_STATE_UNSPECIFIED":                0,
		"TRANSACTION_STATE_IDLE":                       1,
		"TRANSACTION_STATE_ACTIVE":                     2,
		"TRANSACTION_STATE_IDLE_IN_TRANSACTION":        3,
		"TRANSACTION_STATE_IDLE_IN_FAILED_TRANSACTION": 4,
	}
)

func (x TransactionState) Enum() *TransactionState {
	p := new(TransactionState)
	*p = x
	return p
}

func (x TransactionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionState) Descriptor() protoreflect.EnumDescriptor {
	return file_postgresql_postgresql_proto_enumTypes[0].Descriptor()
}

func (TransactionState) Type() protoreflect.EnumType {
	return &file_postgresql_postgresql_proto_enumTypes[0]
}

func (x TransactionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionState.Descriptor instead.
func (TransactionState) EnumDescriptor() ([]byte, []int) {
	return file_postgresql_postgresql_proto_rawDescGZIP(), []int{0}
}

// PostgreSQL isolation levels
type IsolationLevel int32

const (
	IsolationLevel_ISOLATION_LEVEL_UNSPECIFIED      IsolationLevel = 0
	IsolationLevel_ISOLATION_LEVEL_READ_UNCOMMITTED IsolationLevel = 1
	IsolationLevel_ISOLATION_LEVEL_READ_COMMITTED   IsolationLevel = 2
	IsolationLevel_ISOLATION_LEVEL_REPEATABLE_READ  IsolationLevel = 3
	IsolationLevel_ISOLATION_LEVEL_SERIALIZABLE     IsolationLevel = 4
)

// Enum value maps for IsolationLevel.
var (
	IsolationLevel_name = map[int32]string{
		0: "ISOLATION_LEVEL_UNSPECIFIED",
		1: "ISOLATION_LEVEL_READ_UNCOMMITTED",
		2: "ISOLATION_LEVEL_READ_COMMITTED",
		3: "ISOLATION_LEVEL_REPEATABLE_READ",
		4: "ISOLATION_LEVEL_SERIALIZABLE",
	}
	IsolationLevel_value = map[string]int32{
		"ISOLATION_LEVEL_UNSPECIFIED":      0,
		"ISOLATION_LEVEL_READ_UNCOMMITTED": 1,
		"ISOLATION_LEVEL_READ_COMMITTED":   2,
		"ISOLATION_LEVEL_REPEATABLE_READ":  3,
		"ISOLATION_LEVEL_SERIALIZABLE":     4,
	}
)

func (x IsolationLevel) Enum() *IsolationLevel {
	p := new(IsolationLevel)
	*p = x
	return p
}

func (x IsolationLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsolationLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_postgresql_postgresql_proto_enumTypes[1].Descriptor()
}

func (IsolationLevel) Type() protoreflect.EnumType {
	return &file_postgresql_postgresql_proto_enumTypes[1]
}

func (x IsolationLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsolationLevel.Descriptor instead.
func (IsolationLevel) EnumDescriptor() ([]byte, []int) {
	return file_postgresql_postgresql_proto_rawDescGZIP(), []int{1}
}

// PostgreSQL query request - used internally by PostgreSQL instrumentation SDK
type PostgreSQLQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Core query information
	Text       string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`                               // SQL query text
	Values     []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`                           // Parameterized query values (always strings)
	ClientType string   `protobuf:"bytes,3,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"` // "client", "pool", etc.
	// Connection context
	Connection *PostgreSQLConnection `protobuf:"bytes,4,opt,name=connection,proto3" json:"connection,omitempty"` // Connection information
	Options    *QueryOptions         `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`       // Query execution options
	// Query metadata
	QueryId       string            `protobuf:"bytes,6,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`                                                      // Unique query identifier (optional)
	Tags          map[string]string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Custom tags for the query
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostgreSQLQuery) Reset() {
	*x = PostgreSQLQuery{}
	mi := &file_postgresql_postgresql_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSQLQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLQuery) ProtoMessage() {}

func (x *PostgreSQLQuery) ProtoReflect() protoreflect.Message {
	mi := &file_postgresql_postgresql_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLQuery.ProtoReflect.Descriptor instead.
func (*PostgreSQLQuery) Descriptor() ([]byte, []int) {
	return file_postgresql_postgresql_proto_rawDescGZIP(), []int{0}
}

func (x *PostgreSQLQuery) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *PostgreSQLQuery) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PostgreSQLQuery) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

func (x *PostgreSQLQuery) GetConnection() *PostgreSQLConnection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *PostgreSQLQuery) GetOptions() *QueryOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *PostgreSQLQuery) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *PostgreSQLQuery) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// PostgreSQL connection information
type PostgreSQLConnection struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	DatabaseName    string                 `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`          // Database name
	Username        string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`                                      // Username (without password)
	Host            string                 `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`                                              // Host address
	Port            int32                  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`                                             // Port number
	ApplicationName string                 `protobuf:"bytes,5,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"` // Application name in connection
	ConnectionId    string                 `protobuf:"bytes,6,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`          // Connection identifier
	SslEnabled      bool                   `protobuf:"varint,7,opt,name=ssl_enabled,json=sslEnabled,proto3" json:"ssl_enabled,omitempty"`               // Whether SSL is enabled
	ServerVersion   string                 `protobuf:"bytes,8,opt,name=server_version,json=serverVersion,proto3" json:"server_version,omitempty"`       // PostgreSQL server version
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PostgreSQLConnection) Reset() {
	*x = PostgreSQLConnection{}
	mi := &file_postgresql_postgresql_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSQLConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLConnection) ProtoMessage() {}

func (x *PostgreSQLConnection) ProtoReflect() protoreflect.Message {
	mi := &file_postgresql_postgresql_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLConnection.ProtoReflect.Descriptor instead.
func (*PostgreSQLConnection) Descriptor() ([]byte, []int) {
	return file_postgresql_postgresql_proto_rawDescGZIP(), []int{1}
}

func (x *PostgreSQLConnection) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *PostgreSQLConnection) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PostgreSQLConnection) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PostgreSQLConnection) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PostgreSQLConnection) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *PostgreSQLConnection) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *PostgreSQLConnection) GetSslEnabled() bool {
	if x != nil {
		return x.SslEnabled
	}
	return false
}

func (x *PostgreSQLConnection) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

// Query execution options
type QueryOptions struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	StatementTimeout int32                  `protobuf:"varint,1,opt,name=statement_timeout,json=statementTimeout,proto3" json:"statement_timeout,omitempty"`                                                                 // Statement timeout in milliseconds
	QueryTimeout     int32                  `protobuf:"varint,2,opt,name=query_timeout,json=queryTimeout,proto3" json:"query_timeout,omitempty"`                                                                             // Query timeout in milliseconds
	BinaryMode       bool                   `protobuf:"varint,3,opt,name=binary_mode,json=binaryMode,proto3" json:"binary_mode,omitempty"`                                                                                   // Whether binary mode is enabled
	CursorName       string                 `protobuf:"bytes,4,opt,name=cursor_name,json=cursorName,proto3" json:"cursor_name,omitempty"`                                                                                    // Cursor name (for cursor queries)
	FetchSize        int32                  `protobuf:"varint,5,opt,name=fetch_size,json=fetchSize,proto3" json:"fetch_size,omitempty"`                                                                                      // Fetch size for large result sets
	ReadOnly         bool                   `protobuf:"varint,6,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`                                                                                         // Whether query is read-only
	CustomOptions    map[string]string      `protobuf:"bytes,7,rep,name=custom_options,json=customOptions,proto3" json:"custom_options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Custom driver options
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *QueryOptions) Reset() {
	*x = QueryOptions{}
	mi := &file_postgresql_postgresql_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOptions) ProtoMessage() {}

func (x *QueryOptions) ProtoReflect() protoreflect.Message {
	mi := &file_postgresql_postgresql_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOptions.ProtoReflect.Descriptor instead.
func (*QueryOptions) Descriptor() ([]byte, []int) {
	return file_postgresql_postgresql_proto_rawDescGZIP(), []int{2}
}

func (x *QueryOptions) GetStatementTimeout() int32 {
	if x != nil {
		return x.StatementTimeout
	}
	return 0
}

func (x *QueryOptions) GetQueryTimeout() int32 {
	if x != nil {
		return x.QueryTimeout
	}
	return 0
}

func (x *QueryOptions) GetBinaryMode() bool {
	if x != nil {
		return x.BinaryMode
	}
	return false
}

func (x *QueryOptions) GetCursorName() string {
	if x != nil {
		return x.CursorName
	}
	return ""
}

func (x *QueryOptions) GetFetchSize() int32 {
	if x != nil {
		return x.FetchSize
	}
	return 0
}

func (x *QueryOptions) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *QueryOptions) GetCustomOptions() map[string]string {
	if x != nil {
		return x.CustomOptions
	}
	return nil
}

// PostgreSQL query result - matches your trace data structure
type PostgreSQLResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Core result information (from your trace data)
	Command  string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`                    // "SELECT", "INSERT", "UPDATE", etc.
	RowCount int32  `protobuf:"varint,2,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"` // Number of rows affected/returned
	Oid      *int32 `protobuf:"varint,3,opt,name=oid,proto3,oneof" json:"oid,omitempty"`                     // Object ID (PostgreSQL-specific, can be null)
	// Result data
	Rows   []*structpb.Struct `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"`     // Actual row data as JSON objects
	Fields []*PostgreSQLField `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"` // Field/column definitions
	// Query execution metadata
	ExecutionInfo *QueryExecutionInfo `protobuf:"bytes,6,opt,name=execution_info,json=executionInfo,proto3" json:"execution_info,omitempty"` // Execution details
	// Error information (if query failed)
	Error         *PostgreSQLError `protobuf:"bytes,7,opt,name=error,proto3,oneof" json:"error,omitempty"` // Error details
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostgreSQLResult) Reset() {
	*x = PostgreSQLResult{}
	mi := &file_postgresql_postgresql_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSQLResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLResult) ProtoMessage() {}

func (x *PostgreSQLResult) ProtoReflect() protoreflect.Message {
	mi := &file_postgresql_postgresql_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLResult.ProtoReflect.Descriptor instead.
func (*PostgreSQLResult) Descriptor() ([]byte, []int) {
	return file_postgresql_postgresql_proto_rawDescGZIP(), []int{3}
}

func (x *PostgreSQLResult) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *PostgreSQLResult) GetRowCount() int32 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

func (x *PostgreSQLResult) GetOid() int32 {
	if x != nil && x.Oid != nil {
		return *x.Oid
	}
	return 0
}

func (x *PostgreSQLResult) GetRows() []*structpb.Struct {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *PostgreSQLResult) GetFields() []*PostgreSQLField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *PostgreSQLResult) GetExecutionInfo() *QueryExecutionInfo {
	if x != nil {
		return x.ExecutionInfo
	}
	return nil
}

func (x *PostgreSQLResult) GetError() *PostgreSQLError {
	if x != nil {
		return x.Error
	}
	return nil
}

// PostgreSQL field definition (matches your trace data)
type PostgreSQLField struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Name             string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                    // Field name (e.g., "Repo_id")
	TableId          int32                  `protobuf:"varint,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`                              // PostgreSQL table OID
	ColumnId         int32                  `protobuf:"varint,3,opt,name=column_id,json=columnId,proto3" json:"column_id,omitempty"`                           // Column ID within table
	DataTypeId       int32                  `protobuf:"varint,4,opt,name=data_type_id,json=dataTypeId,proto3" json:"data_type_id,omitempty"`                   // PostgreSQL data type OID
	DataTypeSize     int32                  `protobuf:"varint,5,opt,name=data_type_size,json=dataTypeSize,proto3" json:"data_type_size,omitempty"`             // Data type size (-1 for variable)
	DataTypeModifier int32                  `protobuf:"varint,6,opt,name=data_type_modifier,json=dataTypeModifier,proto3" json:"data_type_modifier,omitempty"` // Type-specific modifier
	Format           string                 `protobuf:"bytes,7,opt,name=format,proto3" json:"format,omitempty"`                                                // "text" or "binary"
	// Additional field metadata
	DataTypeName  string `protobuf:"bytes,8,opt,name=data_type_name,json=dataTypeName,proto3" json:"data_type_name,omitempty"` // Human-readable type name
	Nullable      bool   `protobuf:"varint,9,opt,name=nullable,proto3" json:"nullable,omitempty"`                              // Whether field can be null
	PrimaryKey    bool   `protobuf:"varint,10,opt,name=primary_key,json=primaryKey,proto3" json:"primary_key,omitempty"`       // Whether field is part of primary key
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostgreSQLField) Reset() {
	*x = PostgreSQLField{}
	mi := &file_postgresql_postgresql_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSQLField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLField) ProtoMessage() {}

func (x *PostgreSQLField) ProtoReflect() protoreflect.Message {
	mi := &file_postgresql_postgresql_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLField.ProtoReflect.Descriptor instead.
func (*PostgreSQLField) Descriptor() ([]byte, []int) {
	return file_postgresql_postgresql_proto_rawDescGZIP(), []int{4}
}

func (x *PostgreSQLField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PostgreSQLField) GetTableId() int32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *PostgreSQLField) GetColumnId() int32 {
	if x != nil {
		return x.ColumnId
	}
	return 0
}

func (x *PostgreSQLField) GetDataTypeId() int32 {
	if x != nil {
		return x.DataTypeId
	}
	return 0
}

func (x *PostgreSQLField) GetDataTypeSize() int32 {
	if x != nil {
		return x.DataTypeSize
	}
	return 0
}

func (x *PostgreSQLField) GetDataTypeModifier() int32 {
	if x != nil {
		return x.DataTypeModifier
	}
	return 0
}

func (x *PostgreSQLField) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *PostgreSQLField) GetDataTypeName() string {
	if x != nil {
		return x.DataTypeName
	}
	return ""
}

func (x *PostgreSQLField) GetNullable() bool {
	if x != nil {
		return x.Nullable
	}
	return false
}

func (x *PostgreSQLField) GetPrimaryKey() bool {
	if x != nil {
		return x.PrimaryKey
	}
	return false
}

// Query execution information
type QueryExecutionInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timing breakdown
	ParseTimeMs   int64 `protobuf:"varint,1,opt,name=parse_time_ms,json=parseTimeMs,proto3" json:"parse_time_ms,omitempty"`       // Time to parse query
	PlanTimeMs    int64 `protobuf:"varint,2,opt,name=plan_time_ms,json=planTimeMs,proto3" json:"plan_time_ms,omitempty"`          // Time to plan query
	ExecuteTimeMs int64 `protobuf:"varint,3,opt,name=execute_time_ms,json=executeTimeMs,proto3" json:"execute_time_ms,omitempty"` // Time to execute query
	TotalTimeMs   int64 `protobuf:"varint,4,opt,name=total_time_ms,json=totalTimeMs,proto3" json:"total_time_ms,omitempty"`       // Total query time
	// Execution statistics
	RowsExamined  int64 `protobuf:"varint,5,opt,name=rows_examined,json=rowsExamined,proto3" json:"rows_examined,omitempty"`    // Rows examined by query
	RowsReturned  int64 `protobuf:"varint,6,opt,name=rows_returned,json=rowsReturned,proto3" json:"rows_returned,omitempty"`    // Rows returned by query
	BytesSent     int64 `protobuf:"varint,7,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`             // Bytes sent to client
	BytesReceived int64 `protobuf:"varint,8,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"` // Bytes received from server
	// Query plan information (optional)
	ExecutionPlan string   `protobuf:"bytes,9,opt,name=execution_plan,json=executionPlan,proto3" json:"execution_plan,omitempty"` // EXPLAIN output (optional)
	Notices       []string `protobuf:"bytes,10,rep,name=notices,proto3" json:"notices,omitempty"`                                 // PostgreSQL notices/warnings
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryExecutionInfo) Reset() {
	*x = QueryExecutionInfo{}
	mi := &file_postgresql_postgresql_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryExecutionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExecutionInfo) ProtoMessage() {}

func (x *QueryExecutionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_postgresql_postgresql_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExecutionInfo.ProtoReflect.Descriptor instead.
func (*QueryExecutionInfo) Descriptor() ([]byte, []int) {
	return file_postgresql_postgresql_proto_rawDescGZIP(), []int{5}
}

func (x *QueryExecutionInfo) GetParseTimeMs() int64 {
	if x != nil {
		return x.ParseTimeMs
	}
	return 0
}

func (x *QueryExecutionInfo) GetPlanTimeMs() int64 {
	if x != nil {
		return x.PlanTimeMs
	}
	return 0
}

func (x *QueryExecutionInfo) GetExecuteTimeMs() int64 {
	if x != nil {
		return x.ExecuteTimeMs
	}
	return 0
}

func (x *QueryExecutionInfo) GetTotalTimeMs() int64 {
	if x != nil {
		return x.TotalTimeMs
	}
	return 0
}

func (x *QueryExecutionInfo) GetRowsExamined() int64 {
	if x != nil {
		return x.RowsExamined
	}
	return 0
}

func (x *QueryExecutionInfo) GetRowsReturned() int64 {
	if x != nil {
		return x.RowsReturned
	}
	return 0
}

func (x *QueryExecutionInfo) GetBytesSent() int64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *QueryExecutionInfo) GetBytesReceived() int64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *QueryExecutionInfo) GetExecutionPlan() string {
	if x != nil {
		return x.ExecutionPlan
	}
	return ""
}

func (x *QueryExecutionInfo) GetNotices() []string {
	if x != nil {
		return x.Notices
	}
	return nil
}

// PostgreSQL-specific error information
type PostgreSQLError struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SqlState       string                 `protobuf:"bytes,1,opt,name=sql_state,json=sqlState,proto3" json:"sql_state,omitempty"`                    // SQL state code (e.g., "23505")
	Message        string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                      // Error message
	Detail         string                 `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`                                        // Detailed error information
	Hint           string                 `protobuf:"bytes,4,opt,name=hint,proto3" json:"hint,omitempty"`                                            // Error hint
	Position       string                 `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`                                    // Error position in query
	Where          string                 `protobuf:"bytes,6,opt,name=where,proto3" json:"where,omitempty"`                                          // Context where error occurred
	SchemaName     string                 `protobuf:"bytes,7,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`              // Schema name (if applicable)
	TableName      string                 `protobuf:"bytes,8,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`                 // Table name (if applicable)
	ColumnName     string                 `protobuf:"bytes,9,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`              // Column name (if applicable)
	ConstraintName string                 `protobuf:"bytes,10,opt,name=constraint_name,json=constraintName,proto3" json:"constraint_name,omitempty"` // Constraint name (if applicable)
	DataTypeName   string                 `protobuf:"bytes,11,opt,name=data_type_name,json=dataTypeName,proto3" json:"data_type_name,omitempty"`     // Data type name (if applicable)
	File           string                 `protobuf:"bytes,12,opt,name=file,proto3" json:"file,omitempty"`                                           // Source file where error occurred
	Line           string                 `protobuf:"bytes,13,opt,name=line,proto3" json:"line,omitempty"`                                           // Line number in source file
	Routine        string                 `protobuf:"bytes,14,opt,name=routine,proto3" json:"routine,omitempty"`                                     // Routine name where error occurred
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PostgreSQLError) Reset() {
	*x = PostgreSQLError{}
	mi := &file_postgresql_postgresql_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSQLError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLError) ProtoMessage() {}

func (x *PostgreSQLError) ProtoReflect() protoreflect.Message {
	mi := &file_postgresql_postgresql_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLError.ProtoReflect.Descriptor instead.
func (*PostgreSQLError) Descriptor() ([]byte, []int) {
	return file_postgresql_postgresql_proto_rawDescGZIP(), []int{6}
}

func (x *PostgreSQLError) GetSqlState() string {
	if x != nil {
		return x.SqlState
	}
	return ""
}

func (x *PostgreSQLError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PostgreSQLError) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *PostgreSQLError) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

func (x *PostgreSQLError) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *PostgreSQLError) GetWhere() string {
	if x != nil {
		return x.Where
	}
	return ""
}

func (x *PostgreSQLError) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *PostgreSQLError) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *PostgreSQLError) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *PostgreSQLError) GetConstraintName() string {
	if x != nil {
		return x.ConstraintName
	}
	return ""
}

func (x *PostgreSQLError) GetDataTypeName() string {
	if x != nil {
		return x.DataTypeName
	}
	return ""
}

func (x *PostgreSQLError) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *PostgreSQLError) GetLine() string {
	if x != nil {
		return x.Line
	}
	return ""
}

func (x *PostgreSQLError) GetRoutine() string {
	if x != nil {
		return x.Routine
	}
	return ""
}

// Prepared statement information
type PostgreSQLPreparedStatement struct {
	state          protoimpl.MessageState     `protogen:"open.v1"`
	StatementName  string                     `protobuf:"bytes,1,opt,name=statement_name,json=statementName,proto3" json:"statement_name,omitempty"`     // Name of prepared statement
	QueryText      string                     `protobuf:"bytes,2,opt,name=query_text,json=queryText,proto3" json:"query_text,omitempty"`                 // Original query text
	ParameterTypes []*PostgreSQLParameterType `protobuf:"bytes,3,rep,name=parameter_types,json=parameterTypes,proto3" json:"parameter_types,omitempty"`  // Parameter type information
	PreparedAt     *timestamppb.Timestamp     `protobuf:"bytes,4,opt,name=prepared_at,json=preparedAt,proto3" json:"prepared_at,omitempty"`              // When statement was prepared
	ExecutionCount int32                      `protobuf:"varint,5,opt,name=execution_count,json=executionCount,proto3" json:"execution_count,omitempty"` // How many times executed
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PostgreSQLPreparedStatement) Reset() {
	*x = PostgreSQLPreparedStatement{}
	mi := &file_postgresql_postgresql_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSQLPreparedStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLPreparedStatement) ProtoMessage() {}

func (x *PostgreSQLPreparedStatement) ProtoReflect() protoreflect.Message {
	mi := &file_postgresql_postgresql_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLPreparedStatement.ProtoReflect.Descriptor instead.
func (*PostgreSQLPreparedStatement) Descriptor() ([]byte, []int) {
	return file_postgresql_postgresql_proto_rawDescGZIP(), []int{7}
}

func (x *PostgreSQLPreparedStatement) GetStatementName() string {
	if x != nil {
		return x.StatementName
	}
	return ""
}

func (x *PostgreSQLPreparedStatement) GetQueryText() string {
	if x != nil {
		return x.QueryText
	}
	return ""
}

func (x *PostgreSQLPreparedStatement) GetParameterTypes() []*PostgreSQLParameterType {
	if x != nil {
		return x.ParameterTypes
	}
	return nil
}

func (x *PostgreSQLPreparedStatement) GetPreparedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PreparedAt
	}
	return nil
}

func (x *PostgreSQLPreparedStatement) GetExecutionCount() int32 {
	if x != nil {
		return x.ExecutionCount
	}
	return 0
}

// Parameter type information for prepared statements
type PostgreSQLParameterType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Position      int32                  `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`                              // Parameter position (1-based)
	DataTypeId    int32                  `protobuf:"varint,2,opt,name=data_type_id,json=dataTypeId,proto3" json:"data_type_id,omitempty"`      // PostgreSQL data type OID
	DataTypeName  string                 `protobuf:"bytes,3,opt,name=data_type_name,json=dataTypeName,proto3" json:"data_type_name,omitempty"` // Human-readable type name
	Nullable      bool                   `protobuf:"varint,4,opt,name=nullable,proto3" json:"nullable,omitempty"`                              // Whether parameter can be null
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostgreSQLParameterType) Reset() {
	*x = PostgreSQLParameterType{}
	mi := &file_postgresql_postgresql_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSQLParameterType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLParameterType) ProtoMessage() {}

func (x *PostgreSQLParameterType) ProtoReflect() protoreflect.Message {
	mi := &file_postgresql_postgresql_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLParameterType.ProtoReflect.Descriptor instead.
func (*PostgreSQLParameterType) Descriptor() ([]byte, []int) {
	return file_postgresql_postgresql_proto_rawDescGZIP(), []int{8}
}

func (x *PostgreSQLParameterType) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *PostgreSQLParameterType) GetDataTypeId() int32 {
	if x != nil {
		return x.DataTypeId
	}
	return 0
}

func (x *PostgreSQLParameterType) GetDataTypeName() string {
	if x != nil {
		return x.DataTypeName
	}
	return ""
}

func (x *PostgreSQLParameterType) GetNullable() bool {
	if x != nil {
		return x.Nullable
	}
	return false
}

// Transaction context
type PostgreSQLTransaction struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TransactionId  string                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`                                                                  // Transaction identifier
	State          TransactionState       `protobuf:"varint,2,opt,name=state,proto3,enum=tusk.drift.instrumentation.postgresql.v1.TransactionState" json:"state,omitempty"`                                       // Current transaction state
	IsolationLevel IsolationLevel         `protobuf:"varint,3,opt,name=isolation_level,json=isolationLevel,proto3,enum=tusk.drift.instrumentation.postgresql.v1.IsolationLevel" json:"isolation_level,omitempty"` // Transaction isolation level
	ReadOnly       bool                   `protobuf:"varint,4,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`                                                                                // Whether transaction is read-only
	StartedAt      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`                                                                              // When transaction started
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PostgreSQLTransaction) Reset() {
	*x = PostgreSQLTransaction{}
	mi := &file_postgresql_postgresql_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSQLTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLTransaction) ProtoMessage() {}

func (x *PostgreSQLTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_postgresql_postgresql_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLTransaction.ProtoReflect.Descriptor instead.
func (*PostgreSQLTransaction) Descriptor() ([]byte, []int) {
	return file_postgresql_postgresql_proto_rawDescGZIP(), []int{9}
}

func (x *PostgreSQLTransaction) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *PostgreSQLTransaction) GetState() TransactionState {
	if x != nil {
		return x.State
	}
	return TransactionState_TRANSACTION_STATE_UNSPECIFIED
}

func (x *PostgreSQLTransaction) GetIsolationLevel() IsolationLevel {
	if x != nil {
		return x.IsolationLevel
	}
	return IsolationLevel_ISOLATION_LEVEL_UNSPECIFIED
}

func (x *PostgreSQLTransaction) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *PostgreSQLTransaction) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

// Batch query support
type PostgreSQLBatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Queries       []*PostgreSQLQuery     `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`                                   // Queries in the batch
	StopOnError   bool                   `protobuf:"varint,2,opt,name=stop_on_error,json=stopOnError,proto3" json:"stop_on_error,omitempty"`     // Whether to stop on first error
	ReturnResults bool                   `protobuf:"varint,3,opt,name=return_results,json=returnResults,proto3" json:"return_results,omitempty"` // Whether to return individual results
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostgreSQLBatch) Reset() {
	*x = PostgreSQLBatch{}
	mi := &file_postgresql_postgresql_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSQLBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLBatch) ProtoMessage() {}

func (x *PostgreSQLBatch) ProtoReflect() protoreflect.Message {
	mi := &file_postgresql_postgresql_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLBatch.ProtoReflect.Descriptor instead.
func (*PostgreSQLBatch) Descriptor() ([]byte, []int) {
	return file_postgresql_postgresql_proto_rawDescGZIP(), []int{10}
}

func (x *PostgreSQLBatch) GetQueries() []*PostgreSQLQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *PostgreSQLBatch) GetStopOnError() bool {
	if x != nil {
		return x.StopOnError
	}
	return false
}

func (x *PostgreSQLBatch) GetReturnResults() bool {
	if x != nil {
		return x.ReturnResults
	}
	return false
}

// Batch result
type PostgreSQLBatchResult struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Results           []*PostgreSQLResult    `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`                                               // Results for each query
	SuccessfulQueries int32                  `protobuf:"varint,2,opt,name=successful_queries,json=successfulQueries,proto3" json:"successful_queries,omitempty"` // Number of successful queries
	FailedQueries     int32                  `protobuf:"varint,3,opt,name=failed_queries,json=failedQueries,proto3" json:"failed_queries,omitempty"`             // Number of failed queries
	FirstError        *PostgreSQLError       `protobuf:"bytes,4,opt,name=first_error,json=firstError,proto3,oneof" json:"first_error,omitempty"`                 // First error encountered (if any)
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PostgreSQLBatchResult) Reset() {
	*x = PostgreSQLBatchResult{}
	mi := &file_postgresql_postgresql_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSQLBatchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLBatchResult) ProtoMessage() {}

func (x *PostgreSQLBatchResult) ProtoReflect() protoreflect.Message {
	mi := &file_postgresql_postgresql_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLBatchResult.ProtoReflect.Descriptor instead.
func (*PostgreSQLBatchResult) Descriptor() ([]byte, []int) {
	return file_postgresql_postgresql_proto_rawDescGZIP(), []int{11}
}

func (x *PostgreSQLBatchResult) GetResults() []*PostgreSQLResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *PostgreSQLBatchResult) GetSuccessfulQueries() int32 {
	if x != nil {
		return x.SuccessfulQueries
	}
	return 0
}

func (x *PostgreSQLBatchResult) GetFailedQueries() int32 {
	if x != nil {
		return x.FailedQueries
	}
	return 0
}

func (x *PostgreSQLBatchResult) GetFirstError() *PostgreSQLError {
	if x != nil {
		return x.FirstError
	}
	return nil
}

var File_postgresql_postgresql_proto protoreflect.FileDescriptor

const file_postgresql_postgresql_proto_rawDesc = "" +
	"\n" +
	"\x1bpostgresql/postgresql.proto\x12(tusk.drift.instrumentation.postgresql.v1\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xbd\x03\n" +
	"\x0fPostgreSQLQuery\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\x12\x16\n" +
	"\x06values\x18\x02 \x03(\tR\x06values\x12\x1f\n" +
	"\vclient_type\x18\x03 \x01(\tR\n" +
	"clientType\x12^\n" +
	"\n" +
	"connection\x18\x04 \x01(\v2>.tusk.drift.instrumentation.postgresql.v1.PostgreSQLConnectionR\n" +
	"connection\x12P\n" +
	"\aoptions\x18\x05 \x01(\v26.tusk.drift.instrumentation.postgresql.v1.QueryOptionsR\aoptions\x12\x19\n" +
	"\bquery_id\x18\x06 \x01(\tR\aqueryId\x12W\n" +
	"\x04tags\x18\a \x03(\v2C.tusk.drift.instrumentation.postgresql.v1.PostgreSQLQuery.TagsEntryR\x04tags\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x97\x02\n" +
	"\x14PostgreSQLConnection\x12#\n" +
	"\rdatabase_name\x18\x01 \x01(\tR\fdatabaseName\x12\x1a\n" +
	"\busername\x18\x02 \x01(\tR\busername\x12\x12\n" +
	"\x04host\x18\x03 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x04 \x01(\x05R\x04port\x12)\n" +
	"\x10application_name\x18\x05 \x01(\tR\x0fapplicationName\x12#\n" +
	"\rconnection_id\x18\x06 \x01(\tR\fconnectionId\x12\x1f\n" +
	"\vssl_enabled\x18\a \x01(\bR\n" +
	"sslEnabled\x12%\n" +
	"\x0eserver_version\x18\b \x01(\tR\rserverVersion\"\x92\x03\n" +
	"\fQueryOptions\x12+\n" +
	"\x11statement_timeout\x18\x01 \x01(\x05R\x10statementTimeout\x12#\n" +
	"\rquery_timeout\x18\x02 \x01(\x05R\fqueryTimeout\x12\x1f\n" +
	"\vbinary_mode\x18\x03 \x01(\bR\n" +
	"binaryMode\x12\x1f\n" +
	"\vcursor_name\x18\x04 \x01(\tR\n" +
	"cursorName\x12\x1d\n" +
	"\n" +
	"fetch_size\x18\x05 \x01(\x05R\tfetchSize\x12\x1b\n" +
	"\tread_only\x18\x06 \x01(\bR\breadOnly\x12p\n" +
	"\x0ecustom_options\x18\a \x03(\v2I.tusk.drift.instrumentation.postgresql.v1.QueryOptions.CustomOptionsEntryR\rcustomOptions\x1a@\n" +
	"\x12CustomOptionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xad\x03\n" +
	"\x10PostgreSQLResult\x12\x18\n" +
	"\acommand\x18\x01 \x01(\tR\acommand\x12\x1b\n" +
	"\trow_count\x18\x02 \x01(\x05R\browCount\x12\x15\n" +
	"\x03oid\x18\x03 \x01(\x05H\x00R\x03oid\x88\x01\x01\x12+\n" +
	"\x04rows\x18\x04 \x03(\v2\x17.google.protobuf.StructR\x04rows\x12Q\n" +
	"\x06fields\x18\x05 \x03(\v29.tusk.drift.instrumentation.postgresql.v1.PostgreSQLFieldR\x06fields\x12c\n" +
	"\x0eexecution_info\x18\x06 \x01(\v2<.tusk.drift.instrumentation.postgresql.v1.QueryExecutionInfoR\rexecutionInfo\x12T\n" +
	"\x05error\x18\a \x01(\v29.tusk.drift.instrumentation.postgresql.v1.PostgreSQLErrorH\x01R\x05error\x88\x01\x01B\x06\n" +
	"\x04_oidB\b\n" +
	"\x06_error\"\xce\x02\n" +
	"\x0fPostgreSQLField\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x19\n" +
	"\btable_id\x18\x02 \x01(\x05R\atableId\x12\x1b\n" +
	"\tcolumn_id\x18\x03 \x01(\x05R\bcolumnId\x12 \n" +
	"\fdata_type_id\x18\x04 \x01(\x05R\n" +
	"dataTypeId\x12$\n" +
	"\x0edata_type_size\x18\x05 \x01(\x05R\fdataTypeSize\x12,\n" +
	"\x12data_type_modifier\x18\x06 \x01(\x05R\x10dataTypeModifier\x12\x16\n" +
	"\x06format\x18\a \x01(\tR\x06format\x12$\n" +
	"\x0edata_type_name\x18\b \x01(\tR\fdataTypeName\x12\x1a\n" +
	"\bnullable\x18\t \x01(\bR\bnullable\x12\x1f\n" +
	"\vprimary_key\x18\n" +
	" \x01(\bR\n" +
	"primaryKey\"\xf7\x02\n" +
	"\x12QueryExecutionInfo\x12\"\n" +
	"\rparse_time_ms\x18\x01 \x01(\x03R\vparseTimeMs\x12 \n" +
	"\fplan_time_ms\x18\x02 \x01(\x03R\n" +
	"planTimeMs\x12&\n" +
	"\x0fexecute_time_ms\x18\x03 \x01(\x03R\rexecuteTimeMs\x12\"\n" +
	"\rtotal_time_ms\x18\x04 \x01(\x03R\vtotalTimeMs\x12#\n" +
	"\rrows_examined\x18\x05 \x01(\x03R\frowsExamined\x12#\n" +
	"\rrows_returned\x18\x06 \x01(\x03R\frowsReturned\x12\x1d\n" +
	"\n" +
	"bytes_sent\x18\a \x01(\x03R\tbytesSent\x12%\n" +
	"\x0ebytes_received\x18\b \x01(\x03R\rbytesReceived\x12%\n" +
	"\x0eexecution_plan\x18\t \x01(\tR\rexecutionPlan\x12\x18\n" +
	"\anotices\x18\n" +
	" \x03(\tR\anotices\"\x98\x03\n" +
	"\x0fPostgreSQLError\x12\x1b\n" +
	"\tsql_state\x18\x01 \x01(\tR\bsqlState\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x16\n" +
	"\x06detail\x18\x03 \x01(\tR\x06detail\x12\x12\n" +
	"\x04hint\x18\x04 \x01(\tR\x04hint\x12\x1a\n" +
	"\bposition\x18\x05 \x01(\tR\bposition\x12\x14\n" +
	"\x05where\x18\x06 \x01(\tR\x05where\x12\x1f\n" +
	"\vschema_name\x18\a \x01(\tR\n" +
	"schemaName\x12\x1d\n" +
	"\n" +
	"table_name\x18\b \x01(\tR\ttableName\x12\x1f\n" +
	"\vcolumn_name\x18\t \x01(\tR\n" +
	"columnName\x12'\n" +
	"\x0fconstraint_name\x18\n" +
	" \x01(\tR\x0econstraintName\x12$\n" +
	"\x0edata_type_name\x18\v \x01(\tR\fdataTypeName\x12\x12\n" +
	"\x04file\x18\f \x01(\tR\x04file\x12\x12\n" +
	"\x04line\x18\r \x01(\tR\x04line\x12\x18\n" +
	"\aroutine\x18\x0e \x01(\tR\aroutine\"\xb5\x02\n" +
	"\x1bPostgreSQLPreparedStatement\x12%\n" +
	"\x0estatement_name\x18\x01 \x01(\tR\rstatementName\x12\x1d\n" +
	"\n" +
	"query_text\x18\x02 \x01(\tR\tqueryText\x12j\n" +
	"\x0fparameter_types\x18\x03 \x03(\v2A.tusk.drift.instrumentation.postgresql.v1.PostgreSQLParameterTypeR\x0eparameterTypes\x12;\n" +
	"\vprepared_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"preparedAt\x12'\n" +
	"\x0fexecution_count\x18\x05 \x01(\x05R\x0eexecutionCount\"\x99\x01\n" +
	"\x17PostgreSQLParameterType\x12\x1a\n" +
	"\bposition\x18\x01 \x01(\x05R\bposition\x12 \n" +
	"\fdata_type_id\x18\x02 \x01(\x05R\n" +
	"dataTypeId\x12$\n" +
	"\x0edata_type_name\x18\x03 \x01(\tR\fdataTypeName\x12\x1a\n" +
	"\bnullable\x18\x04 \x01(\bR\bnullable\"\xcb\x02\n" +
	"\x15PostgreSQLTransaction\x12%\n" +
	"\x0etransaction_id\x18\x01 \x01(\tR\rtransactionId\x12P\n" +
	"\x05state\x18\x02 \x01(\x0e2:.tusk.drift.instrumentation.postgresql.v1.TransactionStateR\x05state\x12a\n" +
	"\x0fisolation_level\x18\x03 \x01(\x0e28.tusk.drift.instrumentation.postgresql.v1.IsolationLevelR\x0eisolationLevel\x12\x1b\n" +
	"\tread_only\x18\x04 \x01(\bR\breadOnly\x129\n" +
	"\n" +
	"started_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tstartedAt\"\xb1\x01\n" +
	"\x0fPostgreSQLBatch\x12S\n" +
	"\aqueries\x18\x01 \x03(\v29.tusk.drift.instrumentation.postgresql.v1.PostgreSQLQueryR\aqueries\x12\"\n" +
	"\rstop_on_error\x18\x02 \x01(\bR\vstopOnError\x12%\n" +
	"\x0ereturn_results\x18\x03 \x01(\bR\rreturnResults\"\xb4\x02\n" +
	"\x15PostgreSQLBatchResult\x12T\n" +
	"\aresults\x18\x01 \x03(\v2:.tusk.drift.instrumentation.postgresql.v1.PostgreSQLResultR\aresults\x12-\n" +
	"\x12successful_queries\x18\x02 \x01(\x05R\x11successfulQueries\x12%\n" +
	"\x0efailed_queries\x18\x03 \x01(\x05R\rfailedQueries\x12_\n" +
	"\vfirst_error\x18\x04 \x01(\v29.tusk.drift.instrumentation.postgresql.v1.PostgreSQLErrorH\x00R\n" +
	"firstError\x88\x01\x01B\x0e\n" +
	"\f_first_error*\xcc\x01\n" +
	"\x10TransactionState\x12!\n" +
	"\x1dTRANSACTION_STATE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16TRANSACTION_STATE_IDLE\x10\x01\x12\x1c\n" +
	"\x18TRANSACTION_STATE_ACTIVE\x10\x02\x12)\n" +
	"%TRANSACTION_STATE_IDLE_IN_TRANSACTION\x10\x03\x120\n" +
	",TRANSACTION_STATE_IDLE_IN_FAILED_TRANSACTION\x10\x04*\xc2\x01\n" +
	"\x0eIsolationLevel\x12\x1f\n" +
	"\x1bISOLATION_LEVEL_UNSPECIFIED\x10\x00\x12$\n" +
	" ISOLATION_LEVEL_READ_UNCOMMITTED\x10\x01\x12\"\n" +
	"\x1eISOLATION_LEVEL_READ_COMMITTED\x10\x02\x12#\n" +
	"\x1fISOLATION_LEVEL_REPEATABLE_READ\x10\x03\x12 \n" +
	"\x1cISOLATION_LEVEL_SERIALIZABLE\x10\x04B\xd1\x02\n" +
	",com.tusk.drift.instrumentation.postgresql.v1B\x0fPostgresqlProtoP\x01ZKgithub.com/Use-Tusk/tusk-drift-schemas/generated/go/postgresql;postgresqlv1\xa2\x02\x04TDIP\xaa\x02(Tusk.Drift.Instrumentation.Postgresql.V1\xca\x02(Tusk\\Drift\\Instrumentation\\Postgresql\\V1\xe2\x024Tusk\\Drift\\Instrumentation\\Postgresql\\V1\\GPBMetadata\xea\x02,Tusk::Drift::Instrumentation::Postgresql::V1b\x06proto3"

var (
	file_postgresql_postgresql_proto_rawDescOnce sync.Once
	file_postgresql_postgresql_proto_rawDescData []byte
)

func file_postgresql_postgresql_proto_rawDescGZIP() []byte {
	file_postgresql_postgresql_proto_rawDescOnce.Do(func() {
		file_postgresql_postgresql_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_postgresql_postgresql_proto_rawDesc), len(file_postgresql_postgresql_proto_rawDesc)))
	})
	return file_postgresql_postgresql_proto_rawDescData
}

var file_postgresql_postgresql_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_postgresql_postgresql_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_postgresql_postgresql_proto_goTypes = []any{
	(TransactionState)(0),               // 0: tusk.drift.instrumentation.postgresql.v1.TransactionState
	(IsolationLevel)(0),                 // 1: tusk.drift.instrumentation.postgresql.v1.IsolationLevel
	(*PostgreSQLQuery)(nil),             // 2: tusk.drift.instrumentation.postgresql.v1.PostgreSQLQuery
	(*PostgreSQLConnection)(nil),        // 3: tusk.drift.instrumentation.postgresql.v1.PostgreSQLConnection
	(*QueryOptions)(nil),                // 4: tusk.drift.instrumentation.postgresql.v1.QueryOptions
	(*PostgreSQLResult)(nil),            // 5: tusk.drift.instrumentation.postgresql.v1.PostgreSQLResult
	(*PostgreSQLField)(nil),             // 6: tusk.drift.instrumentation.postgresql.v1.PostgreSQLField
	(*QueryExecutionInfo)(nil),          // 7: tusk.drift.instrumentation.postgresql.v1.QueryExecutionInfo
	(*PostgreSQLError)(nil),             // 8: tusk.drift.instrumentation.postgresql.v1.PostgreSQLError
	(*PostgreSQLPreparedStatement)(nil), // 9: tusk.drift.instrumentation.postgresql.v1.PostgreSQLPreparedStatement
	(*PostgreSQLParameterType)(nil),     // 10: tusk.drift.instrumentation.postgresql.v1.PostgreSQLParameterType
	(*PostgreSQLTransaction)(nil),       // 11: tusk.drift.instrumentation.postgresql.v1.PostgreSQLTransaction
	(*PostgreSQLBatch)(nil),             // 12: tusk.drift.instrumentation.postgresql.v1.PostgreSQLBatch
	(*PostgreSQLBatchResult)(nil),       // 13: tusk.drift.instrumentation.postgresql.v1.PostgreSQLBatchResult
	nil,                                 // 14: tusk.drift.instrumentation.postgresql.v1.PostgreSQLQuery.TagsEntry
	nil,                                 // 15: tusk.drift.instrumentation.postgresql.v1.QueryOptions.CustomOptionsEntry
	(*structpb.Struct)(nil),             // 16: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil),       // 17: google.protobuf.Timestamp
}
var file_postgresql_postgresql_proto_depIdxs = []int32{
	3,  // 0: tusk.drift.instrumentation.postgresql.v1.PostgreSQLQuery.connection:type_name -> tusk.drift.instrumentation.postgresql.v1.PostgreSQLConnection
	4,  // 1: tusk.drift.instrumentation.postgresql.v1.PostgreSQLQuery.options:type_name -> tusk.drift.instrumentation.postgresql.v1.QueryOptions
	14, // 2: tusk.drift.instrumentation.postgresql.v1.PostgreSQLQuery.tags:type_name -> tusk.drift.instrumentation.postgresql.v1.PostgreSQLQuery.TagsEntry
	15, // 3: tusk.drift.instrumentation.postgresql.v1.QueryOptions.custom_options:type_name -> tusk.drift.instrumentation.postgresql.v1.QueryOptions.CustomOptionsEntry
	16, // 4: tusk.drift.instrumentation.postgresql.v1.PostgreSQLResult.rows:type_name -> google.protobuf.Struct
	6,  // 5: tusk.drift.instrumentation.postgresql.v1.PostgreSQLResult.fields:type_name -> tusk.drift.instrumentation.postgresql.v1.PostgreSQLField
	7,  // 6: tusk.drift.instrumentation.postgresql.v1.PostgreSQLResult.execution_info:type_name -> tusk.drift.instrumentation.postgresql.v1.QueryExecutionInfo
	8,  // 7: tusk.drift.instrumentation.postgresql.v1.PostgreSQLResult.error:type_name -> tusk.drift.instrumentation.postgresql.v1.PostgreSQLError
	10, // 8: tusk.drift.instrumentation.postgresql.v1.PostgreSQLPreparedStatement.parameter_types:type_name -> tusk.drift.instrumentation.postgresql.v1.PostgreSQLParameterType
	17, // 9: tusk.drift.instrumentation.postgresql.v1.PostgreSQLPreparedStatement.prepared_at:type_name -> google.protobuf.Timestamp
	0,  // 10: tusk.drift.instrumentation.postgresql.v1.PostgreSQLTransaction.state:type_name -> tusk.drift.instrumentation.postgresql.v1.TransactionState
	1,  // 11: tusk.drift.instrumentation.postgresql.v1.PostgreSQLTransaction.isolation_level:type_name -> tusk.drift.instrumentation.postgresql.v1.IsolationLevel
	17, // 12: tusk.drift.instrumentation.postgresql.v1.PostgreSQLTransaction.started_at:type_name -> google.protobuf.Timestamp
	2,  // 13: tusk.drift.instrumentation.postgresql.v1.PostgreSQLBatch.queries:type_name -> tusk.drift.instrumentation.postgresql.v1.PostgreSQLQuery
	5,  // 14: tusk.drift.instrumentation.postgresql.v1.PostgreSQLBatchResult.results:type_name -> tusk.drift.instrumentation.postgresql.v1.PostgreSQLResult
	8,  // 15: tusk.drift.instrumentation.postgresql.v1.PostgreSQLBatchResult.first_error:type_name -> tusk.drift.instrumentation.postgresql.v1.PostgreSQLError
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_postgresql_postgresql_proto_init() }
func file_postgresql_postgresql_proto_init() {
	if File_postgresql_postgresql_proto != nil {
		return
	}
	file_postgresql_postgresql_proto_msgTypes[3].OneofWrappers = []any{}
	file_postgresql_postgresql_proto_msgTypes[11].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_postgresql_postgresql_proto_rawDesc), len(file_postgresql_postgresql_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_postgresql_postgresql_proto_goTypes,
		DependencyIndexes: file_postgresql_postgresql_proto_depIdxs,
		EnumInfos:         file_postgresql_postgresql_proto_enumTypes,
		MessageInfos:      file_postgresql_postgresql_proto_msgTypes,
	}.Build()
	File_postgresql_postgresql_proto = out.File
	file_postgresql_postgresql_proto_goTypes = nil
	file_postgresql_postgresql_proto_depIdxs = nil
}
