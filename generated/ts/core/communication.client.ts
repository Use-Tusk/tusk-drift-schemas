// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "core/communication.proto" (package "tusk.drift.core.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { MockService } from "./communication";
import type { SendInboundSpanForReplayResponse } from "./communication";
import type { SendInboundSpanForReplayRequest } from "./communication";
import type { GetMockResponse } from "./communication";
import type { GetMockRequest } from "./communication";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ConnectResponse } from "./communication";
import type { ConnectRequest } from "./communication";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Generic protocol between CLI and SDK - completely instrumentation-agnostic
 *
 * @generated from protobuf service tusk.drift.core.v1.MockService
 */
export interface IMockServiceClient {
    /**
     * @generated from protobuf rpc: Connect
     */
    connect(input: ConnectRequest, options?: RpcOptions): UnaryCall<ConnectRequest, ConnectResponse>;
    /**
     * @generated from protobuf rpc: GetMock
     */
    getMock(input: GetMockRequest, options?: RpcOptions): UnaryCall<GetMockRequest, GetMockResponse>;
    /**
     * @generated from protobuf rpc: SendInboundSpanForReplay
     */
    sendInboundSpanForReplay(input: SendInboundSpanForReplayRequest, options?: RpcOptions): UnaryCall<SendInboundSpanForReplayRequest, SendInboundSpanForReplayResponse>;
}
/**
 * Generic protocol between CLI and SDK - completely instrumentation-agnostic
 *
 * @generated from protobuf service tusk.drift.core.v1.MockService
 */
export class MockServiceClient implements IMockServiceClient, ServiceInfo {
    typeName = MockService.typeName;
    methods = MockService.methods;
    options = MockService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Connect
     */
    connect(input: ConnectRequest, options?: RpcOptions): UnaryCall<ConnectRequest, ConnectResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ConnectRequest, ConnectResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetMock
     */
    getMock(input: GetMockRequest, options?: RpcOptions): UnaryCall<GetMockRequest, GetMockResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetMockRequest, GetMockResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendInboundSpanForReplay
     */
    sendInboundSpanForReplay(input: SendInboundSpanForReplayRequest, options?: RpcOptions): UnaryCall<SendInboundSpanForReplayRequest, SendInboundSpanForReplayResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendInboundSpanForReplayRequest, SendInboundSpanForReplayResponse>("unary", this._transport, method, opt, input);
    }
}
