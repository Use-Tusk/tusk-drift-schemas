// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "core/communication.proto" (package "tusk.drift.core.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType as MessageType$ } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
import { Span } from "./span";
import { Struct } from "../google/protobuf/struct";
/**
 * SDK connection handshake
 *
 * @generated from protobuf message tusk.drift.core.v1.ConnectRequest
 */
export interface ConnectRequest {
    /**
     * @generated from protobuf field: string service_id = 1
     */
    serviceId: string;
    /**
     * @generated from protobuf field: string sdk_version = 2
     */
    sdkVersion: string;
    /**
     * @generated from protobuf field: string min_cli_version = 3
     */
    minCliVersion: string;
    /**
     * @generated from protobuf field: google.protobuf.Struct metadata = 4
     */
    metadata?: Struct; // Additional metadata (JSON-serializable)
}
/**
 * @generated from protobuf message tusk.drift.core.v1.ConnectResponse
 */
export interface ConnectResponse {
    /**
     * @generated from protobuf field: bool success = 1
     */
    success: boolean;
    /**
     * @generated from protobuf field: string error = 2
     */
    error: string;
}
/**
 * @generated from protobuf message tusk.drift.core.v1.GetMockRequest
 */
export interface GetMockRequest {
    /**
     * @generated from protobuf field: string request_id = 1
     */
    requestId: string; // For async correlation (used in CLI)
    /**
     * @generated from protobuf field: string test_id = 2
     */
    testId: string; // Trace/test identifier
    /**
     * @generated from protobuf field: tusk.drift.core.v1.Span outbound_span = 3
     */
    outboundSpan?: Span;
    /**
     * @generated from protobuf field: string stack_trace = 4
     */
    stackTrace: string;
    /**
     * @generated from protobuf field: string operation = 5
     */
    operation: string; // "GET", "query", "execute", "get", etc.
    /**
     * @generated from protobuf field: map<string, string> tags = 6
     */
    tags: {
        [key: string]: string;
    }; // Generic key-value metadata
    /**
     * @generated from protobuf field: google.protobuf.Timestamp requested_at = 7
     */
    requestedAt?: Timestamp;
}
/**
 * @generated from protobuf message tusk.drift.core.v1.GetMockResponse
 */
export interface GetMockResponse {
    /**
     * @generated from protobuf field: string request_id = 1
     */
    requestId: string; // Correlate with request
    /**
     * @generated from protobuf field: bool found = 2
     */
    found: boolean; // Whether mock was found
    /**
     * Opaque response data - CLI returns as-is from stored spans
     *
     * @generated from protobuf field: google.protobuf.Struct response_data = 3
     */
    responseData?: Struct; // Response payload
    /**
     * @generated from protobuf field: google.protobuf.Struct metadata = 4
     */
    metadata?: Struct; // Response metadata (headers, status, etc.)
    /**
     * Error information
     *
     * @generated from protobuf field: string error = 5
     */
    error: string; // Error message if not found
    /**
     * @generated from protobuf field: string error_code = 6
     */
    errorCode: string; // Error classification
    /**
     * Mock metadata
     *
     * @generated from protobuf field: string matched_span_id = 7
     */
    matchedSpanId: string; // Which span was matched
    /**
     * @generated from protobuf field: google.protobuf.Timestamp matched_at = 8
     */
    matchedAt?: Timestamp; // When the match occurred
}
/**
 * Message types for the Unix socket protocol
 *
 * @generated from protobuf message tusk.drift.core.v1.SDKMessage
 */
export interface SDKMessage {
    /**
     * @generated from protobuf field: tusk.drift.core.v1.MessageType type = 1
     */
    type: MessageType;
    /**
     * @generated from protobuf field: string request_id = 2
     */
    requestId: string;
    /**
     * @generated from protobuf oneof: payload
     */
    payload: {
        oneofKind: "connectRequest";
        /**
         * @generated from protobuf field: tusk.drift.core.v1.ConnectRequest connect_request = 3
         */
        connectRequest: ConnectRequest;
    } | {
        oneofKind: "getMockRequest";
        /**
         * @generated from protobuf field: tusk.drift.core.v1.GetMockRequest get_mock_request = 4
         */
        getMockRequest: GetMockRequest;
    } | {
        oneofKind: "sendInboundSpanForReplayRequest";
        /**
         * @generated from protobuf field: tusk.drift.core.v1.SendInboundSpanForReplayRequest send_inbound_span_for_replay_request = 5
         */
        sendInboundSpanForReplayRequest: SendInboundSpanForReplayRequest;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message tusk.drift.core.v1.CLIMessage
 */
export interface CLIMessage {
    /**
     * @generated from protobuf field: tusk.drift.core.v1.MessageType type = 1
     */
    type: MessageType;
    /**
     * @generated from protobuf field: string request_id = 2
     */
    requestId: string;
    /**
     * @generated from protobuf oneof: payload
     */
    payload: {
        oneofKind: "connectResponse";
        /**
         * @generated from protobuf field: tusk.drift.core.v1.ConnectResponse connect_response = 3
         */
        connectResponse: ConnectResponse;
    } | {
        oneofKind: "getMockResponse";
        /**
         * @generated from protobuf field: tusk.drift.core.v1.GetMockResponse get_mock_response = 4
         */
        getMockResponse: GetMockResponse;
    } | {
        oneofKind: "sendInboundSpanForReplayResponse";
        /**
         * @generated from protobuf field: tusk.drift.core.v1.SendInboundSpanForReplayResponse send_inbound_span_for_replay_response = 5
         */
        sendInboundSpanForReplayResponse: SendInboundSpanForReplayResponse;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message tusk.drift.core.v1.SendInboundSpanForReplayRequest
 */
export interface SendInboundSpanForReplayRequest {
    /**
     * @generated from protobuf field: tusk.drift.core.v1.Span span = 1
     */
    span?: Span;
}
/**
 * @generated from protobuf message tusk.drift.core.v1.SendInboundSpanForReplayResponse
 */
export interface SendInboundSpanForReplayResponse {
    /**
     * @generated from protobuf field: bool success = 1
     */
    success: boolean;
}
/**
 * @generated from protobuf enum tusk.drift.core.v1.MessageType
 */
export enum MessageType {
    /**
     * @generated from protobuf enum value: MESSAGE_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: MESSAGE_TYPE_SDK_CONNECT = 1;
     */
    SDK_CONNECT = 1,
    /**
     * @generated from protobuf enum value: MESSAGE_TYPE_MOCK_REQUEST = 2;
     */
    MOCK_REQUEST = 2,
    /**
     * @generated from protobuf enum value: MESSAGE_TYPE_INBOUND_SPAN = 3;
     */
    INBOUND_SPAN = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class ConnectRequest$Type extends MessageType$<ConnectRequest> {
    constructor() {
        super("tusk.drift.core.v1.ConnectRequest", [
            { no: 1, name: "service_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sdk_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "min_cli_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "metadata", kind: "message", T: () => Struct }
        ]);
    }
    create(value?: PartialMessage<ConnectRequest>): ConnectRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceId = "";
        message.sdkVersion = "";
        message.minCliVersion = "";
        if (value !== undefined)
            reflectionMergePartial<ConnectRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectRequest): ConnectRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_id */ 1:
                    message.serviceId = reader.string();
                    break;
                case /* string sdk_version */ 2:
                    message.sdkVersion = reader.string();
                    break;
                case /* string min_cli_version */ 3:
                    message.minCliVersion = reader.string();
                    break;
                case /* google.protobuf.Struct metadata */ 4:
                    message.metadata = Struct.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConnectRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_id = 1; */
        if (message.serviceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceId);
        /* string sdk_version = 2; */
        if (message.sdkVersion !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sdkVersion);
        /* string min_cli_version = 3; */
        if (message.minCliVersion !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.minCliVersion);
        /* google.protobuf.Struct metadata = 4; */
        if (message.metadata)
            Struct.internalBinaryWrite(message.metadata, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.core.v1.ConnectRequest
 */
export const ConnectRequest = new ConnectRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConnectResponse$Type extends MessageType$<ConnectResponse> {
    constructor() {
        super("tusk.drift.core.v1.ConnectResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ConnectResponse>): ConnectResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        message.error = "";
        if (value !== undefined)
            reflectionMergePartial<ConnectResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectResponse): ConnectResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string error */ 2:
                    message.error = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConnectResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string error = 2; */
        if (message.error !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.core.v1.ConnectResponse
 */
export const ConnectResponse = new ConnectResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMockRequest$Type extends MessageType$<GetMockRequest> {
    constructor() {
        super("tusk.drift.core.v1.GetMockRequest", [
            { no: 1, name: "request_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "test_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "outbound_span", kind: "message", T: () => Span },
            { no: 4, name: "stack_trace", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "operation", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "tags", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 7, name: "requested_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<GetMockRequest>): GetMockRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requestId = "";
        message.testId = "";
        message.stackTrace = "";
        message.operation = "";
        message.tags = {};
        if (value !== undefined)
            reflectionMergePartial<GetMockRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMockRequest): GetMockRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string request_id */ 1:
                    message.requestId = reader.string();
                    break;
                case /* string test_id */ 2:
                    message.testId = reader.string();
                    break;
                case /* tusk.drift.core.v1.Span outbound_span */ 3:
                    message.outboundSpan = Span.internalBinaryRead(reader, reader.uint32(), options, message.outboundSpan);
                    break;
                case /* string stack_trace */ 4:
                    message.stackTrace = reader.string();
                    break;
                case /* string operation */ 5:
                    message.operation = reader.string();
                    break;
                case /* map<string, string> tags */ 6:
                    this.binaryReadMap6(message.tags, reader, options);
                    break;
                case /* google.protobuf.Timestamp requested_at */ 7:
                    message.requestedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.requestedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap6(map: GetMockRequest["tags"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GetMockRequest["tags"] | undefined, val: GetMockRequest["tags"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for tusk.drift.core.v1.GetMockRequest.tags");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: GetMockRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string request_id = 1; */
        if (message.requestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.requestId);
        /* string test_id = 2; */
        if (message.testId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.testId);
        /* tusk.drift.core.v1.Span outbound_span = 3; */
        if (message.outboundSpan)
            Span.internalBinaryWrite(message.outboundSpan, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string stack_trace = 4; */
        if (message.stackTrace !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.stackTrace);
        /* string operation = 5; */
        if (message.operation !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.operation);
        /* map<string, string> tags = 6; */
        for (let k of globalThis.Object.keys(message.tags))
            writer.tag(6, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.tags[k]).join();
        /* google.protobuf.Timestamp requested_at = 7; */
        if (message.requestedAt)
            Timestamp.internalBinaryWrite(message.requestedAt, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.core.v1.GetMockRequest
 */
export const GetMockRequest = new GetMockRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMockResponse$Type extends MessageType$<GetMockResponse> {
    constructor() {
        super("tusk.drift.core.v1.GetMockResponse", [
            { no: 1, name: "request_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "found", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "response_data", kind: "message", T: () => Struct },
            { no: 4, name: "metadata", kind: "message", T: () => Struct },
            { no: 5, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "error_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "matched_span_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "matched_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<GetMockResponse>): GetMockResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requestId = "";
        message.found = false;
        message.error = "";
        message.errorCode = "";
        message.matchedSpanId = "";
        if (value !== undefined)
            reflectionMergePartial<GetMockResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMockResponse): GetMockResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string request_id */ 1:
                    message.requestId = reader.string();
                    break;
                case /* bool found */ 2:
                    message.found = reader.bool();
                    break;
                case /* google.protobuf.Struct response_data */ 3:
                    message.responseData = Struct.internalBinaryRead(reader, reader.uint32(), options, message.responseData);
                    break;
                case /* google.protobuf.Struct metadata */ 4:
                    message.metadata = Struct.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* string error */ 5:
                    message.error = reader.string();
                    break;
                case /* string error_code */ 6:
                    message.errorCode = reader.string();
                    break;
                case /* string matched_span_id */ 7:
                    message.matchedSpanId = reader.string();
                    break;
                case /* google.protobuf.Timestamp matched_at */ 8:
                    message.matchedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.matchedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMockResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string request_id = 1; */
        if (message.requestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.requestId);
        /* bool found = 2; */
        if (message.found !== false)
            writer.tag(2, WireType.Varint).bool(message.found);
        /* google.protobuf.Struct response_data = 3; */
        if (message.responseData)
            Struct.internalBinaryWrite(message.responseData, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Struct metadata = 4; */
        if (message.metadata)
            Struct.internalBinaryWrite(message.metadata, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string error = 5; */
        if (message.error !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.error);
        /* string error_code = 6; */
        if (message.errorCode !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.errorCode);
        /* string matched_span_id = 7; */
        if (message.matchedSpanId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.matchedSpanId);
        /* google.protobuf.Timestamp matched_at = 8; */
        if (message.matchedAt)
            Timestamp.internalBinaryWrite(message.matchedAt, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.core.v1.GetMockResponse
 */
export const GetMockResponse = new GetMockResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SDKMessage$Type extends MessageType$<SDKMessage> {
    constructor() {
        super("tusk.drift.core.v1.SDKMessage", [
            { no: 1, name: "type", kind: "enum", T: () => ["tusk.drift.core.v1.MessageType", MessageType, "MESSAGE_TYPE_"] },
            { no: 2, name: "request_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "connect_request", kind: "message", oneof: "payload", T: () => ConnectRequest },
            { no: 4, name: "get_mock_request", kind: "message", oneof: "payload", T: () => GetMockRequest },
            { no: 5, name: "send_inbound_span_for_replay_request", kind: "message", oneof: "payload", T: () => SendInboundSpanForReplayRequest }
        ]);
    }
    create(value?: PartialMessage<SDKMessage>): SDKMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        message.requestId = "";
        message.payload = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<SDKMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SDKMessage): SDKMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tusk.drift.core.v1.MessageType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string request_id */ 2:
                    message.requestId = reader.string();
                    break;
                case /* tusk.drift.core.v1.ConnectRequest connect_request */ 3:
                    message.payload = {
                        oneofKind: "connectRequest",
                        connectRequest: ConnectRequest.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).connectRequest)
                    };
                    break;
                case /* tusk.drift.core.v1.GetMockRequest get_mock_request */ 4:
                    message.payload = {
                        oneofKind: "getMockRequest",
                        getMockRequest: GetMockRequest.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).getMockRequest)
                    };
                    break;
                case /* tusk.drift.core.v1.SendInboundSpanForReplayRequest send_inbound_span_for_replay_request */ 5:
                    message.payload = {
                        oneofKind: "sendInboundSpanForReplayRequest",
                        sendInboundSpanForReplayRequest: SendInboundSpanForReplayRequest.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).sendInboundSpanForReplayRequest)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SDKMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tusk.drift.core.v1.MessageType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string request_id = 2; */
        if (message.requestId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.requestId);
        /* tusk.drift.core.v1.ConnectRequest connect_request = 3; */
        if (message.payload.oneofKind === "connectRequest")
            ConnectRequest.internalBinaryWrite(message.payload.connectRequest, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* tusk.drift.core.v1.GetMockRequest get_mock_request = 4; */
        if (message.payload.oneofKind === "getMockRequest")
            GetMockRequest.internalBinaryWrite(message.payload.getMockRequest, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* tusk.drift.core.v1.SendInboundSpanForReplayRequest send_inbound_span_for_replay_request = 5; */
        if (message.payload.oneofKind === "sendInboundSpanForReplayRequest")
            SendInboundSpanForReplayRequest.internalBinaryWrite(message.payload.sendInboundSpanForReplayRequest, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.core.v1.SDKMessage
 */
export const SDKMessage = new SDKMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CLIMessage$Type extends MessageType$<CLIMessage> {
    constructor() {
        super("tusk.drift.core.v1.CLIMessage", [
            { no: 1, name: "type", kind: "enum", T: () => ["tusk.drift.core.v1.MessageType", MessageType, "MESSAGE_TYPE_"] },
            { no: 2, name: "request_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "connect_response", kind: "message", oneof: "payload", T: () => ConnectResponse },
            { no: 4, name: "get_mock_response", kind: "message", oneof: "payload", T: () => GetMockResponse },
            { no: 5, name: "send_inbound_span_for_replay_response", kind: "message", oneof: "payload", T: () => SendInboundSpanForReplayResponse }
        ]);
    }
    create(value?: PartialMessage<CLIMessage>): CLIMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        message.requestId = "";
        message.payload = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<CLIMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CLIMessage): CLIMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tusk.drift.core.v1.MessageType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string request_id */ 2:
                    message.requestId = reader.string();
                    break;
                case /* tusk.drift.core.v1.ConnectResponse connect_response */ 3:
                    message.payload = {
                        oneofKind: "connectResponse",
                        connectResponse: ConnectResponse.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).connectResponse)
                    };
                    break;
                case /* tusk.drift.core.v1.GetMockResponse get_mock_response */ 4:
                    message.payload = {
                        oneofKind: "getMockResponse",
                        getMockResponse: GetMockResponse.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).getMockResponse)
                    };
                    break;
                case /* tusk.drift.core.v1.SendInboundSpanForReplayResponse send_inbound_span_for_replay_response */ 5:
                    message.payload = {
                        oneofKind: "sendInboundSpanForReplayResponse",
                        sendInboundSpanForReplayResponse: SendInboundSpanForReplayResponse.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).sendInboundSpanForReplayResponse)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CLIMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tusk.drift.core.v1.MessageType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string request_id = 2; */
        if (message.requestId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.requestId);
        /* tusk.drift.core.v1.ConnectResponse connect_response = 3; */
        if (message.payload.oneofKind === "connectResponse")
            ConnectResponse.internalBinaryWrite(message.payload.connectResponse, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* tusk.drift.core.v1.GetMockResponse get_mock_response = 4; */
        if (message.payload.oneofKind === "getMockResponse")
            GetMockResponse.internalBinaryWrite(message.payload.getMockResponse, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* tusk.drift.core.v1.SendInboundSpanForReplayResponse send_inbound_span_for_replay_response = 5; */
        if (message.payload.oneofKind === "sendInboundSpanForReplayResponse")
            SendInboundSpanForReplayResponse.internalBinaryWrite(message.payload.sendInboundSpanForReplayResponse, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.core.v1.CLIMessage
 */
export const CLIMessage = new CLIMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendInboundSpanForReplayRequest$Type extends MessageType$<SendInboundSpanForReplayRequest> {
    constructor() {
        super("tusk.drift.core.v1.SendInboundSpanForReplayRequest", [
            { no: 1, name: "span", kind: "message", T: () => Span }
        ]);
    }
    create(value?: PartialMessage<SendInboundSpanForReplayRequest>): SendInboundSpanForReplayRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SendInboundSpanForReplayRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendInboundSpanForReplayRequest): SendInboundSpanForReplayRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tusk.drift.core.v1.Span span */ 1:
                    message.span = Span.internalBinaryRead(reader, reader.uint32(), options, message.span);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendInboundSpanForReplayRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tusk.drift.core.v1.Span span = 1; */
        if (message.span)
            Span.internalBinaryWrite(message.span, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.core.v1.SendInboundSpanForReplayRequest
 */
export const SendInboundSpanForReplayRequest = new SendInboundSpanForReplayRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendInboundSpanForReplayResponse$Type extends MessageType$<SendInboundSpanForReplayResponse> {
    constructor() {
        super("tusk.drift.core.v1.SendInboundSpanForReplayResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SendInboundSpanForReplayResponse>): SendInboundSpanForReplayResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<SendInboundSpanForReplayResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendInboundSpanForReplayResponse): SendInboundSpanForReplayResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendInboundSpanForReplayResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.core.v1.SendInboundSpanForReplayResponse
 */
export const SendInboundSpanForReplayResponse = new SendInboundSpanForReplayResponse$Type();
/**
 * @generated ServiceType for protobuf service tusk.drift.core.v1.MockService
 */
export const MockService = new ServiceType("tusk.drift.core.v1.MockService", [
    { name: "Connect", options: {}, I: ConnectRequest, O: ConnectResponse },
    { name: "GetMock", options: {}, I: GetMockRequest, O: GetMockResponse },
    { name: "SendInboundSpanForReplay", options: {}, I: SendInboundSpanForReplayRequest, O: SendInboundSpanForReplayResponse }
]);
