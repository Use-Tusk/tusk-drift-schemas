// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "backend/onboarding_service.proto" (package "tusk.drift.backend.v1", syntax proto3)
// tslint:disable
import { ServiceType as ServiceType$ } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message tusk.drift.backend.v1.CreateObservableServiceRequest
 */
export interface CreateObservableServiceRequest {
    /**
     * @generated from protobuf field: string repo_owner_name = 1
     */
    repoOwnerName: string;
    /**
     * @generated from protobuf field: string repo_name = 2
     */
    repoName: string;
    /**
     * @generated from protobuf field: tusk.drift.backend.v1.ServiceType service_type = 3
     */
    serviceType: ServiceType;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.CreateObservableServiceResponse
 */
export interface CreateObservableServiceResponse {
    /**
     * @generated from protobuf field: string observable_service_id = 1
     */
    observableServiceId: string;
}
/**
 * @generated from protobuf enum tusk.drift.backend.v1.ServiceType
 */
export enum ServiceType {
    /**
     * @generated from protobuf enum value: SERVICE_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: SERVICE_TYPE_NODE = 1;
     */
    NODE = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateObservableServiceRequest$Type extends MessageType<CreateObservableServiceRequest> {
    constructor() {
        super("tusk.drift.backend.v1.CreateObservableServiceRequest", [
            { no: 1, name: "repo_owner_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "repo_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "service_type", kind: "enum", T: () => ["tusk.drift.backend.v1.ServiceType", ServiceType, "SERVICE_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<CreateObservableServiceRequest>): CreateObservableServiceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.repoOwnerName = "";
        message.repoName = "";
        message.serviceType = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateObservableServiceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateObservableServiceRequest): CreateObservableServiceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string repo_owner_name */ 1:
                    message.repoOwnerName = reader.string();
                    break;
                case /* string repo_name */ 2:
                    message.repoName = reader.string();
                    break;
                case /* tusk.drift.backend.v1.ServiceType service_type */ 3:
                    message.serviceType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateObservableServiceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string repo_owner_name = 1; */
        if (message.repoOwnerName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.repoOwnerName);
        /* string repo_name = 2; */
        if (message.repoName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.repoName);
        /* tusk.drift.backend.v1.ServiceType service_type = 3; */
        if (message.serviceType !== 0)
            writer.tag(3, WireType.Varint).int32(message.serviceType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.CreateObservableServiceRequest
 */
export const CreateObservableServiceRequest = new CreateObservableServiceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateObservableServiceResponse$Type extends MessageType<CreateObservableServiceResponse> {
    constructor() {
        super("tusk.drift.backend.v1.CreateObservableServiceResponse", [
            { no: 1, name: "observable_service_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateObservableServiceResponse>): CreateObservableServiceResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.observableServiceId = "";
        if (value !== undefined)
            reflectionMergePartial<CreateObservableServiceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateObservableServiceResponse): CreateObservableServiceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string observable_service_id */ 1:
                    message.observableServiceId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateObservableServiceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string observable_service_id = 1; */
        if (message.observableServiceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.observableServiceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.CreateObservableServiceResponse
 */
export const CreateObservableServiceResponse = new CreateObservableServiceResponse$Type();
/**
 * @generated ServiceType for protobuf service tusk.drift.backend.v1.OnboardingService
 */
export const OnboardingService = new ServiceType$("tusk.drift.backend.v1.OnboardingService", [
    { name: "CreateObservableService", options: {}, I: CreateObservableServiceRequest, O: CreateObservableServiceResponse }
]);
