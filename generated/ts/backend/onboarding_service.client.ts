// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "backend/onboarding_service.proto" (package "tusk.drift.backend.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { OnboardingService } from "./onboarding_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateObservableServiceResponse } from "./onboarding_service";
import type { CreateObservableServiceRequest } from "./onboarding_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * TODO: Maybe rename this to `ClientService`? bc it could contain methods to get client info, user info, etc.
 *
 * @generated from protobuf service tusk.drift.backend.v1.OnboardingService
 */
export interface IOnboardingServiceClient {
    /**
     * @generated from protobuf rpc: CreateObservableService
     */
    createObservableService(input: CreateObservableServiceRequest, options?: RpcOptions): UnaryCall<CreateObservableServiceRequest, CreateObservableServiceResponse>;
}
/**
 * TODO: Maybe rename this to `ClientService`? bc it could contain methods to get client info, user info, etc.
 *
 * @generated from protobuf service tusk.drift.backend.v1.OnboardingService
 */
export class OnboardingServiceClient implements IOnboardingServiceClient, ServiceInfo {
    typeName = OnboardingService.typeName;
    methods = OnboardingService.methods;
    options = OnboardingService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateObservableService
     */
    createObservableService(input: CreateObservableServiceRequest, options?: RpcOptions): UnaryCall<CreateObservableServiceRequest, CreateObservableServiceResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateObservableServiceRequest, CreateObservableServiceResponse>("unary", this._transport, method, opt, input);
    }
}
