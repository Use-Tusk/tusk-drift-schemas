// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "backend/span_export_service.proto" (package "tusk.drift.backend.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Span } from "../core/span";
/**
 * @generated from protobuf message tusk.drift.backend.v1.ExportSpansRequest
 */
export interface ExportSpansRequest {
    /**
     * @generated from protobuf field: string observable_service_id = 1
     */
    observableServiceId: string;
    /**
     * @generated from protobuf field: string environment = 2
     */
    environment: string;
    /**
     * @generated from protobuf field: string sdk_version = 3
     */
    sdkVersion: string;
    /**
     * @generated from protobuf field: string sdk_instance_id = 4
     */
    sdkInstanceId: string;
    /**
     * @generated from protobuf field: repeated tusk.drift.core.v1.Span spans = 5
     */
    spans: Span[];
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.ExportSpansResponse
 */
export interface ExportSpansResponse {
    /**
     * @generated from protobuf field: bool success = 1
     */
    success: boolean;
    /**
     * TODO: Add field to indicate number of spans saved?
     *
     * @generated from protobuf field: string message = 2
     */
    message: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class ExportSpansRequest$Type extends MessageType<ExportSpansRequest> {
    constructor() {
        super("tusk.drift.backend.v1.ExportSpansRequest", [
            { no: 1, name: "observable_service_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "environment", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sdk_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "sdk_instance_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "spans", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Span }
        ]);
    }
    create(value?: PartialMessage<ExportSpansRequest>): ExportSpansRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.observableServiceId = "";
        message.environment = "";
        message.sdkVersion = "";
        message.sdkInstanceId = "";
        message.spans = [];
        if (value !== undefined)
            reflectionMergePartial<ExportSpansRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExportSpansRequest): ExportSpansRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string observable_service_id */ 1:
                    message.observableServiceId = reader.string();
                    break;
                case /* string environment */ 2:
                    message.environment = reader.string();
                    break;
                case /* string sdk_version */ 3:
                    message.sdkVersion = reader.string();
                    break;
                case /* string sdk_instance_id */ 4:
                    message.sdkInstanceId = reader.string();
                    break;
                case /* repeated tusk.drift.core.v1.Span spans */ 5:
                    message.spans.push(Span.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExportSpansRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string observable_service_id = 1; */
        if (message.observableServiceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.observableServiceId);
        /* string environment = 2; */
        if (message.environment !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.environment);
        /* string sdk_version = 3; */
        if (message.sdkVersion !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sdkVersion);
        /* string sdk_instance_id = 4; */
        if (message.sdkInstanceId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.sdkInstanceId);
        /* repeated tusk.drift.core.v1.Span spans = 5; */
        for (let i = 0; i < message.spans.length; i++)
            Span.internalBinaryWrite(message.spans[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.ExportSpansRequest
 */
export const ExportSpansRequest = new ExportSpansRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExportSpansResponse$Type extends MessageType<ExportSpansResponse> {
    constructor() {
        super("tusk.drift.backend.v1.ExportSpansResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ExportSpansResponse>): ExportSpansResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<ExportSpansResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExportSpansResponse): ExportSpansResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExportSpansResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.ExportSpansResponse
 */
export const ExportSpansResponse = new ExportSpansResponse$Type();
/**
 * @generated ServiceType for protobuf service tusk.drift.backend.v1.SpanExportService
 */
export const SpanExportService = new ServiceType("tusk.drift.backend.v1.SpanExportService", [
    { name: "ExportSpans", options: {}, I: ExportSpansRequest, O: ExportSpansResponse }
]);
