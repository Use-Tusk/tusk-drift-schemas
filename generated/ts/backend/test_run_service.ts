// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "backend/test_run_service.proto" (package "tusk.drift.backend.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Span } from "../core/span";
/**
 * @generated from protobuf message tusk.drift.backend.v1.GetGlobalSpansRequest
 */
export interface GetGlobalSpansRequest {
    /**
     * @generated from protobuf field: string observable_service_id = 1
     */
    observableServiceId: string;
    /**
     * Optional since first page will have no cursor
     *
     * @generated from protobuf field: optional string pagination_cursor = 2
     */
    paginationCursor?: string;
    /**
     * Server should provide next cursor based on this page size
     *
     * @generated from protobuf field: int32 page_size = 3
     */
    pageSize: number;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.GetGlobalSpansResponseSuccess
 */
export interface GetGlobalSpansResponseSuccess {
    /**
     * @generated from protobuf field: repeated tusk.drift.core.v1.Span spans = 1
     */
    spans: Span[];
    /**
     * @generated from protobuf field: optional string next_cursor = 2
     */
    nextCursor?: string;
    /**
     * @generated from protobuf field: int32 total_count = 3
     */
    totalCount: number;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.GetGlobalSpansResponseError
 */
export interface GetGlobalSpansResponseError {
    /**
     * @generated from protobuf field: string code = 1
     */
    code: string;
    /**
     * @generated from protobuf field: string message = 2
     */
    message: string;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.GetGlobalSpansResponse
 */
export interface GetGlobalSpansResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "success";
        /**
         * @generated from protobuf field: tusk.drift.backend.v1.GetGlobalSpansResponseSuccess success = 1
         */
        success: GetGlobalSpansResponseSuccess;
    } | {
        oneofKind: "error";
        /**
         * @generated from protobuf field: tusk.drift.backend.v1.GetGlobalSpansResponseError error = 2
         */
        error: GetGlobalSpansResponseError;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.GetPreAppStartSpansRequest
 */
export interface GetPreAppStartSpansRequest {
    /**
     * @generated from protobuf field: string observable_service_id = 1
     */
    observableServiceId: string;
    /**
     * @generated from protobuf field: optional string pagination_cursor = 2
     */
    paginationCursor?: string;
    /**
     * @generated from protobuf field: int32 page_size = 3
     */
    pageSize: number;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.GetPreAppStartSpansResponseSuccess
 */
export interface GetPreAppStartSpansResponseSuccess {
    /**
     * @generated from protobuf field: repeated tusk.drift.core.v1.Span spans = 1
     */
    spans: Span[];
    /**
     * @generated from protobuf field: optional string next_cursor = 2
     */
    nextCursor?: string;
    /**
     * @generated from protobuf field: int32 total_count = 3
     */
    totalCount: number;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.GetPreAppStartSpansResponseError
 */
export interface GetPreAppStartSpansResponseError {
    /**
     * @generated from protobuf field: string code = 1
     */
    code: string;
    /**
     * @generated from protobuf field: string message = 2
     */
    message: string;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.GetPreAppStartSpansResponse
 */
export interface GetPreAppStartSpansResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "success";
        /**
         * @generated from protobuf field: tusk.drift.backend.v1.GetPreAppStartSpansResponseSuccess success = 1
         */
        success: GetPreAppStartSpansResponseSuccess;
    } | {
        oneofKind: "error";
        /**
         * @generated from protobuf field: tusk.drift.backend.v1.GetPreAppStartSpansResponseError error = 2
         */
        error: GetPreAppStartSpansResponseError;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.CreateDriftRunRequest
 */
export interface CreateDriftRunRequest {
    /**
     * @generated from protobuf field: string observable_service_id = 1
     */
    observableServiceId: string;
    /**
     * @generated from protobuf field: string cli_version = 2
     */
    cliVersion: string;
    /**
     * @generated from protobuf field: string commit_sha = 3
     */
    commitSha: string;
    /**
     * @generated from protobuf field: string pr_number = 4
     */
    prNumber: string;
    /**
     * @generated from protobuf field: string branch_name = 5
     */
    branchName: string;
    /**
     * @generated from protobuf field: string external_check_run_id = 6
     */
    externalCheckRunId: string;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.CreateDriftRunResponseSuccess
 */
export interface CreateDriftRunResponseSuccess {
    /**
     * @generated from protobuf field: string drift_run_id = 1
     */
    driftRunId: string;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.CreateDriftRunResponseError
 */
export interface CreateDriftRunResponseError {
    /**
     * Machine-readable error code, could be an enum
     *
     * @generated from protobuf field: string code = 1
     */
    code: string;
    /**
     * Human-readable error message
     *
     * @generated from protobuf field: string message = 2
     */
    message: string;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.CreateDriftRunResponse
 */
export interface CreateDriftRunResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "success";
        /**
         * @generated from protobuf field: tusk.drift.backend.v1.CreateDriftRunResponseSuccess success = 1
         */
        success: CreateDriftRunResponseSuccess;
    } | {
        oneofKind: "error";
        /**
         * @generated from protobuf field: tusk.drift.backend.v1.CreateDriftRunResponseError error = 2
         */
        error: CreateDriftRunResponseError;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.GetDriftRunTraceTestsRequest
 */
export interface GetDriftRunTraceTestsRequest {
    /**
     * @generated from protobuf field: string drift_run_id = 1
     */
    driftRunId: string;
    /**
     * @generated from protobuf field: optional string pagination_cursor = 2
     */
    paginationCursor?: string;
    /**
     * Server should provide next cursor based on this page size
     *
     * @generated from protobuf field: int32 page_size = 3
     */
    pageSize: number;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.TraceTest
 */
export interface TraceTest {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string; // DB id
    /**
     * @generated from protobuf field: string trace_id = 2
     */
    traceId: string;
    /**
     * @generated from protobuf field: string server_span_recording_id = 3
     */
    serverSpanRecordingId: string;
    /**
     * @generated from protobuf field: repeated tusk.drift.core.v1.Span spans = 4
     */
    spans: Span[];
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.GetDriftRunTraceTestsResponseSuccess
 */
export interface GetDriftRunTraceTestsResponseSuccess {
    /**
     * @generated from protobuf field: repeated tusk.drift.backend.v1.TraceTest trace_tests = 1
     */
    traceTests: TraceTest[];
    /**
     * @generated from protobuf field: optional string next_cursor = 2
     */
    nextCursor?: string;
    /**
     * @generated from protobuf field: int32 total_count = 3
     */
    totalCount: number;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.GetDriftRunTraceTestsResponseError
 */
export interface GetDriftRunTraceTestsResponseError {
    /**
     * Machine-readable error code, could be an enum
     *
     * @generated from protobuf field: string code = 1
     */
    code: string;
    /**
     * Human-readable error message
     *
     * @generated from protobuf field: string message = 2
     */
    message: string;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.GetDriftRunTraceTestsResponse
 */
export interface GetDriftRunTraceTestsResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "success";
        /**
         * @generated from protobuf field: tusk.drift.backend.v1.GetDriftRunTraceTestsResponseSuccess success = 1
         */
        success: GetDriftRunTraceTestsResponseSuccess;
    } | {
        oneofKind: "error";
        /**
         * @generated from protobuf field: tusk.drift.backend.v1.GetDriftRunTraceTestsResponseError error = 2
         */
        error: GetDriftRunTraceTestsResponseError;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.GetTraceTestRequest
 */
export interface GetTraceTestRequest {
    /**
     * @generated from protobuf field: string observable_service_id = 1
     */
    observableServiceId: string;
    /**
     * @generated from protobuf field: string trace_test_id = 2
     */
    traceTestId: string;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.GetTraceTestResponse
 */
export interface GetTraceTestResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "success";
        /**
         * @generated from protobuf field: tusk.drift.backend.v1.GetTraceTestResponseSuccess success = 1
         */
        success: GetTraceTestResponseSuccess;
    } | {
        oneofKind: "error";
        /**
         * @generated from protobuf field: tusk.drift.backend.v1.GetTraceTestResponseError error = 2
         */
        error: GetTraceTestResponseError;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.GetTraceTestResponseSuccess
 */
export interface GetTraceTestResponseSuccess {
    /**
     * @generated from protobuf field: tusk.drift.backend.v1.TraceTest trace_test = 1
     */
    traceTest?: TraceTest;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.GetTraceTestResponseError
 */
export interface GetTraceTestResponseError {
    /**
     * @generated from protobuf field: string code = 1
     */
    code: string;
    /**
     * @generated from protobuf field: string message = 2
     */
    message: string;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.GetAllTraceTestsRequest
 */
export interface GetAllTraceTestsRequest {
    /**
     * @generated from protobuf field: string observable_service_id = 1
     */
    observableServiceId: string;
    /**
     * @generated from protobuf field: optional string pagination_cursor = 2
     */
    paginationCursor?: string;
    /**
     * Server should provide next cursor based on this page size
     *
     * @generated from protobuf field: int32 page_size = 3
     */
    pageSize: number;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.GetAllTraceTestsResponseSuccess
 */
export interface GetAllTraceTestsResponseSuccess {
    /**
     * @generated from protobuf field: repeated tusk.drift.backend.v1.TraceTest trace_tests = 1
     */
    traceTests: TraceTest[];
    /**
     * @generated from protobuf field: optional string next_cursor = 2
     */
    nextCursor?: string;
    /**
     * @generated from protobuf field: int32 total_count = 3
     */
    totalCount: number;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.GetAllTraceTestsResponseError
 */
export interface GetAllTraceTestsResponseError {
    /**
     * @generated from protobuf field: string code = 1
     */
    code: string;
    /**
     * @generated from protobuf field: string message = 2
     */
    message: string;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.GetAllTraceTestsResponse
 */
export interface GetAllTraceTestsResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "success";
        /**
         * @generated from protobuf field: tusk.drift.backend.v1.GetAllTraceTestsResponseSuccess success = 1
         */
        success: GetAllTraceTestsResponseSuccess;
    } | {
        oneofKind: "error";
        /**
         * @generated from protobuf field: tusk.drift.backend.v1.GetAllTraceTestsResponseError error = 2
         */
        error: GetAllTraceTestsResponseError;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.Deviation
 */
export interface Deviation {
    /**
     * @generated from protobuf field: string field = 1
     */
    field: string; // what field in replay span had a deviation
    /**
     * @generated from protobuf field: string description = 2
     */
    description: string; // description of the deviation, primarily useful for comparing SUT
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.MatchLevel
 */
export interface MatchLevel {
    /**
     * @generated from protobuf field: tusk.drift.backend.v1.MatchType match_type = 1
     */
    matchType: MatchType; // How the match was found
    /**
     * @generated from protobuf field: tusk.drift.backend.v1.MatchScope match_scope = 2
     */
    matchScope: MatchScope; // Scope of where the match was found
    /**
     * @generated from protobuf field: string match_description = 3
     */
    matchDescription: string; // Natural language description for match
    /**
     * Similarity scoring fields (populated when multiple matches exist)
     *
     * @generated from protobuf field: optional float similarity_score = 4
     */
    similarityScore?: number; // The similarity score of the selected match (0.0-1.0)
    /**
     * @generated from protobuf field: repeated tusk.drift.backend.v1.SimilarityCandidate top_candidates = 5
     */
    topCandidates: SimilarityCandidate[]; // Top 5 alternative matches with scores
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.SimilarityCandidate
 */
export interface SimilarityCandidate {
    /**
     * @generated from protobuf field: string span_id = 1
     */
    spanId: string;
    /**
     * @generated from protobuf field: float score = 2
     */
    score: number;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.TraceTestSpanResult
 */
export interface TraceTestSpanResult {
    /**
     * Create a separate table in backend for span_result_recording, but very
     * similar schema to
     *
     * @generated from protobuf field: tusk.drift.core.v1.Span replay_span = 1
     */
    replaySpan?: Span;
    /**
     * All nullable since we want to allow for no matching span_recordings
     * This should be the DB id of the matched span_recording
     *
     * @generated from protobuf field: optional string matched_span_recording_id = 2
     */
    matchedSpanRecordingId?: string;
    /**
     * @generated from protobuf field: optional tusk.drift.backend.v1.MatchLevel match_level = 3
     */
    matchLevel?: MatchLevel;
    /**
     * @generated from protobuf field: optional string stack_trace = 4
     */
    stackTrace?: string;
    /**
     * @generated from protobuf field: repeated tusk.drift.backend.v1.Deviation deviations = 5
     */
    deviations: Deviation[];
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.TraceTestResult
 */
export interface TraceTestResult {
    /**
     * @generated from protobuf field: string trace_test_id = 1
     */
    traceTestId: string; // DB id
    /**
     * @generated from protobuf field: bool test_success = 2
     */
    testSuccess: boolean;
    /**
     * @generated from protobuf field: optional tusk.drift.backend.v1.TraceTestFailureReason test_failure_reason = 3
     */
    testFailureReason?: TraceTestFailureReason;
    /**
     * @generated from protobuf field: optional string test_failure_message = 4
     */
    testFailureMessage?: string;
    /**
     * @generated from protobuf field: optional string replay_trace_id = 5
     */
    replayTraceId?: string;
    /**
     * @generated from protobuf field: optional string replay_server_span_id = 6
     */
    replayServerSpanId?: string;
    /**
     * @generated from protobuf field: repeated tusk.drift.backend.v1.TraceTestSpanResult span_results = 7
     */
    spanResults: TraceTestSpanResult[];
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.UploadTraceTestResultsRequest
 */
export interface UploadTraceTestResultsRequest {
    /**
     * @generated from protobuf field: string drift_run_id = 1
     */
    driftRunId: string;
    /**
     * @generated from protobuf field: string cli_version = 2
     */
    cliVersion: string;
    /**
     * @generated from protobuf field: string sdk_version = 3
     */
    sdkVersion: string;
    /**
     * @generated from protobuf field: repeated tusk.drift.backend.v1.TraceTestResult trace_test_results = 4
     */
    traceTestResults: TraceTestResult[];
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.UploadTraceTestResultsResponseSuccess
 */
export interface UploadTraceTestResultsResponseSuccess {
    /**
     * @generated from protobuf field: string message = 1
     */
    message: string;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.UploadTraceTestResultsResponseError
 */
export interface UploadTraceTestResultsResponseError {
    /**
     * @generated from protobuf field: string code = 1
     */
    code: string;
    /**
     * @generated from protobuf field: string message = 2
     */
    message: string;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.UploadTraceTestResultsResponse
 */
export interface UploadTraceTestResultsResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "success";
        /**
         * @generated from protobuf field: tusk.drift.backend.v1.UploadTraceTestResultsResponseSuccess success = 1
         */
        success: UploadTraceTestResultsResponseSuccess;
    } | {
        oneofKind: "error";
        /**
         * @generated from protobuf field: tusk.drift.backend.v1.UploadTraceTestResultsResponseError error = 2
         */
        error: UploadTraceTestResultsResponseError;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.UpdateDriftRunCIStatusRequest
 */
export interface UpdateDriftRunCIStatusRequest {
    /**
     * @generated from protobuf field: string drift_run_id = 1
     */
    driftRunId: string;
    /**
     * @generated from protobuf field: tusk.drift.backend.v1.DriftRunCIStatus ci_status = 2
     */
    ciStatus: DriftRunCIStatus;
    /**
     * @generated from protobuf field: optional string ci_status_message = 3
     */
    ciStatusMessage?: string;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.UpdateDriftRunCIStatusResponseSuccess
 */
export interface UpdateDriftRunCIStatusResponseSuccess {
    /**
     * @generated from protobuf field: string message = 1
     */
    message: string;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.UpdateDriftRunCIStatusResponseError
 */
export interface UpdateDriftRunCIStatusResponseError {
    /**
     * @generated from protobuf field: string code = 1
     */
    code: string;
    /**
     * @generated from protobuf field: string message = 2
     */
    message: string;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.UpdateDriftRunCIStatusResponse
 */
export interface UpdateDriftRunCIStatusResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "success";
        /**
         * @generated from protobuf field: tusk.drift.backend.v1.UpdateDriftRunCIStatusResponseSuccess success = 1
         */
        success: UpdateDriftRunCIStatusResponseSuccess;
    } | {
        oneofKind: "error";
        /**
         * @generated from protobuf field: tusk.drift.backend.v1.UpdateDriftRunCIStatusResponseError error = 2
         */
        error: UpdateDriftRunCIStatusResponseError;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.FinalizeDriftRunRequest
 */
export interface FinalizeDriftRunRequest {
    /**
     * @generated from protobuf field: string drift_run_id = 1
     */
    driftRunId: string;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.FinalizeDriftRunResponseSuccess
 */
export interface FinalizeDriftRunResponseSuccess {
    /**
     * @generated from protobuf field: string message = 1
     */
    message: string;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.FinalizeDriftRunResponseError
 */
export interface FinalizeDriftRunResponseError {
    /**
     * @generated from protobuf field: string code = 1
     */
    code: string;
    /**
     * @generated from protobuf field: string message = 2
     */
    message: string;
}
/**
 * @generated from protobuf message tusk.drift.backend.v1.FinalizeDriftRunResponse
 */
export interface FinalizeDriftRunResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "success";
        /**
         * @generated from protobuf field: tusk.drift.backend.v1.FinalizeDriftRunResponseSuccess success = 1
         */
        success: FinalizeDriftRunResponseSuccess;
    } | {
        oneofKind: "error";
        /**
         * @generated from protobuf field: tusk.drift.backend.v1.FinalizeDriftRunResponseError error = 2
         */
        error: FinalizeDriftRunResponseError;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum tusk.drift.backend.v1.MatchScope
 */
export enum MatchScope {
    /**
     * @generated from protobuf enum value: MATCH_SCOPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: MATCH_SCOPE_TRACE = 1;
     */
    TRACE = 1,
    /**
     * @generated from protobuf enum value: MATCH_SCOPE_GLOBAL = 2;
     */
    GLOBAL = 2
}
/**
 * @generated from protobuf enum tusk.drift.backend.v1.MatchType
 */
export enum MatchType {
    /**
     * @generated from protobuf enum value: MATCH_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: MATCH_TYPE_INPUT_VALUE_HASH = 1;
     */
    INPUT_VALUE_HASH = 1,
    /**
     * @generated from protobuf enum value: MATCH_TYPE_INPUT_VALUE_HASH_REDUCED_SCHEMA = 2;
     */
    INPUT_VALUE_HASH_REDUCED_SCHEMA = 2,
    /**
     * @generated from protobuf enum value: MATCH_TYPE_INPUT_SCHEMA_HASH = 3;
     */
    INPUT_SCHEMA_HASH = 3,
    /**
     * @generated from protobuf enum value: MATCH_TYPE_INPUT_SCHEMA_HASH_REDUCED_SCHEMA = 4;
     */
    INPUT_SCHEMA_HASH_REDUCED_SCHEMA = 4,
    /**
     * @generated from protobuf enum value: MATCH_TYPE_FUZZY = 5;
     */
    FUZZY = 5,
    /**
     * @generated from protobuf enum value: MATCH_TYPE_FALLBACK = 6;
     */
    FALLBACK = 6
}
/**
 * @generated from protobuf enum tusk.drift.backend.v1.TraceTestFailureReason
 */
export enum TraceTestFailureReason {
    /**
     * @generated from protobuf enum value: TRACE_TEST_FAILURE_REASON_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: TRACE_TEST_FAILURE_REASON_MOCK_NOT_FOUND = 1;
     */
    MOCK_NOT_FOUND = 1,
    /**
     * @generated from protobuf enum value: TRACE_TEST_FAILURE_REASON_RESPONSE_MISMATCH = 2;
     */
    RESPONSE_MISMATCH = 2,
    /**
     * @generated from protobuf enum value: TRACE_TEST_FAILURE_REASON_NO_RESPONSE = 3;
     */
    NO_RESPONSE = 3
}
/**
 * @generated from protobuf enum tusk.drift.backend.v1.DriftRunCIStatus
 */
export enum DriftRunCIStatus {
    /**
     * @generated from protobuf enum value: DRIFT_RUN_CI_STATUS_UNSPECIFIED = 0;
     */
    DRIFT_RUN_CI_STATUS_UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: DRIFT_RUN_CI_STATUS_RUNNING = 1;
     */
    DRIFT_RUN_CI_STATUS_RUNNING = 1,
    /**
     * @generated from protobuf enum value: DRIFT_RUN_CI_STATUS_SUCCESS = 2;
     */
    DRIFT_RUN_CI_STATUS_SUCCESS = 2,
    /**
     * @generated from protobuf enum value: DRIFT_RUN_CI_STATUS_FAILURE = 3;
     */
    DRIFT_RUN_CI_STATUS_FAILURE = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class GetGlobalSpansRequest$Type extends MessageType<GetGlobalSpansRequest> {
    constructor() {
        super("tusk.drift.backend.v1.GetGlobalSpansRequest", [
            { no: 1, name: "observable_service_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pagination_cursor", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "page_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetGlobalSpansRequest>): GetGlobalSpansRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.observableServiceId = "";
        message.pageSize = 0;
        if (value !== undefined)
            reflectionMergePartial<GetGlobalSpansRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGlobalSpansRequest): GetGlobalSpansRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string observable_service_id */ 1:
                    message.observableServiceId = reader.string();
                    break;
                case /* optional string pagination_cursor */ 2:
                    message.paginationCursor = reader.string();
                    break;
                case /* int32 page_size */ 3:
                    message.pageSize = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGlobalSpansRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string observable_service_id = 1; */
        if (message.observableServiceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.observableServiceId);
        /* optional string pagination_cursor = 2; */
        if (message.paginationCursor !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.paginationCursor);
        /* int32 page_size = 3; */
        if (message.pageSize !== 0)
            writer.tag(3, WireType.Varint).int32(message.pageSize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.GetGlobalSpansRequest
 */
export const GetGlobalSpansRequest = new GetGlobalSpansRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGlobalSpansResponseSuccess$Type extends MessageType<GetGlobalSpansResponseSuccess> {
    constructor() {
        super("tusk.drift.backend.v1.GetGlobalSpansResponseSuccess", [
            { no: 1, name: "spans", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Span },
            { no: 2, name: "next_cursor", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "total_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetGlobalSpansResponseSuccess>): GetGlobalSpansResponseSuccess {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.spans = [];
        message.totalCount = 0;
        if (value !== undefined)
            reflectionMergePartial<GetGlobalSpansResponseSuccess>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGlobalSpansResponseSuccess): GetGlobalSpansResponseSuccess {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated tusk.drift.core.v1.Span spans */ 1:
                    message.spans.push(Span.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional string next_cursor */ 2:
                    message.nextCursor = reader.string();
                    break;
                case /* int32 total_count */ 3:
                    message.totalCount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGlobalSpansResponseSuccess, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated tusk.drift.core.v1.Span spans = 1; */
        for (let i = 0; i < message.spans.length; i++)
            Span.internalBinaryWrite(message.spans[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional string next_cursor = 2; */
        if (message.nextCursor !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.nextCursor);
        /* int32 total_count = 3; */
        if (message.totalCount !== 0)
            writer.tag(3, WireType.Varint).int32(message.totalCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.GetGlobalSpansResponseSuccess
 */
export const GetGlobalSpansResponseSuccess = new GetGlobalSpansResponseSuccess$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGlobalSpansResponseError$Type extends MessageType<GetGlobalSpansResponseError> {
    constructor() {
        super("tusk.drift.backend.v1.GetGlobalSpansResponseError", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetGlobalSpansResponseError>): GetGlobalSpansResponseError {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<GetGlobalSpansResponseError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGlobalSpansResponseError): GetGlobalSpansResponseError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGlobalSpansResponseError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.GetGlobalSpansResponseError
 */
export const GetGlobalSpansResponseError = new GetGlobalSpansResponseError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGlobalSpansResponse$Type extends MessageType<GetGlobalSpansResponse> {
    constructor() {
        super("tusk.drift.backend.v1.GetGlobalSpansResponse", [
            { no: 1, name: "success", kind: "message", oneof: "response", T: () => GetGlobalSpansResponseSuccess },
            { no: 2, name: "error", kind: "message", oneof: "response", T: () => GetGlobalSpansResponseError }
        ]);
    }
    create(value?: PartialMessage<GetGlobalSpansResponse>): GetGlobalSpansResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<GetGlobalSpansResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGlobalSpansResponse): GetGlobalSpansResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tusk.drift.backend.v1.GetGlobalSpansResponseSuccess success */ 1:
                    message.response = {
                        oneofKind: "success",
                        success: GetGlobalSpansResponseSuccess.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).success)
                    };
                    break;
                case /* tusk.drift.backend.v1.GetGlobalSpansResponseError error */ 2:
                    message.response = {
                        oneofKind: "error",
                        error: GetGlobalSpansResponseError.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).error)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGlobalSpansResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tusk.drift.backend.v1.GetGlobalSpansResponseSuccess success = 1; */
        if (message.response.oneofKind === "success")
            GetGlobalSpansResponseSuccess.internalBinaryWrite(message.response.success, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* tusk.drift.backend.v1.GetGlobalSpansResponseError error = 2; */
        if (message.response.oneofKind === "error")
            GetGlobalSpansResponseError.internalBinaryWrite(message.response.error, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.GetGlobalSpansResponse
 */
export const GetGlobalSpansResponse = new GetGlobalSpansResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPreAppStartSpansRequest$Type extends MessageType<GetPreAppStartSpansRequest> {
    constructor() {
        super("tusk.drift.backend.v1.GetPreAppStartSpansRequest", [
            { no: 1, name: "observable_service_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pagination_cursor", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "page_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetPreAppStartSpansRequest>): GetPreAppStartSpansRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.observableServiceId = "";
        message.pageSize = 0;
        if (value !== undefined)
            reflectionMergePartial<GetPreAppStartSpansRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPreAppStartSpansRequest): GetPreAppStartSpansRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string observable_service_id */ 1:
                    message.observableServiceId = reader.string();
                    break;
                case /* optional string pagination_cursor */ 2:
                    message.paginationCursor = reader.string();
                    break;
                case /* int32 page_size */ 3:
                    message.pageSize = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPreAppStartSpansRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string observable_service_id = 1; */
        if (message.observableServiceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.observableServiceId);
        /* optional string pagination_cursor = 2; */
        if (message.paginationCursor !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.paginationCursor);
        /* int32 page_size = 3; */
        if (message.pageSize !== 0)
            writer.tag(3, WireType.Varint).int32(message.pageSize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.GetPreAppStartSpansRequest
 */
export const GetPreAppStartSpansRequest = new GetPreAppStartSpansRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPreAppStartSpansResponseSuccess$Type extends MessageType<GetPreAppStartSpansResponseSuccess> {
    constructor() {
        super("tusk.drift.backend.v1.GetPreAppStartSpansResponseSuccess", [
            { no: 1, name: "spans", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Span },
            { no: 2, name: "next_cursor", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "total_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetPreAppStartSpansResponseSuccess>): GetPreAppStartSpansResponseSuccess {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.spans = [];
        message.totalCount = 0;
        if (value !== undefined)
            reflectionMergePartial<GetPreAppStartSpansResponseSuccess>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPreAppStartSpansResponseSuccess): GetPreAppStartSpansResponseSuccess {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated tusk.drift.core.v1.Span spans */ 1:
                    message.spans.push(Span.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional string next_cursor */ 2:
                    message.nextCursor = reader.string();
                    break;
                case /* int32 total_count */ 3:
                    message.totalCount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPreAppStartSpansResponseSuccess, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated tusk.drift.core.v1.Span spans = 1; */
        for (let i = 0; i < message.spans.length; i++)
            Span.internalBinaryWrite(message.spans[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional string next_cursor = 2; */
        if (message.nextCursor !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.nextCursor);
        /* int32 total_count = 3; */
        if (message.totalCount !== 0)
            writer.tag(3, WireType.Varint).int32(message.totalCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.GetPreAppStartSpansResponseSuccess
 */
export const GetPreAppStartSpansResponseSuccess = new GetPreAppStartSpansResponseSuccess$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPreAppStartSpansResponseError$Type extends MessageType<GetPreAppStartSpansResponseError> {
    constructor() {
        super("tusk.drift.backend.v1.GetPreAppStartSpansResponseError", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPreAppStartSpansResponseError>): GetPreAppStartSpansResponseError {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<GetPreAppStartSpansResponseError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPreAppStartSpansResponseError): GetPreAppStartSpansResponseError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPreAppStartSpansResponseError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.GetPreAppStartSpansResponseError
 */
export const GetPreAppStartSpansResponseError = new GetPreAppStartSpansResponseError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPreAppStartSpansResponse$Type extends MessageType<GetPreAppStartSpansResponse> {
    constructor() {
        super("tusk.drift.backend.v1.GetPreAppStartSpansResponse", [
            { no: 1, name: "success", kind: "message", oneof: "response", T: () => GetPreAppStartSpansResponseSuccess },
            { no: 2, name: "error", kind: "message", oneof: "response", T: () => GetPreAppStartSpansResponseError }
        ]);
    }
    create(value?: PartialMessage<GetPreAppStartSpansResponse>): GetPreAppStartSpansResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<GetPreAppStartSpansResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPreAppStartSpansResponse): GetPreAppStartSpansResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tusk.drift.backend.v1.GetPreAppStartSpansResponseSuccess success */ 1:
                    message.response = {
                        oneofKind: "success",
                        success: GetPreAppStartSpansResponseSuccess.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).success)
                    };
                    break;
                case /* tusk.drift.backend.v1.GetPreAppStartSpansResponseError error */ 2:
                    message.response = {
                        oneofKind: "error",
                        error: GetPreAppStartSpansResponseError.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).error)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPreAppStartSpansResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tusk.drift.backend.v1.GetPreAppStartSpansResponseSuccess success = 1; */
        if (message.response.oneofKind === "success")
            GetPreAppStartSpansResponseSuccess.internalBinaryWrite(message.response.success, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* tusk.drift.backend.v1.GetPreAppStartSpansResponseError error = 2; */
        if (message.response.oneofKind === "error")
            GetPreAppStartSpansResponseError.internalBinaryWrite(message.response.error, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.GetPreAppStartSpansResponse
 */
export const GetPreAppStartSpansResponse = new GetPreAppStartSpansResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateDriftRunRequest$Type extends MessageType<CreateDriftRunRequest> {
    constructor() {
        super("tusk.drift.backend.v1.CreateDriftRunRequest", [
            { no: 1, name: "observable_service_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "cli_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "commit_sha", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "pr_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "branch_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "external_check_run_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateDriftRunRequest>): CreateDriftRunRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.observableServiceId = "";
        message.cliVersion = "";
        message.commitSha = "";
        message.prNumber = "";
        message.branchName = "";
        message.externalCheckRunId = "";
        if (value !== undefined)
            reflectionMergePartial<CreateDriftRunRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateDriftRunRequest): CreateDriftRunRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string observable_service_id */ 1:
                    message.observableServiceId = reader.string();
                    break;
                case /* string cli_version */ 2:
                    message.cliVersion = reader.string();
                    break;
                case /* string commit_sha */ 3:
                    message.commitSha = reader.string();
                    break;
                case /* string pr_number */ 4:
                    message.prNumber = reader.string();
                    break;
                case /* string branch_name */ 5:
                    message.branchName = reader.string();
                    break;
                case /* string external_check_run_id */ 6:
                    message.externalCheckRunId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateDriftRunRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string observable_service_id = 1; */
        if (message.observableServiceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.observableServiceId);
        /* string cli_version = 2; */
        if (message.cliVersion !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.cliVersion);
        /* string commit_sha = 3; */
        if (message.commitSha !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.commitSha);
        /* string pr_number = 4; */
        if (message.prNumber !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.prNumber);
        /* string branch_name = 5; */
        if (message.branchName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.branchName);
        /* string external_check_run_id = 6; */
        if (message.externalCheckRunId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.externalCheckRunId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.CreateDriftRunRequest
 */
export const CreateDriftRunRequest = new CreateDriftRunRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateDriftRunResponseSuccess$Type extends MessageType<CreateDriftRunResponseSuccess> {
    constructor() {
        super("tusk.drift.backend.v1.CreateDriftRunResponseSuccess", [
            { no: 1, name: "drift_run_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateDriftRunResponseSuccess>): CreateDriftRunResponseSuccess {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driftRunId = "";
        if (value !== undefined)
            reflectionMergePartial<CreateDriftRunResponseSuccess>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateDriftRunResponseSuccess): CreateDriftRunResponseSuccess {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string drift_run_id */ 1:
                    message.driftRunId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateDriftRunResponseSuccess, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string drift_run_id = 1; */
        if (message.driftRunId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driftRunId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.CreateDriftRunResponseSuccess
 */
export const CreateDriftRunResponseSuccess = new CreateDriftRunResponseSuccess$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateDriftRunResponseError$Type extends MessageType<CreateDriftRunResponseError> {
    constructor() {
        super("tusk.drift.backend.v1.CreateDriftRunResponseError", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateDriftRunResponseError>): CreateDriftRunResponseError {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<CreateDriftRunResponseError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateDriftRunResponseError): CreateDriftRunResponseError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateDriftRunResponseError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.CreateDriftRunResponseError
 */
export const CreateDriftRunResponseError = new CreateDriftRunResponseError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateDriftRunResponse$Type extends MessageType<CreateDriftRunResponse> {
    constructor() {
        super("tusk.drift.backend.v1.CreateDriftRunResponse", [
            { no: 1, name: "success", kind: "message", oneof: "response", T: () => CreateDriftRunResponseSuccess },
            { no: 2, name: "error", kind: "message", oneof: "response", T: () => CreateDriftRunResponseError }
        ]);
    }
    create(value?: PartialMessage<CreateDriftRunResponse>): CreateDriftRunResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<CreateDriftRunResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateDriftRunResponse): CreateDriftRunResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tusk.drift.backend.v1.CreateDriftRunResponseSuccess success */ 1:
                    message.response = {
                        oneofKind: "success",
                        success: CreateDriftRunResponseSuccess.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).success)
                    };
                    break;
                case /* tusk.drift.backend.v1.CreateDriftRunResponseError error */ 2:
                    message.response = {
                        oneofKind: "error",
                        error: CreateDriftRunResponseError.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).error)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateDriftRunResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tusk.drift.backend.v1.CreateDriftRunResponseSuccess success = 1; */
        if (message.response.oneofKind === "success")
            CreateDriftRunResponseSuccess.internalBinaryWrite(message.response.success, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* tusk.drift.backend.v1.CreateDriftRunResponseError error = 2; */
        if (message.response.oneofKind === "error")
            CreateDriftRunResponseError.internalBinaryWrite(message.response.error, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.CreateDriftRunResponse
 */
export const CreateDriftRunResponse = new CreateDriftRunResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDriftRunTraceTestsRequest$Type extends MessageType<GetDriftRunTraceTestsRequest> {
    constructor() {
        super("tusk.drift.backend.v1.GetDriftRunTraceTestsRequest", [
            { no: 1, name: "drift_run_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pagination_cursor", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "page_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetDriftRunTraceTestsRequest>): GetDriftRunTraceTestsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driftRunId = "";
        message.pageSize = 0;
        if (value !== undefined)
            reflectionMergePartial<GetDriftRunTraceTestsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDriftRunTraceTestsRequest): GetDriftRunTraceTestsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string drift_run_id */ 1:
                    message.driftRunId = reader.string();
                    break;
                case /* optional string pagination_cursor */ 2:
                    message.paginationCursor = reader.string();
                    break;
                case /* int32 page_size */ 3:
                    message.pageSize = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDriftRunTraceTestsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string drift_run_id = 1; */
        if (message.driftRunId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driftRunId);
        /* optional string pagination_cursor = 2; */
        if (message.paginationCursor !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.paginationCursor);
        /* int32 page_size = 3; */
        if (message.pageSize !== 0)
            writer.tag(3, WireType.Varint).int32(message.pageSize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.GetDriftRunTraceTestsRequest
 */
export const GetDriftRunTraceTestsRequest = new GetDriftRunTraceTestsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TraceTest$Type extends MessageType<TraceTest> {
    constructor() {
        super("tusk.drift.backend.v1.TraceTest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "trace_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "server_span_recording_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "spans", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Span }
        ]);
    }
    create(value?: PartialMessage<TraceTest>): TraceTest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.traceId = "";
        message.serverSpanRecordingId = "";
        message.spans = [];
        if (value !== undefined)
            reflectionMergePartial<TraceTest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TraceTest): TraceTest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string trace_id */ 2:
                    message.traceId = reader.string();
                    break;
                case /* string server_span_recording_id */ 3:
                    message.serverSpanRecordingId = reader.string();
                    break;
                case /* repeated tusk.drift.core.v1.Span spans */ 4:
                    message.spans.push(Span.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TraceTest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string trace_id = 2; */
        if (message.traceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.traceId);
        /* string server_span_recording_id = 3; */
        if (message.serverSpanRecordingId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.serverSpanRecordingId);
        /* repeated tusk.drift.core.v1.Span spans = 4; */
        for (let i = 0; i < message.spans.length; i++)
            Span.internalBinaryWrite(message.spans[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.TraceTest
 */
export const TraceTest = new TraceTest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDriftRunTraceTestsResponseSuccess$Type extends MessageType<GetDriftRunTraceTestsResponseSuccess> {
    constructor() {
        super("tusk.drift.backend.v1.GetDriftRunTraceTestsResponseSuccess", [
            { no: 1, name: "trace_tests", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TraceTest },
            { no: 2, name: "next_cursor", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "total_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetDriftRunTraceTestsResponseSuccess>): GetDriftRunTraceTestsResponseSuccess {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.traceTests = [];
        message.totalCount = 0;
        if (value !== undefined)
            reflectionMergePartial<GetDriftRunTraceTestsResponseSuccess>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDriftRunTraceTestsResponseSuccess): GetDriftRunTraceTestsResponseSuccess {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated tusk.drift.backend.v1.TraceTest trace_tests */ 1:
                    message.traceTests.push(TraceTest.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional string next_cursor */ 2:
                    message.nextCursor = reader.string();
                    break;
                case /* int32 total_count */ 3:
                    message.totalCount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDriftRunTraceTestsResponseSuccess, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated tusk.drift.backend.v1.TraceTest trace_tests = 1; */
        for (let i = 0; i < message.traceTests.length; i++)
            TraceTest.internalBinaryWrite(message.traceTests[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional string next_cursor = 2; */
        if (message.nextCursor !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.nextCursor);
        /* int32 total_count = 3; */
        if (message.totalCount !== 0)
            writer.tag(3, WireType.Varint).int32(message.totalCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.GetDriftRunTraceTestsResponseSuccess
 */
export const GetDriftRunTraceTestsResponseSuccess = new GetDriftRunTraceTestsResponseSuccess$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDriftRunTraceTestsResponseError$Type extends MessageType<GetDriftRunTraceTestsResponseError> {
    constructor() {
        super("tusk.drift.backend.v1.GetDriftRunTraceTestsResponseError", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetDriftRunTraceTestsResponseError>): GetDriftRunTraceTestsResponseError {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<GetDriftRunTraceTestsResponseError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDriftRunTraceTestsResponseError): GetDriftRunTraceTestsResponseError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDriftRunTraceTestsResponseError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.GetDriftRunTraceTestsResponseError
 */
export const GetDriftRunTraceTestsResponseError = new GetDriftRunTraceTestsResponseError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDriftRunTraceTestsResponse$Type extends MessageType<GetDriftRunTraceTestsResponse> {
    constructor() {
        super("tusk.drift.backend.v1.GetDriftRunTraceTestsResponse", [
            { no: 1, name: "success", kind: "message", oneof: "response", T: () => GetDriftRunTraceTestsResponseSuccess },
            { no: 2, name: "error", kind: "message", oneof: "response", T: () => GetDriftRunTraceTestsResponseError }
        ]);
    }
    create(value?: PartialMessage<GetDriftRunTraceTestsResponse>): GetDriftRunTraceTestsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<GetDriftRunTraceTestsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDriftRunTraceTestsResponse): GetDriftRunTraceTestsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tusk.drift.backend.v1.GetDriftRunTraceTestsResponseSuccess success */ 1:
                    message.response = {
                        oneofKind: "success",
                        success: GetDriftRunTraceTestsResponseSuccess.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).success)
                    };
                    break;
                case /* tusk.drift.backend.v1.GetDriftRunTraceTestsResponseError error */ 2:
                    message.response = {
                        oneofKind: "error",
                        error: GetDriftRunTraceTestsResponseError.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).error)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDriftRunTraceTestsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tusk.drift.backend.v1.GetDriftRunTraceTestsResponseSuccess success = 1; */
        if (message.response.oneofKind === "success")
            GetDriftRunTraceTestsResponseSuccess.internalBinaryWrite(message.response.success, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* tusk.drift.backend.v1.GetDriftRunTraceTestsResponseError error = 2; */
        if (message.response.oneofKind === "error")
            GetDriftRunTraceTestsResponseError.internalBinaryWrite(message.response.error, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.GetDriftRunTraceTestsResponse
 */
export const GetDriftRunTraceTestsResponse = new GetDriftRunTraceTestsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTraceTestRequest$Type extends MessageType<GetTraceTestRequest> {
    constructor() {
        super("tusk.drift.backend.v1.GetTraceTestRequest", [
            { no: 1, name: "observable_service_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "trace_test_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetTraceTestRequest>): GetTraceTestRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.observableServiceId = "";
        message.traceTestId = "";
        if (value !== undefined)
            reflectionMergePartial<GetTraceTestRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTraceTestRequest): GetTraceTestRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string observable_service_id */ 1:
                    message.observableServiceId = reader.string();
                    break;
                case /* string trace_test_id */ 2:
                    message.traceTestId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTraceTestRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string observable_service_id = 1; */
        if (message.observableServiceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.observableServiceId);
        /* string trace_test_id = 2; */
        if (message.traceTestId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.traceTestId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.GetTraceTestRequest
 */
export const GetTraceTestRequest = new GetTraceTestRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTraceTestResponse$Type extends MessageType<GetTraceTestResponse> {
    constructor() {
        super("tusk.drift.backend.v1.GetTraceTestResponse", [
            { no: 1, name: "success", kind: "message", oneof: "response", T: () => GetTraceTestResponseSuccess },
            { no: 2, name: "error", kind: "message", oneof: "response", T: () => GetTraceTestResponseError }
        ]);
    }
    create(value?: PartialMessage<GetTraceTestResponse>): GetTraceTestResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<GetTraceTestResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTraceTestResponse): GetTraceTestResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tusk.drift.backend.v1.GetTraceTestResponseSuccess success */ 1:
                    message.response = {
                        oneofKind: "success",
                        success: GetTraceTestResponseSuccess.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).success)
                    };
                    break;
                case /* tusk.drift.backend.v1.GetTraceTestResponseError error */ 2:
                    message.response = {
                        oneofKind: "error",
                        error: GetTraceTestResponseError.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).error)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTraceTestResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tusk.drift.backend.v1.GetTraceTestResponseSuccess success = 1; */
        if (message.response.oneofKind === "success")
            GetTraceTestResponseSuccess.internalBinaryWrite(message.response.success, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* tusk.drift.backend.v1.GetTraceTestResponseError error = 2; */
        if (message.response.oneofKind === "error")
            GetTraceTestResponseError.internalBinaryWrite(message.response.error, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.GetTraceTestResponse
 */
export const GetTraceTestResponse = new GetTraceTestResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTraceTestResponseSuccess$Type extends MessageType<GetTraceTestResponseSuccess> {
    constructor() {
        super("tusk.drift.backend.v1.GetTraceTestResponseSuccess", [
            { no: 1, name: "trace_test", kind: "message", T: () => TraceTest }
        ]);
    }
    create(value?: PartialMessage<GetTraceTestResponseSuccess>): GetTraceTestResponseSuccess {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetTraceTestResponseSuccess>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTraceTestResponseSuccess): GetTraceTestResponseSuccess {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tusk.drift.backend.v1.TraceTest trace_test */ 1:
                    message.traceTest = TraceTest.internalBinaryRead(reader, reader.uint32(), options, message.traceTest);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTraceTestResponseSuccess, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tusk.drift.backend.v1.TraceTest trace_test = 1; */
        if (message.traceTest)
            TraceTest.internalBinaryWrite(message.traceTest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.GetTraceTestResponseSuccess
 */
export const GetTraceTestResponseSuccess = new GetTraceTestResponseSuccess$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTraceTestResponseError$Type extends MessageType<GetTraceTestResponseError> {
    constructor() {
        super("tusk.drift.backend.v1.GetTraceTestResponseError", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetTraceTestResponseError>): GetTraceTestResponseError {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<GetTraceTestResponseError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTraceTestResponseError): GetTraceTestResponseError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTraceTestResponseError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.GetTraceTestResponseError
 */
export const GetTraceTestResponseError = new GetTraceTestResponseError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllTraceTestsRequest$Type extends MessageType<GetAllTraceTestsRequest> {
    constructor() {
        super("tusk.drift.backend.v1.GetAllTraceTestsRequest", [
            { no: 1, name: "observable_service_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pagination_cursor", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "page_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetAllTraceTestsRequest>): GetAllTraceTestsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.observableServiceId = "";
        message.pageSize = 0;
        if (value !== undefined)
            reflectionMergePartial<GetAllTraceTestsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllTraceTestsRequest): GetAllTraceTestsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string observable_service_id */ 1:
                    message.observableServiceId = reader.string();
                    break;
                case /* optional string pagination_cursor */ 2:
                    message.paginationCursor = reader.string();
                    break;
                case /* int32 page_size */ 3:
                    message.pageSize = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllTraceTestsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string observable_service_id = 1; */
        if (message.observableServiceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.observableServiceId);
        /* optional string pagination_cursor = 2; */
        if (message.paginationCursor !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.paginationCursor);
        /* int32 page_size = 3; */
        if (message.pageSize !== 0)
            writer.tag(3, WireType.Varint).int32(message.pageSize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.GetAllTraceTestsRequest
 */
export const GetAllTraceTestsRequest = new GetAllTraceTestsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllTraceTestsResponseSuccess$Type extends MessageType<GetAllTraceTestsResponseSuccess> {
    constructor() {
        super("tusk.drift.backend.v1.GetAllTraceTestsResponseSuccess", [
            { no: 1, name: "trace_tests", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TraceTest },
            { no: 2, name: "next_cursor", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "total_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetAllTraceTestsResponseSuccess>): GetAllTraceTestsResponseSuccess {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.traceTests = [];
        message.totalCount = 0;
        if (value !== undefined)
            reflectionMergePartial<GetAllTraceTestsResponseSuccess>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllTraceTestsResponseSuccess): GetAllTraceTestsResponseSuccess {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated tusk.drift.backend.v1.TraceTest trace_tests */ 1:
                    message.traceTests.push(TraceTest.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional string next_cursor */ 2:
                    message.nextCursor = reader.string();
                    break;
                case /* int32 total_count */ 3:
                    message.totalCount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllTraceTestsResponseSuccess, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated tusk.drift.backend.v1.TraceTest trace_tests = 1; */
        for (let i = 0; i < message.traceTests.length; i++)
            TraceTest.internalBinaryWrite(message.traceTests[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional string next_cursor = 2; */
        if (message.nextCursor !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.nextCursor);
        /* int32 total_count = 3; */
        if (message.totalCount !== 0)
            writer.tag(3, WireType.Varint).int32(message.totalCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.GetAllTraceTestsResponseSuccess
 */
export const GetAllTraceTestsResponseSuccess = new GetAllTraceTestsResponseSuccess$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllTraceTestsResponseError$Type extends MessageType<GetAllTraceTestsResponseError> {
    constructor() {
        super("tusk.drift.backend.v1.GetAllTraceTestsResponseError", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetAllTraceTestsResponseError>): GetAllTraceTestsResponseError {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<GetAllTraceTestsResponseError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllTraceTestsResponseError): GetAllTraceTestsResponseError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllTraceTestsResponseError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.GetAllTraceTestsResponseError
 */
export const GetAllTraceTestsResponseError = new GetAllTraceTestsResponseError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllTraceTestsResponse$Type extends MessageType<GetAllTraceTestsResponse> {
    constructor() {
        super("tusk.drift.backend.v1.GetAllTraceTestsResponse", [
            { no: 1, name: "success", kind: "message", oneof: "response", T: () => GetAllTraceTestsResponseSuccess },
            { no: 2, name: "error", kind: "message", oneof: "response", T: () => GetAllTraceTestsResponseError }
        ]);
    }
    create(value?: PartialMessage<GetAllTraceTestsResponse>): GetAllTraceTestsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<GetAllTraceTestsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllTraceTestsResponse): GetAllTraceTestsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tusk.drift.backend.v1.GetAllTraceTestsResponseSuccess success */ 1:
                    message.response = {
                        oneofKind: "success",
                        success: GetAllTraceTestsResponseSuccess.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).success)
                    };
                    break;
                case /* tusk.drift.backend.v1.GetAllTraceTestsResponseError error */ 2:
                    message.response = {
                        oneofKind: "error",
                        error: GetAllTraceTestsResponseError.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).error)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllTraceTestsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tusk.drift.backend.v1.GetAllTraceTestsResponseSuccess success = 1; */
        if (message.response.oneofKind === "success")
            GetAllTraceTestsResponseSuccess.internalBinaryWrite(message.response.success, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* tusk.drift.backend.v1.GetAllTraceTestsResponseError error = 2; */
        if (message.response.oneofKind === "error")
            GetAllTraceTestsResponseError.internalBinaryWrite(message.response.error, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.GetAllTraceTestsResponse
 */
export const GetAllTraceTestsResponse = new GetAllTraceTestsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Deviation$Type extends MessageType<Deviation> {
    constructor() {
        super("tusk.drift.backend.v1.Deviation", [
            { no: 1, name: "field", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Deviation>): Deviation {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.field = "";
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial<Deviation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Deviation): Deviation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string field */ 1:
                    message.field = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Deviation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string field = 1; */
        if (message.field !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.field);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.Deviation
 */
export const Deviation = new Deviation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchLevel$Type extends MessageType<MatchLevel> {
    constructor() {
        super("tusk.drift.backend.v1.MatchLevel", [
            { no: 1, name: "match_type", kind: "enum", T: () => ["tusk.drift.backend.v1.MatchType", MatchType, "MATCH_TYPE_"] },
            { no: 2, name: "match_scope", kind: "enum", T: () => ["tusk.drift.backend.v1.MatchScope", MatchScope, "MATCH_SCOPE_"] },
            { no: 3, name: "match_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "similarity_score", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "top_candidates", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SimilarityCandidate }
        ]);
    }
    create(value?: PartialMessage<MatchLevel>): MatchLevel {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.matchType = 0;
        message.matchScope = 0;
        message.matchDescription = "";
        message.topCandidates = [];
        if (value !== undefined)
            reflectionMergePartial<MatchLevel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchLevel): MatchLevel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tusk.drift.backend.v1.MatchType match_type */ 1:
                    message.matchType = reader.int32();
                    break;
                case /* tusk.drift.backend.v1.MatchScope match_scope */ 2:
                    message.matchScope = reader.int32();
                    break;
                case /* string match_description */ 3:
                    message.matchDescription = reader.string();
                    break;
                case /* optional float similarity_score */ 4:
                    message.similarityScore = reader.float();
                    break;
                case /* repeated tusk.drift.backend.v1.SimilarityCandidate top_candidates */ 5:
                    message.topCandidates.push(SimilarityCandidate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchLevel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tusk.drift.backend.v1.MatchType match_type = 1; */
        if (message.matchType !== 0)
            writer.tag(1, WireType.Varint).int32(message.matchType);
        /* tusk.drift.backend.v1.MatchScope match_scope = 2; */
        if (message.matchScope !== 0)
            writer.tag(2, WireType.Varint).int32(message.matchScope);
        /* string match_description = 3; */
        if (message.matchDescription !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.matchDescription);
        /* optional float similarity_score = 4; */
        if (message.similarityScore !== undefined)
            writer.tag(4, WireType.Bit32).float(message.similarityScore);
        /* repeated tusk.drift.backend.v1.SimilarityCandidate top_candidates = 5; */
        for (let i = 0; i < message.topCandidates.length; i++)
            SimilarityCandidate.internalBinaryWrite(message.topCandidates[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.MatchLevel
 */
export const MatchLevel = new MatchLevel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SimilarityCandidate$Type extends MessageType<SimilarityCandidate> {
    constructor() {
        super("tusk.drift.backend.v1.SimilarityCandidate", [
            { no: 1, name: "span_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "score", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<SimilarityCandidate>): SimilarityCandidate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.spanId = "";
        message.score = 0;
        if (value !== undefined)
            reflectionMergePartial<SimilarityCandidate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimilarityCandidate): SimilarityCandidate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string span_id */ 1:
                    message.spanId = reader.string();
                    break;
                case /* float score */ 2:
                    message.score = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SimilarityCandidate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string span_id = 1; */
        if (message.spanId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.spanId);
        /* float score = 2; */
        if (message.score !== 0)
            writer.tag(2, WireType.Bit32).float(message.score);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.SimilarityCandidate
 */
export const SimilarityCandidate = new SimilarityCandidate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TraceTestSpanResult$Type extends MessageType<TraceTestSpanResult> {
    constructor() {
        super("tusk.drift.backend.v1.TraceTestSpanResult", [
            { no: 1, name: "replay_span", kind: "message", T: () => Span },
            { no: 2, name: "matched_span_recording_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "match_level", kind: "message", T: () => MatchLevel },
            { no: 4, name: "stack_trace", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "deviations", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Deviation }
        ]);
    }
    create(value?: PartialMessage<TraceTestSpanResult>): TraceTestSpanResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.deviations = [];
        if (value !== undefined)
            reflectionMergePartial<TraceTestSpanResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TraceTestSpanResult): TraceTestSpanResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tusk.drift.core.v1.Span replay_span */ 1:
                    message.replaySpan = Span.internalBinaryRead(reader, reader.uint32(), options, message.replaySpan);
                    break;
                case /* optional string matched_span_recording_id */ 2:
                    message.matchedSpanRecordingId = reader.string();
                    break;
                case /* optional tusk.drift.backend.v1.MatchLevel match_level */ 3:
                    message.matchLevel = MatchLevel.internalBinaryRead(reader, reader.uint32(), options, message.matchLevel);
                    break;
                case /* optional string stack_trace */ 4:
                    message.stackTrace = reader.string();
                    break;
                case /* repeated tusk.drift.backend.v1.Deviation deviations */ 5:
                    message.deviations.push(Deviation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TraceTestSpanResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tusk.drift.core.v1.Span replay_span = 1; */
        if (message.replaySpan)
            Span.internalBinaryWrite(message.replaySpan, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional string matched_span_recording_id = 2; */
        if (message.matchedSpanRecordingId !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.matchedSpanRecordingId);
        /* optional tusk.drift.backend.v1.MatchLevel match_level = 3; */
        if (message.matchLevel)
            MatchLevel.internalBinaryWrite(message.matchLevel, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional string stack_trace = 4; */
        if (message.stackTrace !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.stackTrace);
        /* repeated tusk.drift.backend.v1.Deviation deviations = 5; */
        for (let i = 0; i < message.deviations.length; i++)
            Deviation.internalBinaryWrite(message.deviations[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.TraceTestSpanResult
 */
export const TraceTestSpanResult = new TraceTestSpanResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TraceTestResult$Type extends MessageType<TraceTestResult> {
    constructor() {
        super("tusk.drift.backend.v1.TraceTestResult", [
            { no: 1, name: "trace_test_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "test_success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "test_failure_reason", kind: "enum", opt: true, T: () => ["tusk.drift.backend.v1.TraceTestFailureReason", TraceTestFailureReason, "TRACE_TEST_FAILURE_REASON_"] },
            { no: 4, name: "test_failure_message", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "replay_trace_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "replay_server_span_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "span_results", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TraceTestSpanResult }
        ]);
    }
    create(value?: PartialMessage<TraceTestResult>): TraceTestResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.traceTestId = "";
        message.testSuccess = false;
        message.spanResults = [];
        if (value !== undefined)
            reflectionMergePartial<TraceTestResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TraceTestResult): TraceTestResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string trace_test_id */ 1:
                    message.traceTestId = reader.string();
                    break;
                case /* bool test_success */ 2:
                    message.testSuccess = reader.bool();
                    break;
                case /* optional tusk.drift.backend.v1.TraceTestFailureReason test_failure_reason */ 3:
                    message.testFailureReason = reader.int32();
                    break;
                case /* optional string test_failure_message */ 4:
                    message.testFailureMessage = reader.string();
                    break;
                case /* optional string replay_trace_id */ 5:
                    message.replayTraceId = reader.string();
                    break;
                case /* optional string replay_server_span_id */ 6:
                    message.replayServerSpanId = reader.string();
                    break;
                case /* repeated tusk.drift.backend.v1.TraceTestSpanResult span_results */ 7:
                    message.spanResults.push(TraceTestSpanResult.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TraceTestResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string trace_test_id = 1; */
        if (message.traceTestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.traceTestId);
        /* bool test_success = 2; */
        if (message.testSuccess !== false)
            writer.tag(2, WireType.Varint).bool(message.testSuccess);
        /* optional tusk.drift.backend.v1.TraceTestFailureReason test_failure_reason = 3; */
        if (message.testFailureReason !== undefined)
            writer.tag(3, WireType.Varint).int32(message.testFailureReason);
        /* optional string test_failure_message = 4; */
        if (message.testFailureMessage !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.testFailureMessage);
        /* optional string replay_trace_id = 5; */
        if (message.replayTraceId !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.replayTraceId);
        /* optional string replay_server_span_id = 6; */
        if (message.replayServerSpanId !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.replayServerSpanId);
        /* repeated tusk.drift.backend.v1.TraceTestSpanResult span_results = 7; */
        for (let i = 0; i < message.spanResults.length; i++)
            TraceTestSpanResult.internalBinaryWrite(message.spanResults[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.TraceTestResult
 */
export const TraceTestResult = new TraceTestResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadTraceTestResultsRequest$Type extends MessageType<UploadTraceTestResultsRequest> {
    constructor() {
        super("tusk.drift.backend.v1.UploadTraceTestResultsRequest", [
            { no: 1, name: "drift_run_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "cli_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sdk_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "trace_test_results", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TraceTestResult }
        ]);
    }
    create(value?: PartialMessage<UploadTraceTestResultsRequest>): UploadTraceTestResultsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driftRunId = "";
        message.cliVersion = "";
        message.sdkVersion = "";
        message.traceTestResults = [];
        if (value !== undefined)
            reflectionMergePartial<UploadTraceTestResultsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadTraceTestResultsRequest): UploadTraceTestResultsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string drift_run_id */ 1:
                    message.driftRunId = reader.string();
                    break;
                case /* string cli_version */ 2:
                    message.cliVersion = reader.string();
                    break;
                case /* string sdk_version */ 3:
                    message.sdkVersion = reader.string();
                    break;
                case /* repeated tusk.drift.backend.v1.TraceTestResult trace_test_results */ 4:
                    message.traceTestResults.push(TraceTestResult.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadTraceTestResultsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string drift_run_id = 1; */
        if (message.driftRunId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driftRunId);
        /* string cli_version = 2; */
        if (message.cliVersion !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.cliVersion);
        /* string sdk_version = 3; */
        if (message.sdkVersion !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sdkVersion);
        /* repeated tusk.drift.backend.v1.TraceTestResult trace_test_results = 4; */
        for (let i = 0; i < message.traceTestResults.length; i++)
            TraceTestResult.internalBinaryWrite(message.traceTestResults[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.UploadTraceTestResultsRequest
 */
export const UploadTraceTestResultsRequest = new UploadTraceTestResultsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadTraceTestResultsResponseSuccess$Type extends MessageType<UploadTraceTestResultsResponseSuccess> {
    constructor() {
        super("tusk.drift.backend.v1.UploadTraceTestResultsResponseSuccess", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UploadTraceTestResultsResponseSuccess>): UploadTraceTestResultsResponseSuccess {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<UploadTraceTestResultsResponseSuccess>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadTraceTestResultsResponseSuccess): UploadTraceTestResultsResponseSuccess {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadTraceTestResultsResponseSuccess, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.UploadTraceTestResultsResponseSuccess
 */
export const UploadTraceTestResultsResponseSuccess = new UploadTraceTestResultsResponseSuccess$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadTraceTestResultsResponseError$Type extends MessageType<UploadTraceTestResultsResponseError> {
    constructor() {
        super("tusk.drift.backend.v1.UploadTraceTestResultsResponseError", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UploadTraceTestResultsResponseError>): UploadTraceTestResultsResponseError {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<UploadTraceTestResultsResponseError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadTraceTestResultsResponseError): UploadTraceTestResultsResponseError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadTraceTestResultsResponseError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.UploadTraceTestResultsResponseError
 */
export const UploadTraceTestResultsResponseError = new UploadTraceTestResultsResponseError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadTraceTestResultsResponse$Type extends MessageType<UploadTraceTestResultsResponse> {
    constructor() {
        super("tusk.drift.backend.v1.UploadTraceTestResultsResponse", [
            { no: 1, name: "success", kind: "message", oneof: "response", T: () => UploadTraceTestResultsResponseSuccess },
            { no: 2, name: "error", kind: "message", oneof: "response", T: () => UploadTraceTestResultsResponseError }
        ]);
    }
    create(value?: PartialMessage<UploadTraceTestResultsResponse>): UploadTraceTestResultsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<UploadTraceTestResultsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadTraceTestResultsResponse): UploadTraceTestResultsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tusk.drift.backend.v1.UploadTraceTestResultsResponseSuccess success */ 1:
                    message.response = {
                        oneofKind: "success",
                        success: UploadTraceTestResultsResponseSuccess.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).success)
                    };
                    break;
                case /* tusk.drift.backend.v1.UploadTraceTestResultsResponseError error */ 2:
                    message.response = {
                        oneofKind: "error",
                        error: UploadTraceTestResultsResponseError.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).error)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadTraceTestResultsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tusk.drift.backend.v1.UploadTraceTestResultsResponseSuccess success = 1; */
        if (message.response.oneofKind === "success")
            UploadTraceTestResultsResponseSuccess.internalBinaryWrite(message.response.success, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* tusk.drift.backend.v1.UploadTraceTestResultsResponseError error = 2; */
        if (message.response.oneofKind === "error")
            UploadTraceTestResultsResponseError.internalBinaryWrite(message.response.error, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.UploadTraceTestResultsResponse
 */
export const UploadTraceTestResultsResponse = new UploadTraceTestResultsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateDriftRunCIStatusRequest$Type extends MessageType<UpdateDriftRunCIStatusRequest> {
    constructor() {
        super("tusk.drift.backend.v1.UpdateDriftRunCIStatusRequest", [
            { no: 1, name: "drift_run_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ci_status", kind: "enum", T: () => ["tusk.drift.backend.v1.DriftRunCIStatus", DriftRunCIStatus] },
            { no: 3, name: "ci_status_message", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateDriftRunCIStatusRequest>): UpdateDriftRunCIStatusRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driftRunId = "";
        message.ciStatus = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateDriftRunCIStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateDriftRunCIStatusRequest): UpdateDriftRunCIStatusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string drift_run_id */ 1:
                    message.driftRunId = reader.string();
                    break;
                case /* tusk.drift.backend.v1.DriftRunCIStatus ci_status */ 2:
                    message.ciStatus = reader.int32();
                    break;
                case /* optional string ci_status_message */ 3:
                    message.ciStatusMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateDriftRunCIStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string drift_run_id = 1; */
        if (message.driftRunId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driftRunId);
        /* tusk.drift.backend.v1.DriftRunCIStatus ci_status = 2; */
        if (message.ciStatus !== 0)
            writer.tag(2, WireType.Varint).int32(message.ciStatus);
        /* optional string ci_status_message = 3; */
        if (message.ciStatusMessage !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.ciStatusMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.UpdateDriftRunCIStatusRequest
 */
export const UpdateDriftRunCIStatusRequest = new UpdateDriftRunCIStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateDriftRunCIStatusResponseSuccess$Type extends MessageType<UpdateDriftRunCIStatusResponseSuccess> {
    constructor() {
        super("tusk.drift.backend.v1.UpdateDriftRunCIStatusResponseSuccess", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateDriftRunCIStatusResponseSuccess>): UpdateDriftRunCIStatusResponseSuccess {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateDriftRunCIStatusResponseSuccess>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateDriftRunCIStatusResponseSuccess): UpdateDriftRunCIStatusResponseSuccess {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateDriftRunCIStatusResponseSuccess, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.UpdateDriftRunCIStatusResponseSuccess
 */
export const UpdateDriftRunCIStatusResponseSuccess = new UpdateDriftRunCIStatusResponseSuccess$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateDriftRunCIStatusResponseError$Type extends MessageType<UpdateDriftRunCIStatusResponseError> {
    constructor() {
        super("tusk.drift.backend.v1.UpdateDriftRunCIStatusResponseError", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateDriftRunCIStatusResponseError>): UpdateDriftRunCIStatusResponseError {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateDriftRunCIStatusResponseError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateDriftRunCIStatusResponseError): UpdateDriftRunCIStatusResponseError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateDriftRunCIStatusResponseError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.UpdateDriftRunCIStatusResponseError
 */
export const UpdateDriftRunCIStatusResponseError = new UpdateDriftRunCIStatusResponseError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateDriftRunCIStatusResponse$Type extends MessageType<UpdateDriftRunCIStatusResponse> {
    constructor() {
        super("tusk.drift.backend.v1.UpdateDriftRunCIStatusResponse", [
            { no: 1, name: "success", kind: "message", oneof: "response", T: () => UpdateDriftRunCIStatusResponseSuccess },
            { no: 2, name: "error", kind: "message", oneof: "response", T: () => UpdateDriftRunCIStatusResponseError }
        ]);
    }
    create(value?: PartialMessage<UpdateDriftRunCIStatusResponse>): UpdateDriftRunCIStatusResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<UpdateDriftRunCIStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateDriftRunCIStatusResponse): UpdateDriftRunCIStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tusk.drift.backend.v1.UpdateDriftRunCIStatusResponseSuccess success */ 1:
                    message.response = {
                        oneofKind: "success",
                        success: UpdateDriftRunCIStatusResponseSuccess.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).success)
                    };
                    break;
                case /* tusk.drift.backend.v1.UpdateDriftRunCIStatusResponseError error */ 2:
                    message.response = {
                        oneofKind: "error",
                        error: UpdateDriftRunCIStatusResponseError.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).error)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateDriftRunCIStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tusk.drift.backend.v1.UpdateDriftRunCIStatusResponseSuccess success = 1; */
        if (message.response.oneofKind === "success")
            UpdateDriftRunCIStatusResponseSuccess.internalBinaryWrite(message.response.success, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* tusk.drift.backend.v1.UpdateDriftRunCIStatusResponseError error = 2; */
        if (message.response.oneofKind === "error")
            UpdateDriftRunCIStatusResponseError.internalBinaryWrite(message.response.error, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.UpdateDriftRunCIStatusResponse
 */
export const UpdateDriftRunCIStatusResponse = new UpdateDriftRunCIStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinalizeDriftRunRequest$Type extends MessageType<FinalizeDriftRunRequest> {
    constructor() {
        super("tusk.drift.backend.v1.FinalizeDriftRunRequest", [
            { no: 1, name: "drift_run_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FinalizeDriftRunRequest>): FinalizeDriftRunRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.driftRunId = "";
        if (value !== undefined)
            reflectionMergePartial<FinalizeDriftRunRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FinalizeDriftRunRequest): FinalizeDriftRunRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string drift_run_id */ 1:
                    message.driftRunId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FinalizeDriftRunRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string drift_run_id = 1; */
        if (message.driftRunId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.driftRunId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.FinalizeDriftRunRequest
 */
export const FinalizeDriftRunRequest = new FinalizeDriftRunRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinalizeDriftRunResponseSuccess$Type extends MessageType<FinalizeDriftRunResponseSuccess> {
    constructor() {
        super("tusk.drift.backend.v1.FinalizeDriftRunResponseSuccess", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FinalizeDriftRunResponseSuccess>): FinalizeDriftRunResponseSuccess {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<FinalizeDriftRunResponseSuccess>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FinalizeDriftRunResponseSuccess): FinalizeDriftRunResponseSuccess {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FinalizeDriftRunResponseSuccess, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.FinalizeDriftRunResponseSuccess
 */
export const FinalizeDriftRunResponseSuccess = new FinalizeDriftRunResponseSuccess$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinalizeDriftRunResponseError$Type extends MessageType<FinalizeDriftRunResponseError> {
    constructor() {
        super("tusk.drift.backend.v1.FinalizeDriftRunResponseError", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FinalizeDriftRunResponseError>): FinalizeDriftRunResponseError {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<FinalizeDriftRunResponseError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FinalizeDriftRunResponseError): FinalizeDriftRunResponseError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FinalizeDriftRunResponseError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.FinalizeDriftRunResponseError
 */
export const FinalizeDriftRunResponseError = new FinalizeDriftRunResponseError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinalizeDriftRunResponse$Type extends MessageType<FinalizeDriftRunResponse> {
    constructor() {
        super("tusk.drift.backend.v1.FinalizeDriftRunResponse", [
            { no: 1, name: "success", kind: "message", oneof: "response", T: () => FinalizeDriftRunResponseSuccess },
            { no: 2, name: "error", kind: "message", oneof: "response", T: () => FinalizeDriftRunResponseError }
        ]);
    }
    create(value?: PartialMessage<FinalizeDriftRunResponse>): FinalizeDriftRunResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<FinalizeDriftRunResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FinalizeDriftRunResponse): FinalizeDriftRunResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tusk.drift.backend.v1.FinalizeDriftRunResponseSuccess success */ 1:
                    message.response = {
                        oneofKind: "success",
                        success: FinalizeDriftRunResponseSuccess.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).success)
                    };
                    break;
                case /* tusk.drift.backend.v1.FinalizeDriftRunResponseError error */ 2:
                    message.response = {
                        oneofKind: "error",
                        error: FinalizeDriftRunResponseError.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).error)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FinalizeDriftRunResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tusk.drift.backend.v1.FinalizeDriftRunResponseSuccess success = 1; */
        if (message.response.oneofKind === "success")
            FinalizeDriftRunResponseSuccess.internalBinaryWrite(message.response.success, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* tusk.drift.backend.v1.FinalizeDriftRunResponseError error = 2; */
        if (message.response.oneofKind === "error")
            FinalizeDriftRunResponseError.internalBinaryWrite(message.response.error, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tusk.drift.backend.v1.FinalizeDriftRunResponse
 */
export const FinalizeDriftRunResponse = new FinalizeDriftRunResponse$Type();
/**
 * @generated ServiceType for protobuf service tusk.drift.backend.v1.TestRunService
 */
export const TestRunService = new ServiceType("tusk.drift.backend.v1.TestRunService", [
    { name: "GetGlobalSpans", options: {}, I: GetGlobalSpansRequest, O: GetGlobalSpansResponse },
    { name: "GetPreAppStartSpans", options: {}, I: GetPreAppStartSpansRequest, O: GetPreAppStartSpansResponse },
    { name: "CreateDriftRun", options: {}, I: CreateDriftRunRequest, O: CreateDriftRunResponse },
    { name: "GetDriftRunTraceTests", options: {}, I: GetDriftRunTraceTestsRequest, O: GetDriftRunTraceTestsResponse },
    { name: "GetAllTraceTests", options: {}, I: GetAllTraceTestsRequest, O: GetAllTraceTestsResponse },
    { name: "GetTraceTest", options: {}, I: GetTraceTestRequest, O: GetTraceTestResponse },
    { name: "UploadTraceTestResults", options: {}, I: UploadTraceTestResultsRequest, O: UploadTraceTestResultsResponse },
    { name: "UpdateDriftRunCIStatus", options: {}, I: UpdateDriftRunCIStatusRequest, O: UpdateDriftRunCIStatusResponse },
    { name: "FinalizeDriftRun", options: {}, I: FinalizeDriftRunRequest, O: FinalizeDriftRunResponse }
]);
